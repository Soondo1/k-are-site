"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gray-matter";
exports.ids = ["vendor-chunks/gray-matter"];
exports.modules = {

/***/ "(rsc)/./node_modules/gray-matter/index.js":
/*!*******************************************!*\
  !*** ./node_modules/gray-matter/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar extend = __webpack_require__(/*! extend-shallow */ \"(rsc)/./node_modules/extend-shallow/index.js\");\nvar parsers = __webpack_require__(/*! ./lib/parsers */ \"(rsc)/./node_modules/gray-matter/lib/parsers.js\");\n\n/**\n * Expose `matter()`\n */\n\nmodule.exports = matter;\n\n/**\n * Parses a `string` of front-matter with the given `options`,\n * and returns an object.\n *\n * ```js\n * matter('---\\ntitle: foo\\n---\\nbar');\n * //=> {data: {title: 'foo'}, content: 'bar', orig: '---\\ntitle: foo\\n---\\nbar'}\n * ```\n *\n * @param {String} `string` The string to parse.\n * @param {Object} `options`\n *   @option {Array} [options] `delims` Custom delimiters formatted as an array. The default is `['---', '---']`.\n *   @option {Function} [options] `parser` Parser function to use. [js-yaml] is the default.\n * @return {Object} Valid JSON\n * @api public\n */\n\nfunction matter(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('gray-matter expects a string');\n  }\n\n  // default results to build up\n  var res = {orig: str, data: {}, content: str};\n  if (str === '') {\n    return res;\n  }\n\n  // delimiters\n  var delims = arrayify((options && options.delims) || '---');\n  var a = delims[0];\n\n  // strip byte order marks\n  str = stripBom(str);\n\n  // if the first delim isn't the first thing, return\n  if (!isFirst(str, a)) {\n    return res;\n  }\n\n  var b = '\\n' + (delims[1] || delims[0]);\n  var alen = a.length;\n\n  // if the next character after the first delim\n  // is a character in the first delim, then just\n  // return the default object. it's either a bad\n  // delim or not a delimiter at all.\n  if (a.indexOf(str.charAt(alen + 1)) !== -1) {\n    return res;\n  }\n\n  var len = str.length;\n\n  // find the index of the next delimiter before\n  // going any further. If not found, return.\n  var end = str.indexOf(b, alen + 1);\n  if (end === -1) {\n    end = len;\n  }\n\n  // detect a language, if defined\n  var lang = str.slice(alen, str.indexOf('\\n'));\n  // measure the lang before trimming whitespace\n  var start = alen + lang.length;\n\n  var opts = options || {};\n  opts.lang = opts.lang || 'yaml';\n  lang = (lang && lang.trim()) || opts.lang;\n\n  // get the front matter (data) string\n  var data = str.slice(start, end).trim();\n  if (data) {\n    // if data exists, see if we have a matching parser\n    var fn = opts.parser || parsers[lang];\n    if (typeof fn === 'function') {\n      // run the parser on the data string\n      res.data = fn(data, opts);\n    } else {\n      throw new Error('gray-matter cannot find a parser for: ' + str);\n    }\n  }\n\n  // grab the content from the string, stripping\n  // an optional new line after the second delim\n  var con = str.substr(end + b.length);\n  if (con.charAt(0) === '\\n') {\n    con = con.substr(1);\n  } else if (con.charAt(0) === '\\r' && con.charAt(1) === '\\n') {\n    con = con.substr(2);\n  }\n\n  res.content = con;\n  return res;\n}\n\n/**\n * Expose `parsers`\n *\n * @type {Object}\n */\n\nmatter.parsers = parsers;\n\n/**\n * Requires cache\n */\n\nvar YAML = matter.parsers.requires.yaml || (matter.parsers.requires.yaml = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/index.js\"));\n\n/**\n * Read a file and parse front matter. Returns the same object\n * as `matter()`.\n *\n * ```js\n * matter.read('home.md');\n * ```\n *\n * @param {String} `fp` file path of the file to read.\n * @param {Object} `options` Options to pass to gray-matter.\n * @return {Object}\n * @api public\n */\n\nmatter.read = function(fp, options) {\n  var str = fs.readFileSync(fp, 'utf8');\n  var obj = matter(str, options);\n  return extend(obj, {\n    path: fp\n  });\n};\n\n/**\n * Stringify an object to front-matter-formatted YAML, and\n * concatenate it to the given string.\n *\n * ```js\n * matter.stringify('foo bar baz', {title: 'Home'});\n * ```\n * Results in:\n *\n * ```yaml\n * ---\n * title: Home\n * ---\n * foo bar baz\n * ```\n *\n * @param {String} `str` The content string to append to stringified front-matter.\n * @param {Object} `data` Front matter to stringify.\n * @param {Object} `options` Options to pass to js-yaml\n * @return {String}\n * @api public\n */\n\nmatter.stringify = function(str, data, options) {\n  var delims = arrayify(options && options.delims || '---');\n  var res = '';\n  res += delims[0] + '\\n';\n  res += YAML.safeDump(data, options);\n  res += (delims[1] || delims[0]) + '\\n';\n  res += str + '\\n';\n  return res;\n};\n\n/**\n * Return true if the given `string` has front matter.\n *\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Boolean} True if front matter exists.\n */\n\nmatter.test = function(str, options) {\n  var delims = arrayify(options && options.delims || '---');\n  return isFirst(str, delims[0]);\n};\n\n/**\n * Return true if the given `ch` the first\n * thing in the string.\n */\n\nfunction isFirst(str, ch) {\n  return str.substr(0, ch.length) === ch;\n}\n\n/**\n * Utility to strip byte order marks\n */\n\nfunction stripBom(str) {\n  return str.charAt(0) === '\\uFEFF' ? str.slice(1) : str;\n}\n\n/**\n * Typecast `val` to an array.\n */\n\nfunction arrayify(val) {\n  return !Array.isArray(val) ? [val] : val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/parsers.js":
/*!*************************************************!*\
  !*** ./node_modules/gray-matter/lib/parsers.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * gray-matter <https://github.com/jonschlinkert/gray-matter.git>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n\n\n\n/**\n * Module dependencies\n */\n\nvar extend = __webpack_require__(/*! extend-shallow */ \"(rsc)/./node_modules/extend-shallow/index.js\");\nvar red = __webpack_require__(/*! ansi-red */ \"(rsc)/./node_modules/ansi-red/index.js\");\n\n/**\n * Expose `parser` module\n */\n\nvar parser = module.exports;\n\n/**\n * Requires cache.\n */\n\nparser.requires = {};\n\n/**\n * Parse YAML front matter\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [js-yaml].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.yaml = function(str, options) {\n  var opts = extend({strict: false, safeLoad: false}, options);\n  try {\n    var YAML = parser.requires.yaml || (parser.requires.yaml = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/index.js\"));\n    return opts.safeLoad ? YAML.safeLoad(str, options) : YAML.load(str, options);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('js-yaml', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n\n/**\n * Parse JSON front matter\n *\n * @param  {String} `str` The string to parse.\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.json = function(str, options) {\n  var opts = extend({strict: false}, options);\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('JSON', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n\n/**\n * Parse JavaScript front matter. To use javascript front-matter, you must\n * set `options.eval` to `true`.\n *\n * By default, javascript code is wrapped in a function that is immediately\n * executed when the parser is called. Thus, to be returned as a useful object,\n * code should be written as object properties.\n *\n * **Example:**\n *\n * ```markdown\n * ---js\n * title: 'autodetect-javascript',\n * // this function won't be invoked when the parser is called\n * fn: {\n *   reverse: function(str) {\n *     return str.split('').reverse().join('');\n *   }\n * }\n * ---\n * ```\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Set `options.wrapped` to `false` to enable writing raw, un-wrapped javascript.\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.javascript = function(str, options) {\n  var opts = extend({wrapped: true, eval: false, strict: false}, options);\n  if (opts.eval) {\n    if (opts.wrapped) {\n      str = 'function data() {return {' + str + '}; } data();';\n    }\n    try {\n      return eval(str);\n    } catch (err) {\n      throw new SyntaxError(msg('javascript', err));\n    }\n    return {};\n  } else {\n\n    // if `eval` isn't set\n    if (opts.strict) {\n      throw new Error(evalError('javascript'));\n    } else {\n      console.error(evalError('javascript', true));\n    }\n  }\n};\n\n\n/**\n * Alias for `parse.javascript()`.\n *\n * @api public\n */\n\nparser.js = parser.javascript;\n\n\n/**\n * Parse Coffee-Script front matter. To use coffee front-matter, you must\n * set `options.eval` to `true`.\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [coffee-script].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.coffee = function(str, options) {\n  var opts = extend({eval: false, strict: false}, options);\n  if (opts.eval) {\n    try {\n      var coffee = parser.requires.coffee || (parser.requires.coffee = __webpack_require__(/*! coffee-script */ \"(rsc)/./node_modules/coffee-script/lib/coffee-script/coffee-script.js\"));\n      return coffee['eval'](str, options);\n    } catch (err) {\n      throw new SyntaxError(msg('coffee-script', err));\n    }\n  } else {\n\n    // if `eval` isn't set\n    if (opts.strict) {\n      throw new Error(evalError('coffee'));\n    } else {\n      console.error(evalError('coffee', true));\n    }\n  }\n};\n\n/**\n * Alias for `parse.coffee()`.\n *\n * @api public\n */\n\nparser.cson = parser.coffee;\n\n/**\n * Parse TOML front matter.\n *\n * @param  {String} `str` The string to parse.\n * @param  {Object} `options` Options to pass to [toml-node].\n * @return {Object} Parsed object of data.\n * @api public\n */\n\nparser.toml = function(str, opts) {\n  try {\n    var toml = parser.requires.toml || (parser.requires.toml = __webpack_require__(/*! toml */ \"(rsc)/./node_modules/toml/index.js\"));\n    return toml.parse(str);\n  } catch (err) {\n    if (opts.strict) {\n      throw new SyntaxError(msg('TOML', err));\n    } else {\n      return {};\n    }\n  }\n};\n\n/**\n * Normalize error messages\n */\n\nfunction msg(lang, err) {\n  return 'gray-matter parser [' + lang + ']: ' + err;\n}\n\nfunction evalError(lang, color) {\n  var msg = '[gray-matter]: to parse ' + lang + ' set `options.eval` to `true`';\n  return color ? red(msg) : msg;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/parsers.js\n");

/***/ })

};
;