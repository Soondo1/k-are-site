/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext";
exports.ids = ["vendor-chunks/@portabletext"];
exports.modules = {

/***/ "(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @lightSyntaxTransform\n * @noflow\n * @nolint\n * @preventMunge\n * @preserve-invariant-messages\n */\n\n\"use no memo\";\n\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  $dispatcherGuard: () => $dispatcherGuard,\n  $makeReadOnly: () => $makeReadOnly,\n  $reset: () => $reset,\n  $structuralCheck: () => $structuralCheck,\n  c: () => c,\n  clearRenderCounterRegistry: () => clearRenderCounterRegistry,\n  renderCounterRegistry: () => renderCounterRegistry,\n  useRenderCounter: () => useRenderCounter\n});\nmodule.exports = __toCommonJS(index_exports);\nvar React = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar { useRef, useEffect, isValidElement } = React;\nvar _a;\nvar ReactSecretInternals = (\n  //@ts-ignore\n  (_a = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) != null ? _a : React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n);\nvar $empty = Symbol.for(\"react.memo_cache_sentinel\");\nvar _a2;\nvar c = (\n  // @ts-expect-error\n  typeof ((_a2 = React.__COMPILER_RUNTIME) == null ? void 0 : _a2.c) === \"function\" ? (\n    // @ts-expect-error\n    React.__COMPILER_RUNTIME.c\n  ) : function c2(size) {\n    return React.useMemo(() => {\n      const $ = new Array(size);\n      for (let ii = 0; ii < size; ii++) {\n        $[ii] = $empty;\n      }\n      $[$empty] = true;\n      return $;\n    }, []);\n  }\n);\nvar LazyGuardDispatcher = {};\n[\n  \"readContext\",\n  \"useCallback\",\n  \"useContext\",\n  \"useEffect\",\n  \"useImperativeHandle\",\n  \"useInsertionEffect\",\n  \"useLayoutEffect\",\n  \"useMemo\",\n  \"useReducer\",\n  \"useRef\",\n  \"useState\",\n  \"useDebugValue\",\n  \"useDeferredValue\",\n  \"useTransition\",\n  \"useMutableSource\",\n  \"useSyncExternalStore\",\n  \"useId\",\n  \"unstable_isNewReconciler\",\n  \"getCacheSignal\",\n  \"getCacheForType\",\n  \"useCacheRefresh\"\n].forEach((name) => {\n  LazyGuardDispatcher[name] = () => {\n    throw new Error(\n      `[React] Unexpected React hook call (${name}) from a React compiled function. Check that all hooks are called directly and named according to convention ('use[A-Z]') `\n    );\n  };\n});\nvar originalDispatcher = null;\nLazyGuardDispatcher[\"useMemoCache\"] = (count) => {\n  if (originalDispatcher == null) {\n    throw new Error(\n      \"React Compiler internal invariant violation: unexpected null dispatcher\"\n    );\n  } else {\n    return originalDispatcher.useMemoCache(count);\n  }\n};\nfunction setCurrent(newDispatcher) {\n  ReactSecretInternals.ReactCurrentDispatcher.current = newDispatcher;\n  return ReactSecretInternals.ReactCurrentDispatcher.current;\n}\nvar guardFrames = [];\nfunction $dispatcherGuard(kind) {\n  const curr = ReactSecretInternals.ReactCurrentDispatcher.current;\n  if (kind === 0 /* PushGuardContext */) {\n    guardFrames.push(curr);\n    if (guardFrames.length === 1) {\n      originalDispatcher = curr;\n    }\n    if (curr === LazyGuardDispatcher) {\n      throw new Error(\n        `[React] Unexpected call to custom hook or component from a React compiled function. Check that (1) all hooks are called directly and named according to convention ('use[A-Z]') and (2) components are returned as JSX instead of being directly invoked.`\n      );\n    }\n    setCurrent(LazyGuardDispatcher);\n  } else if (kind === 1 /* PopGuardContext */) {\n    const lastFrame = guardFrames.pop();\n    if (lastFrame == null) {\n      throw new Error(\n        \"React Compiler internal error: unexpected null in guard stack\"\n      );\n    }\n    if (guardFrames.length === 0) {\n      originalDispatcher = null;\n    }\n    setCurrent(lastFrame);\n  } else if (kind === 2 /* PushExpectHook */) {\n    guardFrames.push(curr);\n    setCurrent(originalDispatcher);\n  } else if (kind === 3 /* PopExpectHook */) {\n    const lastFrame = guardFrames.pop();\n    if (lastFrame == null) {\n      throw new Error(\n        \"React Compiler internal error: unexpected null in guard stack\"\n      );\n    }\n    setCurrent(lastFrame);\n  } else {\n    throw new Error(\"React Compiler internal error: unreachable block\" + kind);\n  }\n}\nfunction $reset($) {\n  for (let ii = 0; ii < $.length; ii++) {\n    $[ii] = $empty;\n  }\n}\nfunction $makeReadOnly() {\n  throw new Error(\"TODO: implement $makeReadOnly in react-compiler-runtime\");\n}\nvar renderCounterRegistry = /* @__PURE__ */ new Map();\nfunction clearRenderCounterRegistry() {\n  for (const counters of renderCounterRegistry.values()) {\n    counters.forEach((counter) => {\n      counter.count = 0;\n    });\n  }\n}\nfunction registerRenderCounter(name, val) {\n  let counters = renderCounterRegistry.get(name);\n  if (counters == null) {\n    counters = /* @__PURE__ */ new Set();\n    renderCounterRegistry.set(name, counters);\n  }\n  counters.add(val);\n}\nfunction removeRenderCounter(name, val) {\n  const counters = renderCounterRegistry.get(name);\n  if (counters == null) {\n    return;\n  }\n  counters.delete(val);\n}\nfunction useRenderCounter(name) {\n  const val = useRef(null);\n  if (val.current != null) {\n    val.current.count += 1;\n  }\n  useEffect(() => {\n    if (val.current == null) {\n      const counter = { count: 0 };\n      registerRenderCounter(name, counter);\n      val.current = counter;\n    }\n    return () => {\n      if (val.current !== null) {\n        removeRenderCounter(name, val.current);\n      }\n    };\n  });\n}\nvar seenErrors = /* @__PURE__ */ new Set();\nfunction $structuralCheck(oldValue, newValue, variableName, fnName, kind, loc) {\n  function error(l, r, path, depth) {\n    const str = `${fnName}:${loc} [${kind}] ${variableName}${path} changed from ${l} to ${r} at depth ${depth}`;\n    if (seenErrors.has(str)) {\n      return;\n    }\n    seenErrors.add(str);\n    console.error(str);\n  }\n  const depthLimit = 2;\n  function recur(oldValue2, newValue2, path, depth) {\n    if (depth > depthLimit) {\n      return;\n    } else if (oldValue2 === newValue2) {\n      return;\n    } else if (typeof oldValue2 !== typeof newValue2) {\n      error(`type ${typeof oldValue2}`, `type ${typeof newValue2}`, path, depth);\n    } else if (typeof oldValue2 === \"object\") {\n      const oldArray = Array.isArray(oldValue2);\n      const newArray = Array.isArray(newValue2);\n      if (oldValue2 === null && newValue2 !== null) {\n        error(\"null\", `type ${typeof newValue2}`, path, depth);\n      } else if (newValue2 === null) {\n        error(`type ${typeof oldValue2}`, \"null\", path, depth);\n      } else if (oldValue2 instanceof Map) {\n        if (!(newValue2 instanceof Map)) {\n          error(`Map instance`, `other value`, path, depth);\n        } else if (oldValue2.size !== newValue2.size) {\n          error(\n            `Map instance with size ${oldValue2.size}`,\n            `Map instance with size ${newValue2.size}`,\n            path,\n            depth\n          );\n        } else {\n          for (const [k, v] of oldValue2) {\n            if (!newValue2.has(k)) {\n              error(\n                `Map instance with key ${k}`,\n                `Map instance without key ${k}`,\n                path,\n                depth\n              );\n            } else {\n              recur(v, newValue2.get(k), `${path}.get(${k})`, depth + 1);\n            }\n          }\n        }\n      } else if (newValue2 instanceof Map) {\n        error(\"other value\", `Map instance`, path, depth);\n      } else if (oldValue2 instanceof Set) {\n        if (!(newValue2 instanceof Set)) {\n          error(`Set instance`, `other value`, path, depth);\n        } else if (oldValue2.size !== newValue2.size) {\n          error(\n            `Set instance with size ${oldValue2.size}`,\n            `Set instance with size ${newValue2.size}`,\n            path,\n            depth\n          );\n        } else {\n          for (const v of newValue2) {\n            if (!oldValue2.has(v)) {\n              error(\n                `Set instance without element ${v}`,\n                `Set instance with element ${v}`,\n                path,\n                depth\n              );\n            }\n          }\n        }\n      } else if (newValue2 instanceof Set) {\n        error(\"other value\", `Set instance`, path, depth);\n      } else if (oldArray || newArray) {\n        if (oldArray !== newArray) {\n          error(\n            `type ${oldArray ? \"array\" : \"object\"}`,\n            `type ${newArray ? \"array\" : \"object\"}`,\n            path,\n            depth\n          );\n        } else if (oldValue2.length !== newValue2.length) {\n          error(\n            `array with length ${oldValue2.length}`,\n            `array with length ${newValue2.length}`,\n            path,\n            depth\n          );\n        } else {\n          for (let ii = 0; ii < oldValue2.length; ii++) {\n            recur(oldValue2[ii], newValue2[ii], `${path}[${ii}]`, depth + 1);\n          }\n        }\n      } else if (isValidElement(oldValue2) || isValidElement(newValue2)) {\n        if (isValidElement(oldValue2) !== isValidElement(newValue2)) {\n          error(\n            `type ${isValidElement(oldValue2) ? \"React element\" : \"object\"}`,\n            `type ${isValidElement(newValue2) ? \"React element\" : \"object\"}`,\n            path,\n            depth\n          );\n        } else if (oldValue2.type !== newValue2.type) {\n          error(\n            `React element of type ${oldValue2.type}`,\n            `React element of type ${newValue2.type}`,\n            path,\n            depth\n          );\n        } else {\n          recur(\n            oldValue2.props,\n            newValue2.props,\n            `[props of ${path}]`,\n            depth + 1\n          );\n        }\n      } else {\n        for (const key in newValue2) {\n          if (!(key in oldValue2)) {\n            error(\n              `object without key ${key}`,\n              `object with key ${key}`,\n              path,\n              depth\n            );\n          }\n        }\n        for (const key in oldValue2) {\n          if (!(key in newValue2)) {\n            error(\n              `object with key ${key}`,\n              `object without key ${key}`,\n              path,\n              depth\n            );\n          } else {\n            recur(oldValue2[key], newValue2[key], `${path}.${key}`, depth + 1);\n          }\n        }\n      }\n    } else if (typeof oldValue2 === \"function\") {\n      return;\n    } else if (isNaN(oldValue2) || isNaN(newValue2)) {\n      if (isNaN(oldValue2) !== isNaN(newValue2)) {\n        error(\n          `${isNaN(oldValue2) ? \"NaN\" : \"non-NaN value\"}`,\n          `${isNaN(newValue2) ? \"NaN\" : \"non-NaN value\"}`,\n          path,\n          depth\n        );\n      }\n    } else if (oldValue2 !== newValue2) {\n      error(oldValue2, newValue2, path, depth);\n    }\n  }\n  recur(oldValue, newValue, \"\", 0);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3Ivbm9kZV9tb2R1bGVzL3JlYWN0LWNvbXBpbGVyLXJ1bnRpbWUvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNEZBQTRGO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSw4QkFBOEI7QUFDdkc7QUFDQTtBQUNBLG9EQUFvRCxrQkFBa0IsYUFBYTs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLHdHQUFPO0FBQ25DLE1BQU0sb0NBQW9DO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixXQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEtBQUs7QUFDbEQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU8sR0FBRyxLQUFLLEdBQUcsS0FBSyxJQUFJLGFBQWEsRUFBRSxNQUFNLGVBQWUsR0FBRyxLQUFLLEdBQUcsV0FBVyxNQUFNO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOLG9CQUFvQixpQkFBaUIsV0FBVyxpQkFBaUI7QUFDakUsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpQkFBaUI7QUFDL0MsUUFBUTtBQUNSLHNCQUFzQixpQkFBaUI7QUFDdkMsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxzQ0FBc0MsZUFBZTtBQUNyRCxzQ0FBc0MsZUFBZTtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLEVBQUU7QUFDM0MsNENBQTRDLEVBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLDRDQUE0QyxLQUFLLE9BQU8sRUFBRTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JELHNDQUFzQyxlQUFlO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsRUFBRTtBQUNsRCw2Q0FBNkMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQsb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxpQ0FBaUMsaUJBQWlCO0FBQ2xELGlDQUFpQyxpQkFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLDJCQUEyQix1QkFBdUI7QUFDbEQsbURBQW1ELEtBQUssR0FBRyxHQUFHO0FBQzlEO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLG9CQUFvQix1REFBdUQ7QUFDM0Usb0JBQW9CLHVEQUF1RDtBQUMzRTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxxQ0FBcUMsZUFBZTtBQUNwRCxxQ0FBcUMsZUFBZTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLEtBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJO0FBQ3hDLGlDQUFpQyxJQUFJO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsSUFBSTtBQUNyQyxvQ0FBb0MsSUFBSTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1oscURBQXFELEtBQUssR0FBRyxJQUFJO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsYUFBYSwyQ0FBMkM7QUFDeEQsYUFBYSwyQ0FBMkM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQVNMO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rYXJlLy4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL25vZGVfbW9kdWxlcy9yZWFjdC1jb21waWxlci1ydW50aW1lL2Rpc3QvaW5kZXguanM/OTBhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpZ2h0U3ludGF4VHJhbnNmb3JtXG4gKiBAbm9mbG93XG4gKiBAbm9saW50XG4gKiBAcHJldmVudE11bmdlXG4gKiBAcHJlc2VydmUtaW52YXJpYW50LW1lc3NhZ2VzXG4gKi9cblxuXCJ1c2Ugbm8gbWVtb1wiO1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBpbmRleF9leHBvcnRzID0ge307XG5fX2V4cG9ydChpbmRleF9leHBvcnRzLCB7XG4gICRkaXNwYXRjaGVyR3VhcmQ6ICgpID0+ICRkaXNwYXRjaGVyR3VhcmQsXG4gICRtYWtlUmVhZE9ubHk6ICgpID0+ICRtYWtlUmVhZE9ubHksXG4gICRyZXNldDogKCkgPT4gJHJlc2V0LFxuICAkc3RydWN0dXJhbENoZWNrOiAoKSA9PiAkc3RydWN0dXJhbENoZWNrLFxuICBjOiAoKSA9PiBjLFxuICBjbGVhclJlbmRlckNvdW50ZXJSZWdpc3RyeTogKCkgPT4gY2xlYXJSZW5kZXJDb3VudGVyUmVnaXN0cnksXG4gIHJlbmRlckNvdW50ZXJSZWdpc3RyeTogKCkgPT4gcmVuZGVyQ291bnRlclJlZ2lzdHJ5LFxuICB1c2VSZW5kZXJDb3VudGVyOiAoKSA9PiB1c2VSZW5kZXJDb3VudGVyXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKGluZGV4X2V4cG9ydHMpO1xudmFyIFJlYWN0ID0gX190b0VTTShyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIHsgdXNlUmVmLCB1c2VFZmZlY3QsIGlzVmFsaWRFbGVtZW50IH0gPSBSZWFjdDtcbnZhciBfYTtcbnZhciBSZWFjdFNlY3JldEludGVybmFscyA9IChcbiAgLy9AdHMtaWdub3JlXG4gIChfYSA9IFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSkgIT0gbnVsbCA/IF9hIDogUmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRURcbik7XG52YXIgJGVtcHR5ID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIik7XG52YXIgX2EyO1xudmFyIGMgPSAoXG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgdHlwZW9mICgoX2EyID0gUmVhY3QuX19DT01QSUxFUl9SVU5USU1FKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmMpID09PSBcImZ1bmN0aW9uXCIgPyAoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgIFJlYWN0Ll9fQ09NUElMRVJfUlVOVElNRS5jXG4gICkgOiBmdW5jdGlvbiBjMihzaXplKSB7XG4gICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgICAgY29uc3QgJCA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBzaXplOyBpaSsrKSB7XG4gICAgICAgICRbaWldID0gJGVtcHR5O1xuICAgICAgfVxuICAgICAgJFskZW1wdHldID0gdHJ1ZTtcbiAgICAgIHJldHVybiAkO1xuICAgIH0sIFtdKTtcbiAgfVxuKTtcbnZhciBMYXp5R3VhcmREaXNwYXRjaGVyID0ge307XG5bXG4gIFwicmVhZENvbnRleHRcIixcbiAgXCJ1c2VDYWxsYmFja1wiLFxuICBcInVzZUNvbnRleHRcIixcbiAgXCJ1c2VFZmZlY3RcIixcbiAgXCJ1c2VJbXBlcmF0aXZlSGFuZGxlXCIsXG4gIFwidXNlSW5zZXJ0aW9uRWZmZWN0XCIsXG4gIFwidXNlTGF5b3V0RWZmZWN0XCIsXG4gIFwidXNlTWVtb1wiLFxuICBcInVzZVJlZHVjZXJcIixcbiAgXCJ1c2VSZWZcIixcbiAgXCJ1c2VTdGF0ZVwiLFxuICBcInVzZURlYnVnVmFsdWVcIixcbiAgXCJ1c2VEZWZlcnJlZFZhbHVlXCIsXG4gIFwidXNlVHJhbnNpdGlvblwiLFxuICBcInVzZU11dGFibGVTb3VyY2VcIixcbiAgXCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZVwiLFxuICBcInVzZUlkXCIsXG4gIFwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyXCIsXG4gIFwiZ2V0Q2FjaGVTaWduYWxcIixcbiAgXCJnZXRDYWNoZUZvclR5cGVcIixcbiAgXCJ1c2VDYWNoZVJlZnJlc2hcIlxuXS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gIExhenlHdWFyZERpc3BhdGNoZXJbbmFtZV0gPSAoKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFtSZWFjdF0gVW5leHBlY3RlZCBSZWFjdCBob29rIGNhbGwgKCR7bmFtZX0pIGZyb20gYSBSZWFjdCBjb21waWxlZCBmdW5jdGlvbi4gQ2hlY2sgdGhhdCBhbGwgaG9va3MgYXJlIGNhbGxlZCBkaXJlY3RseSBhbmQgbmFtZWQgYWNjb3JkaW5nIHRvIGNvbnZlbnRpb24gKCd1c2VbQS1aXScpIGBcbiAgICApO1xuICB9O1xufSk7XG52YXIgb3JpZ2luYWxEaXNwYXRjaGVyID0gbnVsbDtcbkxhenlHdWFyZERpc3BhdGNoZXJbXCJ1c2VNZW1vQ2FjaGVcIl0gPSAoY291bnQpID0+IHtcbiAgaWYgKG9yaWdpbmFsRGlzcGF0Y2hlciA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJSZWFjdCBDb21waWxlciBpbnRlcm5hbCBpbnZhcmlhbnQgdmlvbGF0aW9uOiB1bmV4cGVjdGVkIG51bGwgZGlzcGF0Y2hlclwiXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb3JpZ2luYWxEaXNwYXRjaGVyLnVzZU1lbW9DYWNoZShjb3VudCk7XG4gIH1cbn07XG5mdW5jdGlvbiBzZXRDdXJyZW50KG5ld0Rpc3BhdGNoZXIpIHtcbiAgUmVhY3RTZWNyZXRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbmV3RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIFJlYWN0U2VjcmV0SW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDtcbn1cbnZhciBndWFyZEZyYW1lcyA9IFtdO1xuZnVuY3Rpb24gJGRpc3BhdGNoZXJHdWFyZChraW5kKSB7XG4gIGNvbnN0IGN1cnIgPSBSZWFjdFNlY3JldEludGVybmFscy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQ7XG4gIGlmIChraW5kID09PSAwIC8qIFB1c2hHdWFyZENvbnRleHQgKi8pIHtcbiAgICBndWFyZEZyYW1lcy5wdXNoKGN1cnIpO1xuICAgIGlmIChndWFyZEZyYW1lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIG9yaWdpbmFsRGlzcGF0Y2hlciA9IGN1cnI7XG4gICAgfVxuICAgIGlmIChjdXJyID09PSBMYXp5R3VhcmREaXNwYXRjaGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbUmVhY3RdIFVuZXhwZWN0ZWQgY2FsbCB0byBjdXN0b20gaG9vayBvciBjb21wb25lbnQgZnJvbSBhIFJlYWN0IGNvbXBpbGVkIGZ1bmN0aW9uLiBDaGVjayB0aGF0ICgxKSBhbGwgaG9va3MgYXJlIGNhbGxlZCBkaXJlY3RseSBhbmQgbmFtZWQgYWNjb3JkaW5nIHRvIGNvbnZlbnRpb24gKCd1c2VbQS1aXScpIGFuZCAoMikgY29tcG9uZW50cyBhcmUgcmV0dXJuZWQgYXMgSlNYIGluc3RlYWQgb2YgYmVpbmcgZGlyZWN0bHkgaW52b2tlZC5gXG4gICAgICApO1xuICAgIH1cbiAgICBzZXRDdXJyZW50KExhenlHdWFyZERpc3BhdGNoZXIpO1xuICB9IGVsc2UgaWYgKGtpbmQgPT09IDEgLyogUG9wR3VhcmRDb250ZXh0ICovKSB7XG4gICAgY29uc3QgbGFzdEZyYW1lID0gZ3VhcmRGcmFtZXMucG9wKCk7XG4gICAgaWYgKGxhc3RGcmFtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiUmVhY3QgQ29tcGlsZXIgaW50ZXJuYWwgZXJyb3I6IHVuZXhwZWN0ZWQgbnVsbCBpbiBndWFyZCBzdGFja1wiXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZ3VhcmRGcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBvcmlnaW5hbERpc3BhdGNoZXIgPSBudWxsO1xuICAgIH1cbiAgICBzZXRDdXJyZW50KGxhc3RGcmFtZSk7XG4gIH0gZWxzZSBpZiAoa2luZCA9PT0gMiAvKiBQdXNoRXhwZWN0SG9vayAqLykge1xuICAgIGd1YXJkRnJhbWVzLnB1c2goY3Vycik7XG4gICAgc2V0Q3VycmVudChvcmlnaW5hbERpc3BhdGNoZXIpO1xuICB9IGVsc2UgaWYgKGtpbmQgPT09IDMgLyogUG9wRXhwZWN0SG9vayAqLykge1xuICAgIGNvbnN0IGxhc3RGcmFtZSA9IGd1YXJkRnJhbWVzLnBvcCgpO1xuICAgIGlmIChsYXN0RnJhbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlJlYWN0IENvbXBpbGVyIGludGVybmFsIGVycm9yOiB1bmV4cGVjdGVkIG51bGwgaW4gZ3VhcmQgc3RhY2tcIlxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0Q3VycmVudChsYXN0RnJhbWUpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlYWN0IENvbXBpbGVyIGludGVybmFsIGVycm9yOiB1bnJlYWNoYWJsZSBibG9ja1wiICsga2luZCk7XG4gIH1cbn1cbmZ1bmN0aW9uICRyZXNldCgkKSB7XG4gIGZvciAobGV0IGlpID0gMDsgaWkgPCAkLmxlbmd0aDsgaWkrKykge1xuICAgICRbaWldID0gJGVtcHR5O1xuICB9XG59XG5mdW5jdGlvbiAkbWFrZVJlYWRPbmx5KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJUT0RPOiBpbXBsZW1lbnQgJG1ha2VSZWFkT25seSBpbiByZWFjdC1jb21waWxlci1ydW50aW1lXCIpO1xufVxudmFyIHJlbmRlckNvdW50ZXJSZWdpc3RyeSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5mdW5jdGlvbiBjbGVhclJlbmRlckNvdW50ZXJSZWdpc3RyeSgpIHtcbiAgZm9yIChjb25zdCBjb3VudGVycyBvZiByZW5kZXJDb3VudGVyUmVnaXN0cnkudmFsdWVzKCkpIHtcbiAgICBjb3VudGVycy5mb3JFYWNoKChjb3VudGVyKSA9PiB7XG4gICAgICBjb3VudGVyLmNvdW50ID0gMDtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJSZW5kZXJDb3VudGVyKG5hbWUsIHZhbCkge1xuICBsZXQgY291bnRlcnMgPSByZW5kZXJDb3VudGVyUmVnaXN0cnkuZ2V0KG5hbWUpO1xuICBpZiAoY291bnRlcnMgPT0gbnVsbCkge1xuICAgIGNvdW50ZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICByZW5kZXJDb3VudGVyUmVnaXN0cnkuc2V0KG5hbWUsIGNvdW50ZXJzKTtcbiAgfVxuICBjb3VudGVycy5hZGQodmFsKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVJlbmRlckNvdW50ZXIobmFtZSwgdmFsKSB7XG4gIGNvbnN0IGNvdW50ZXJzID0gcmVuZGVyQ291bnRlclJlZ2lzdHJ5LmdldChuYW1lKTtcbiAgaWYgKGNvdW50ZXJzID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY291bnRlcnMuZGVsZXRlKHZhbCk7XG59XG5mdW5jdGlvbiB1c2VSZW5kZXJDb3VudGVyKG5hbWUpIHtcbiAgY29uc3QgdmFsID0gdXNlUmVmKG51bGwpO1xuICBpZiAodmFsLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgIHZhbC5jdXJyZW50LmNvdW50ICs9IDE7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFsLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgY29uc3QgY291bnRlciA9IHsgY291bnQ6IDAgfTtcbiAgICAgIHJlZ2lzdGVyUmVuZGVyQ291bnRlcihuYW1lLCBjb3VudGVyKTtcbiAgICAgIHZhbC5jdXJyZW50ID0gY291bnRlcjtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh2YWwuY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICByZW1vdmVSZW5kZXJDb3VudGVyKG5hbWUsIHZhbC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbnZhciBzZWVuRXJyb3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbmZ1bmN0aW9uICRzdHJ1Y3R1cmFsQ2hlY2sob2xkVmFsdWUsIG5ld1ZhbHVlLCB2YXJpYWJsZU5hbWUsIGZuTmFtZSwga2luZCwgbG9jKSB7XG4gIGZ1bmN0aW9uIGVycm9yKGwsIHIsIHBhdGgsIGRlcHRoKSB7XG4gICAgY29uc3Qgc3RyID0gYCR7Zm5OYW1lfToke2xvY30gWyR7a2luZH1dICR7dmFyaWFibGVOYW1lfSR7cGF0aH0gY2hhbmdlZCBmcm9tICR7bH0gdG8gJHtyfSBhdCBkZXB0aCAke2RlcHRofWA7XG4gICAgaWYgKHNlZW5FcnJvcnMuaGFzKHN0cikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VlbkVycm9ycy5hZGQoc3RyKTtcbiAgICBjb25zb2xlLmVycm9yKHN0cik7XG4gIH1cbiAgY29uc3QgZGVwdGhMaW1pdCA9IDI7XG4gIGZ1bmN0aW9uIHJlY3VyKG9sZFZhbHVlMiwgbmV3VmFsdWUyLCBwYXRoLCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA+IGRlcHRoTGltaXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKG9sZFZhbHVlMiA9PT0gbmV3VmFsdWUyKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2xkVmFsdWUyICE9PSB0eXBlb2YgbmV3VmFsdWUyKSB7XG4gICAgICBlcnJvcihgdHlwZSAke3R5cGVvZiBvbGRWYWx1ZTJ9YCwgYHR5cGUgJHt0eXBlb2YgbmV3VmFsdWUyfWAsIHBhdGgsIGRlcHRoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvbGRWYWx1ZTIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGNvbnN0IG9sZEFycmF5ID0gQXJyYXkuaXNBcnJheShvbGRWYWx1ZTIpO1xuICAgICAgY29uc3QgbmV3QXJyYXkgPSBBcnJheS5pc0FycmF5KG5ld1ZhbHVlMik7XG4gICAgICBpZiAob2xkVmFsdWUyID09PSBudWxsICYmIG5ld1ZhbHVlMiAhPT0gbnVsbCkge1xuICAgICAgICBlcnJvcihcIm51bGxcIiwgYHR5cGUgJHt0eXBlb2YgbmV3VmFsdWUyfWAsIHBhdGgsIGRlcHRoKTtcbiAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUyID09PSBudWxsKSB7XG4gICAgICAgIGVycm9yKGB0eXBlICR7dHlwZW9mIG9sZFZhbHVlMn1gLCBcIm51bGxcIiwgcGF0aCwgZGVwdGgpO1xuICAgICAgfSBlbHNlIGlmIChvbGRWYWx1ZTIgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgaWYgKCEobmV3VmFsdWUyIGluc3RhbmNlb2YgTWFwKSkge1xuICAgICAgICAgIGVycm9yKGBNYXAgaW5zdGFuY2VgLCBgb3RoZXIgdmFsdWVgLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAob2xkVmFsdWUyLnNpemUgIT09IG5ld1ZhbHVlMi5zaXplKSB7XG4gICAgICAgICAgZXJyb3IoXG4gICAgICAgICAgICBgTWFwIGluc3RhbmNlIHdpdGggc2l6ZSAke29sZFZhbHVlMi5zaXplfWAsXG4gICAgICAgICAgICBgTWFwIGluc3RhbmNlIHdpdGggc2l6ZSAke25ld1ZhbHVlMi5zaXplfWAsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIG9sZFZhbHVlMikge1xuICAgICAgICAgICAgaWYgKCFuZXdWYWx1ZTIuaGFzKGspKSB7XG4gICAgICAgICAgICAgIGVycm9yKFxuICAgICAgICAgICAgICAgIGBNYXAgaW5zdGFuY2Ugd2l0aCBrZXkgJHtrfWAsXG4gICAgICAgICAgICAgICAgYE1hcCBpbnN0YW5jZSB3aXRob3V0IGtleSAke2t9YCxcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIGRlcHRoXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWN1cih2LCBuZXdWYWx1ZTIuZ2V0KGspLCBgJHtwYXRofS5nZXQoJHtrfSlgLCBkZXB0aCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdWYWx1ZTIgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgZXJyb3IoXCJvdGhlciB2YWx1ZVwiLCBgTWFwIGluc3RhbmNlYCwgcGF0aCwgZGVwdGgpO1xuICAgICAgfSBlbHNlIGlmIChvbGRWYWx1ZTIgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgaWYgKCEobmV3VmFsdWUyIGluc3RhbmNlb2YgU2V0KSkge1xuICAgICAgICAgIGVycm9yKGBTZXQgaW5zdGFuY2VgLCBgb3RoZXIgdmFsdWVgLCBwYXRoLCBkZXB0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAob2xkVmFsdWUyLnNpemUgIT09IG5ld1ZhbHVlMi5zaXplKSB7XG4gICAgICAgICAgZXJyb3IoXG4gICAgICAgICAgICBgU2V0IGluc3RhbmNlIHdpdGggc2l6ZSAke29sZFZhbHVlMi5zaXplfWAsXG4gICAgICAgICAgICBgU2V0IGluc3RhbmNlIHdpdGggc2l6ZSAke25ld1ZhbHVlMi5zaXplfWAsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBuZXdWYWx1ZTIpIHtcbiAgICAgICAgICAgIGlmICghb2xkVmFsdWUyLmhhcyh2KSkge1xuICAgICAgICAgICAgICBlcnJvcihcbiAgICAgICAgICAgICAgICBgU2V0IGluc3RhbmNlIHdpdGhvdXQgZWxlbWVudCAke3Z9YCxcbiAgICAgICAgICAgICAgICBgU2V0IGluc3RhbmNlIHdpdGggZWxlbWVudCAke3Z9YCxcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIGRlcHRoXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld1ZhbHVlMiBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICBlcnJvcihcIm90aGVyIHZhbHVlXCIsIGBTZXQgaW5zdGFuY2VgLCBwYXRoLCBkZXB0aCk7XG4gICAgICB9IGVsc2UgaWYgKG9sZEFycmF5IHx8IG5ld0FycmF5KSB7XG4gICAgICAgIGlmIChvbGRBcnJheSAhPT0gbmV3QXJyYXkpIHtcbiAgICAgICAgICBlcnJvcihcbiAgICAgICAgICAgIGB0eXBlICR7b2xkQXJyYXkgPyBcImFycmF5XCIgOiBcIm9iamVjdFwifWAsXG4gICAgICAgICAgICBgdHlwZSAke25ld0FycmF5ID8gXCJhcnJheVwiIDogXCJvYmplY3RcIn1gLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGRlcHRoXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChvbGRWYWx1ZTIubGVuZ3RoICE9PSBuZXdWYWx1ZTIubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3IoXG4gICAgICAgICAgICBgYXJyYXkgd2l0aCBsZW5ndGggJHtvbGRWYWx1ZTIubGVuZ3RofWAsXG4gICAgICAgICAgICBgYXJyYXkgd2l0aCBsZW5ndGggJHtuZXdWYWx1ZTIubGVuZ3RofWAsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBvbGRWYWx1ZTIubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgICAgICByZWN1cihvbGRWYWx1ZTJbaWldLCBuZXdWYWx1ZTJbaWldLCBgJHtwYXRofVske2lpfV1gLCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChvbGRWYWx1ZTIpIHx8IGlzVmFsaWRFbGVtZW50KG5ld1ZhbHVlMikpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KG9sZFZhbHVlMikgIT09IGlzVmFsaWRFbGVtZW50KG5ld1ZhbHVlMikpIHtcbiAgICAgICAgICBlcnJvcihcbiAgICAgICAgICAgIGB0eXBlICR7aXNWYWxpZEVsZW1lbnQob2xkVmFsdWUyKSA/IFwiUmVhY3QgZWxlbWVudFwiIDogXCJvYmplY3RcIn1gLFxuICAgICAgICAgICAgYHR5cGUgJHtpc1ZhbGlkRWxlbWVudChuZXdWYWx1ZTIpID8gXCJSZWFjdCBlbGVtZW50XCIgOiBcIm9iamVjdFwifWAsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG9sZFZhbHVlMi50eXBlICE9PSBuZXdWYWx1ZTIudHlwZSkge1xuICAgICAgICAgIGVycm9yKFxuICAgICAgICAgICAgYFJlYWN0IGVsZW1lbnQgb2YgdHlwZSAke29sZFZhbHVlMi50eXBlfWAsXG4gICAgICAgICAgICBgUmVhY3QgZWxlbWVudCBvZiB0eXBlICR7bmV3VmFsdWUyLnR5cGV9YCxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBkZXB0aFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjdXIoXG4gICAgICAgICAgICBvbGRWYWx1ZTIucHJvcHMsXG4gICAgICAgICAgICBuZXdWYWx1ZTIucHJvcHMsXG4gICAgICAgICAgICBgW3Byb3BzIG9mICR7cGF0aH1dYCxcbiAgICAgICAgICAgIGRlcHRoICsgMVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1ZhbHVlMikge1xuICAgICAgICAgIGlmICghKGtleSBpbiBvbGRWYWx1ZTIpKSB7XG4gICAgICAgICAgICBlcnJvcihcbiAgICAgICAgICAgICAgYG9iamVjdCB3aXRob3V0IGtleSAke2tleX1gLFxuICAgICAgICAgICAgICBgb2JqZWN0IHdpdGgga2V5ICR7a2V5fWAsXG4gICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgIGRlcHRoXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvbGRWYWx1ZTIpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbmV3VmFsdWUyKSkge1xuICAgICAgICAgICAgZXJyb3IoXG4gICAgICAgICAgICAgIGBvYmplY3Qgd2l0aCBrZXkgJHtrZXl9YCxcbiAgICAgICAgICAgICAgYG9iamVjdCB3aXRob3V0IGtleSAke2tleX1gLFxuICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICBkZXB0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjdXIob2xkVmFsdWUyW2tleV0sIG5ld1ZhbHVlMltrZXldLCBgJHtwYXRofS4ke2tleX1gLCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9sZFZhbHVlMiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChpc05hTihvbGRWYWx1ZTIpIHx8IGlzTmFOKG5ld1ZhbHVlMikpIHtcbiAgICAgIGlmIChpc05hTihvbGRWYWx1ZTIpICE9PSBpc05hTihuZXdWYWx1ZTIpKSB7XG4gICAgICAgIGVycm9yKFxuICAgICAgICAgIGAke2lzTmFOKG9sZFZhbHVlMikgPyBcIk5hTlwiIDogXCJub24tTmFOIHZhbHVlXCJ9YCxcbiAgICAgICAgICBgJHtpc05hTihuZXdWYWx1ZTIpID8gXCJOYU5cIiA6IFwibm9uLU5hTiB2YWx1ZVwifWAsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBkZXB0aFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVmFsdWUyICE9PSBuZXdWYWx1ZTIpIHtcbiAgICAgIGVycm9yKG9sZFZhbHVlMiwgbmV3VmFsdWUyLCBwYXRoLCBkZXB0aCk7XG4gICAgfVxuICB9XG4gIHJlY3VyKG9sZFZhbHVlLCBuZXdWYWx1ZSwgXCJcIiwgMCk7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgJGRpc3BhdGNoZXJHdWFyZCxcbiAgJG1ha2VSZWFkT25seSxcbiAgJHJlc2V0LFxuICAkc3RydWN0dXJhbENoZWNrLFxuICBjLFxuICBjbGVhclJlbmRlckNvdW50ZXJSZWdpc3RyeSxcbiAgcmVuZGVyQ291bnRlclJlZ2lzdHJ5LFxuICB1c2VSZW5kZXJDb3VudGVyXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/block-tools/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@portabletext/block-tools/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockContentFeatures: () => (/* binding */ getBlockContentFeatures),\n/* harmony export */   htmlToBlocks: () => (/* binding */ htmlToBlocks),\n/* harmony export */   normalizeBlock: () => (/* binding */ normalizeBlock),\n/* harmony export */   randomKey: () => (/* binding */ randomKey)\n/* harmony export */ });\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n\n\n\n\n\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\";\n}\nconst objectToString = Object.prototype.toString;\nfunction resolveJsType(val) {\n  switch (objectToString.call(val)) {\n    case \"[object Function]\":\n      return \"function\";\n    case \"[object Date]\":\n      return \"date\";\n    case \"[object RegExp]\":\n      return \"regexp\";\n    case \"[object Arguments]\":\n      return \"arguments\";\n    case \"[object Array]\":\n      return \"array\";\n    case \"[object String]\":\n      return \"string\";\n  }\n  return val === null ? \"null\" : val === void 0 ? \"undefined\" : val && typeof val == \"object\" && \"nodeType\" in val && val.nodeType === 1 ? \"element\" : val === Object(val) ? \"object\" : typeof val;\n}\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 };\nnew Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nconst PRESERVE_WHITESPACE_TAGS = [\"pre\", \"textarea\", \"code\"], BLOCK_DEFAULT_STYLE = \"normal\", DEFAULT_BLOCK = Object.freeze({\n  _type: \"block\",\n  markDefs: [],\n  style: BLOCK_DEFAULT_STYLE\n}), DEFAULT_SPAN = Object.freeze({\n  _type: \"span\",\n  marks: []\n}), HTML_BLOCK_TAGS = {\n  p: DEFAULT_BLOCK,\n  blockquote: { ...DEFAULT_BLOCK, style: \"blockquote\" }\n}, HTML_SPAN_TAGS = {\n  span: { object: \"text\" }\n}, HTML_LIST_CONTAINER_TAGS = {\n  ol: { object: null },\n  ul: { object: null }\n}, HTML_HEADER_TAGS = {\n  h1: { ...DEFAULT_BLOCK, style: \"h1\" },\n  h2: { ...DEFAULT_BLOCK, style: \"h2\" },\n  h3: { ...DEFAULT_BLOCK, style: \"h3\" },\n  h4: { ...DEFAULT_BLOCK, style: \"h4\" },\n  h5: { ...DEFAULT_BLOCK, style: \"h5\" },\n  h6: { ...DEFAULT_BLOCK, style: \"h6\" }\n}, HTML_MISC_TAGS = {\n  br: { ...DEFAULT_BLOCK, style: BLOCK_DEFAULT_STYLE }\n}, HTML_DECORATOR_TAGS = {\n  b: \"strong\",\n  strong: \"strong\",\n  i: \"em\",\n  em: \"em\",\n  u: \"underline\",\n  s: \"strike-through\",\n  strike: \"strike-through\",\n  del: \"strike-through\",\n  code: \"code\",\n  sup: \"sup\",\n  sub: \"sub\",\n  ins: \"ins\",\n  mark: \"mark\",\n  small: \"small\"\n}, HTML_LIST_ITEM_TAGS = {\n  li: {\n    ...DEFAULT_BLOCK,\n    style: BLOCK_DEFAULT_STYLE,\n    level: 1,\n    listItem: \"bullet\"\n  }\n}, ELEMENT_MAP = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_SPAN_TAGS,\n  ...HTML_LIST_CONTAINER_TAGS,\n  ...HTML_LIST_ITEM_TAGS,\n  ...HTML_HEADER_TAGS,\n  ...HTML_MISC_TAGS\n};\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(ELEMENT_MAP).filter((tag) => \"style\" in tag).map((tag) => tag.style)\n);\nlodash_uniq_js__WEBPACK_IMPORTED_MODULE_2__(\n  Object.values(HTML_DECORATOR_TAGS)\n);\nfunction blockContentFeatures(blockContentType) {\n  if (!blockContentType)\n    throw new Error(\"Parameter 'blockContentType' required\");\n  const blockType = blockContentType.of.find(findBlockType);\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockSchemaType)(blockType))\n    throw new Error(\"'block' type is not defined in this schema (required).\");\n  const ofType = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockChildrenObjectField)?.type?.of;\n  if (!ofType)\n    throw new Error(\"No `of` declaration found for blocks `children` field\");\n  const spanType = ofType.find(\n    (member) => member.name === \"span\"\n  );\n  if (!spanType)\n    throw new Error(\n      \"No `span` type found in `block` schema type `children` definition\"\n    );\n  const inlineObjectTypes = ofType.filter(\n    (inlineType) => inlineType.name !== \"span\" && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(inlineType)\n  ), blockObjectTypes = blockContentType.of.filter(\n    (memberType) => memberType.name !== blockType.name && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isObjectSchemaType)(memberType)\n  );\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    annotations: resolveEnabledAnnotationTypes(spanType),\n    lists: resolveEnabledListItems(blockType),\n    types: {\n      block: blockContentType,\n      span: spanType,\n      inlineObjects: inlineObjectTypes,\n      blockObjects: blockObjectTypes\n    }\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockStyleObjectField);\n  if (!styleField)\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\"\n    );\n  const textStyles = getTitledListValuesFromEnumListOptions(\n    styleField.type.options\n  );\n  if (textStyles.length === 0)\n    throw new Error(\n      \"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    );\n  return textStyles;\n}\nfunction resolveEnabledAnnotationTypes(spanType) {\n  return spanType.annotations.map((annotation) => ({\n    title: annotation.title,\n    type: annotation,\n    value: annotation.name,\n    icon: annotation.icon\n  }));\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields.find(_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isBlockListObjectField);\n  if (!listField)\n    throw new Error(\n      \"A field with name 'list' is not defined in the block type (required).\"\n    );\n  const listItems = getTitledListValuesFromEnumListOptions(\n    listField.type.options\n  );\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction getTitledListValuesFromEnumListOptions(options) {\n  const list = options ? options.list : void 0;\n  return Array.isArray(list) ? list.map(\n    (item) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isTitledListValue)(item) ? item : { title: item, value: item }\n  ) : [];\n}\nconst _XPathResult = {\n  BOOLEAN_TYPE: 3,\n  ORDERED_NODE_ITERATOR_TYPE: 5,\n  UNORDERED_NODE_SNAPSHOT_TYPE: 6\n};\nvar preprocessGDocs = (_html, doc, options) => {\n  const whitespaceOnPasteMode = options?.unstable_whitespaceOnPasteMode || \"preserve\";\n  let gDocsRootOrSiblingNode = doc.evaluate(\n    '//*[@id and contains(@id, \"docs-internal-guid\")]',\n    doc,\n    null,\n    _XPathResult.ORDERED_NODE_ITERATOR_TYPE,\n    null\n  ).iterateNext();\n  if (gDocsRootOrSiblingNode) {\n    const isWrappedRootTag = tagName(gDocsRootOrSiblingNode) === \"b\";\n    switch (isWrappedRootTag || (gDocsRootOrSiblingNode = doc.body), whitespaceOnPasteMode) {\n      case \"normalize\":\n        normalizeWhitespace(gDocsRootOrSiblingNode);\n        break;\n      case \"remove\":\n        removeAllWhitespace(gDocsRootOrSiblingNode);\n        break;\n    }\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--) {\n      const elm = childNodes.snapshotItem(i);\n      elm?.setAttribute(\"data-is-google-docs\", \"true\"), (elm?.parentElement === gDocsRootOrSiblingNode || !isWrappedRootTag && elm.parentElement === doc.body) && (elm?.setAttribute(\"data-is-root-node\", \"true\"), tagName(elm)), tagName(elm) === \"li\" && elm.firstChild && tagName(elm?.firstChild) === \"img\" && elm.removeChild(elm.firstChild);\n    }\n    return isWrappedRootTag && doc.body.firstElementChild?.replaceWith(\n      ...Array.from(gDocsRootOrSiblingNode.childNodes)\n    ), doc;\n  }\n  return doc;\n};\nconst unwantedWordDocumentPaths = [\n  \"/html/text()\",\n  \"/html/head/text()\",\n  \"/html/body/text()\",\n  \"/html/body/ul/text()\",\n  \"/html/body/ol/text()\",\n  \"//comment()\",\n  \"//style\",\n  \"//xml\",\n  \"//script\",\n  \"//meta\",\n  \"//link\"\n];\nvar preprocessHTML = (_html, doc) => {\n  const bodyTextNodes = doc.evaluate(\n    \"/html/body/text()\",\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = bodyTextNodes.snapshotLength - 1; i >= 0; i--) {\n    const node = bodyTextNodes.snapshotItem(i), text = node.textContent || \"\";\n    if (text.replace(/[^\\S\\n]+$/g, \"\")) {\n      const newNode = doc.createElement(\"span\");\n      newNode.appendChild(doc.createTextNode(text)), node.parentNode?.replaceChild(newNode, node);\n    } else\n      node.parentNode?.removeChild(node);\n  }\n  const unwantedNodes = doc.evaluate(\n    unwantedWordDocumentPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted && unwanted.parentNode?.removeChild(unwanted);\n  }\n  return doc;\n}, preprocessNotion = (html, doc) => {\n  const NOTION_REGEX = /<!-- notionvc:.*?-->/g;\n  if (html.match(NOTION_REGEX)) {\n    const childNodes = doc.evaluate(\n      \"//*\",\n      doc,\n      null,\n      _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n      null\n    );\n    for (let i = childNodes.snapshotLength - 1; i >= 0; i--)\n      childNodes.snapshotItem(i)?.setAttribute(\"data-is-notion\", \"true\");\n    return doc;\n  }\n  return doc;\n}, preprocessWhitespace = (_2, doc) => {\n  function processNode(node) {\n    if (node.nodeType === _XPathResult.BOOLEAN_TYPE && !PRESERVE_WHITESPACE_TAGS.includes(\n      node.parentElement?.tagName.toLowerCase() || \"\"\n    ))\n      node.textContent = node.textContent?.replace(/\\s\\s+/g, \" \").replace(/[\\r\\n]+/g, \" \") || \"\";\n    else\n      for (let i = 0; i < node.childNodes.length; i++)\n        processNode(node.childNodes[i]);\n  }\n  return processNode(doc.body), doc;\n};\nconst WORD_HTML_REGEX = /(class=\"?Mso|style=(?:\"|')[^\"]*?\\bmso-|w:WordDocument|<o:\\w+>|<\\/font>)/, unwantedPaths = [\n  \"//o:p\",\n  \"//span[@style='mso-list:Ignore']\",\n  \"//span[@style='mso-list: Ignore']\"\n], mappedPaths = [\n  \"//p[@class='MsoTocHeading']\",\n  \"//p[@class='MsoTitle']\",\n  \"//p[@class='MsoToaHeading']\",\n  \"//p[@class='MsoSubtitle']\",\n  \"//span[@class='MsoSubtleEmphasis']\",\n  \"//span[@class='MsoIntenseEmphasis']\"\n], elementMap = {\n  MsoTocHeading: [\"h3\"],\n  MsoTitle: [\"h1\"],\n  MsoToaHeading: [\"h2\"],\n  MsoSubtitle: [\"h5\"],\n  MsoSubtleEmphasis: [\"span\", \"em\"],\n  MsoIntenseEmphasis: [\"span\", \"em\", \"strong\"]\n  // Remove cruft\n};\nfunction isWordHtml(html) {\n  return WORD_HTML_REGEX.test(html);\n}\nvar preprocessWord = (html, doc) => {\n  if (!isWordHtml(html))\n    return doc;\n  const unwantedNodes = doc.evaluate(\n    unwantedPaths.join(\"|\"),\n    doc,\n    (prefix) => prefix === \"o\" ? \"urn:schemas-microsoft-com:office:office\" : null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = unwantedNodes.snapshotLength - 1; i >= 0; i--) {\n    const unwanted = unwantedNodes.snapshotItem(i);\n    unwanted?.parentNode && unwanted.parentNode.removeChild(unwanted);\n  }\n  const mappedElements = doc.evaluate(\n    mappedPaths.join(\"|\"),\n    doc,\n    null,\n    _XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n  for (let i = mappedElements.snapshotLength - 1; i >= 0; i--) {\n    const mappedElm = mappedElements.snapshotItem(i), tags = elementMap[mappedElm.className], text = doc.createTextNode(mappedElm.textContent || \"\");\n    if (!tags)\n      continue;\n    const parentElement = doc.createElement(tags[0]);\n    let parent = parentElement, child = parentElement;\n    tags.slice(1).forEach((tag) => {\n      child = doc.createElement(tag), parent.appendChild(child), parent = child;\n    }), child.appendChild(text), mappedElm?.parentNode?.replaceChild(parentElement, mappedElm);\n  }\n  return doc;\n}, preprocessors = [\n  preprocessWhitespace,\n  preprocessNotion,\n  preprocessWord,\n  preprocessGDocs,\n  preprocessHTML\n];\nfunction createRuleOptions(blockContentType) {\n  const features = blockContentFeatures(blockContentType), enabledBlockStyles = features.styles.map(\n    (item) => item.value || item.title\n  ), enabledSpanDecorators = features.decorators.map(\n    (item) => item.value || item.title\n  ), enabledBlockAnnotations = features.annotations.map(\n    (item) => item.value || item.title || \"\"\n  ), enabledListTypes = features.lists.map(\n    (item) => item.value || item.title || \"\"\n  );\n  return {\n    enabledBlockStyles,\n    enabledSpanDecorators,\n    enabledBlockAnnotations,\n    enabledListTypes\n  };\n}\nfunction tagName(el) {\n  if (el && \"tagName\" in el)\n    return el.tagName.toLowerCase();\n}\nfunction preprocess(html, parseHtml, options) {\n  const cleanHTML = O(html), doc = parseHtml(normalizeHtmlBeforePreprocess(cleanHTML));\n  return preprocessors.forEach((processor) => {\n    processor(cleanHTML, doc, options);\n  }), doc;\n}\nfunction normalizeHtmlBeforePreprocess(html) {\n  return html.trim();\n}\nfunction defaultParseHtml() {\n  if (resolveJsType(DOMParser) === \"undefined\")\n    throw new Error(\n      \"The native `DOMParser` global which the `Html` deserializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.\"\n    );\n  return (html) => new DOMParser().parseFromString(html, \"text/html\");\n}\nfunction flattenNestedBlocks(blocks2) {\n  let depth = 0;\n  const flattened = [], traverse = (nodes) => {\n    const toRemove = [];\n    nodes.forEach((node) => {\n      depth === 0 && flattened.push(node), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(node) && (depth > 0 && (toRemove.push(node), flattened.push(node)), depth++, traverse(node.children)), node._type === \"__block\" && (toRemove.push(node), flattened.push(node.block));\n    }), toRemove.forEach((node) => {\n      nodes.splice(nodes.indexOf(node), 1);\n    }), depth--;\n  };\n  return traverse(blocks2), flattened;\n}\nfunction nextSpan(block, index) {\n  const next = block.children[index + 1];\n  return next && next._type === \"span\" ? next : null;\n}\nfunction prevSpan(block, index) {\n  const prev = block.children[index - 1];\n  return prev && prev._type === \"span\" ? prev : null;\n}\nfunction isWhiteSpaceChar(text) {\n  return [\"\\xA0\", \" \"].includes(text);\n}\nfunction trimWhitespace(blocks2) {\n  return blocks2.forEach((block) => {\n    (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(block) && block.children.forEach((child, index) => {\n      if (!isMinimalSpan(child))\n        return;\n      const nextChild = nextSpan(block, index), prevChild = prevSpan(block, index);\n      index === 0 && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), index === block.children.length - 1 && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(Math.max(0, child.text.length - 1))) && nextChild && isMinimalSpan(nextChild) && /\\s/.test(nextChild.text.slice(0, 1)) && (child.text = child.text.replace(/[^\\S\\n]+$/g, \"\")), /\\s/.test(child.text.slice(0, 1)) && prevChild && isMinimalSpan(prevChild) && /\\s/.test(prevChild.text.slice(Math.max(0, prevChild.text.length - 1))) && (child.text = child.text.replace(/^[^\\S\\n]+/g, \"\")), child.text || block.children.splice(index, 1), prevChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(prevChild.marks, child.marks) && isWhiteSpaceChar(child.text) ? (prevChild.text += \" \", block.children.splice(index, 1)) : nextChild && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(nextChild.marks, child.marks) && isWhiteSpaceChar(child.text) && (nextChild.text = ` ${nextChild.text}`, block.children.splice(index, 1));\n    });\n  }), blocks2;\n}\nfunction ensureRootIsBlocks(blocks2) {\n  return blocks2.reduce((memo, node, i, original) => {\n    if (node._type === \"block\")\n      return memo.push(node), memo;\n    if (node._type === \"__block\")\n      return memo.push(node.block), memo;\n    const lastBlock = memo[memo.length - 1];\n    if (i > 0 && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(original[i - 1]) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextTextBlock)(lastBlock))\n      return lastBlock.children.push(node), memo;\n    const block = {\n      ...DEFAULT_BLOCK,\n      children: [node]\n    };\n    return memo.push(block), memo;\n  }, []);\n}\nfunction isNodeList(node) {\n  return Object.prototype.toString.call(node) === \"[object NodeList]\";\n}\nfunction isMinimalSpan(node) {\n  return node._type === \"span\";\n}\nfunction isMinimalBlock(node) {\n  return node._type === \"block\";\n}\nfunction isPlaceholderDecorator(node) {\n  return node._type === \"__decorator\";\n}\nfunction isPlaceholderAnnotation(node) {\n  return node._type === \"__annotation\";\n}\nfunction isElement(node) {\n  return node.nodeType === 1;\n}\nfunction normalizeWhitespace(rootNode) {\n  let emptyBlockCount = 0, lastParent = null;\n  const nodesToRemove = [];\n  for (let child = rootNode.firstChild; child; child = child.nextSibling) {\n    if (!isElement(child)) {\n      normalizeWhitespace(child), emptyBlockCount = 0;\n      continue;\n    }\n    const elm = child;\n    isWhitespaceBlock(elm) ? (lastParent && elm.parentElement === lastParent ? (emptyBlockCount++, emptyBlockCount > 1 && nodesToRemove.push(elm)) : emptyBlockCount = 1, lastParent = elm.parentElement) : (normalizeWhitespace(child), emptyBlockCount = 0);\n  }\n  nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction removeAllWhitespace(rootNode) {\n  const nodesToRemove = [];\n  function collectNodesToRemove(currentNode) {\n    if (isElement(currentNode)) {\n      const elm = currentNode;\n      if (tagName(elm) === \"br\" && (tagName(elm.nextElementSibling) === \"p\" || tagName(elm.previousElementSibling) === \"p\")) {\n        nodesToRemove.push(elm);\n        return;\n      }\n      if ((tagName(elm) === \"p\" || tagName(elm) === \"br\") && elm?.firstChild?.textContent?.trim() === \"\") {\n        nodesToRemove.push(elm);\n        return;\n      }\n      for (let child = elm.firstChild; child; child = child.nextSibling)\n        collectNodesToRemove(child);\n    }\n  }\n  collectNodesToRemove(rootNode), nodesToRemove.forEach((node) => node.parentElement?.removeChild(node));\n}\nfunction isWhitespaceBlock(elm) {\n  return [\"p\", \"br\"].includes(tagName(elm) || \"\") && !elm.textContent?.trim();\n}\nconst LIST_CONTAINER_TAGS = Object.keys(HTML_LIST_CONTAINER_TAGS);\nfunction isEmphasis$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style\\s*:\\s*italic/.test(style || \"\");\n}\nfunction isStrong$1(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight\\s*:\\s*700/.test(style || \"\");\n}\nfunction isUnderline$1(el) {\n  if (!isElement(el) || tagName(el.parentNode) === \"a\")\n    return !1;\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*underline/.test(style || \"\");\n}\nfunction isStrikethrough(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration\\s*:\\s*(?:.*line-through.*;)/.test(style || \"\");\n}\nfunction isGoogleDocs(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-google-docs\");\n}\nfunction isRootNode(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-root-node\");\n}\nfunction getListItemStyle$1(el) {\n  const parentTag = tagName(el.parentNode);\n  if (!(parentTag && !LIST_CONTAINER_TAGS.includes(parentTag)))\n    return tagName(el.parentNode) === \"ul\" ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel$1(el) {\n  let level = 0;\n  if (tagName(el) === \"li\") {\n    let parentNode = el.parentNode;\n    for (; parentNode; ) {\n      const parentTag = tagName(parentNode);\n      parentTag && LIST_CONTAINER_TAGS.includes(parentTag) && level++, parentNode = parentNode.parentNode;\n    }\n  } else\n    level = 1;\n  return level;\n}\nconst blocks = {\n  ...HTML_BLOCK_TAGS,\n  ...HTML_HEADER_TAGS\n};\nfunction getBlockStyle(el, enabledBlockStyles) {\n  const childTag = tagName(el.firstChild), block = childTag && blocks[childTag];\n  return block && enabledBlockStyles.includes(block.style) ? block.style : BLOCK_DEFAULT_STYLE;\n}\nfunction createGDocsRules(_blockContentType, options) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isGoogleDocs(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong$1(el) && span.marks.push(\"strong\"), isUnderline$1(el) && span.marks.push(\"underline\"), isStrikethrough(el) && span.marks.push(\"strike-through\"), isEmphasis$1(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    },\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"li\" && isGoogleDocs(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle$1(el),\n            level: getListItemLevel$1(el),\n            style: getBlockStyle(el, options.enabledBlockStyles),\n            children: next(el.firstChild?.childNodes || [])\n          };\n      }\n    },\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el.classList.contains(\"apple-interchange-newline\"))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && el?.parentNode?.textContent === \"\")\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n        if (tagName(el) === \"br\" && isGoogleDocs(el) && isElement(el) && isRootNode(el))\n          return {\n            ...DEFAULT_SPAN,\n            text: \"\"\n          };\n      }\n    }\n  ];\n}\nfunction keyGenerator() {\n  return randomKey(12);\n}\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(rnds8), rnds8;\n}\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i)\n  byteToHex[i] = (i + 256).toString(16).slice(1);\nfunction randomKey(length) {\n  return whatwgRNG(length).reduce((str, n) => str + byteToHex[n], \"\").slice(0, length);\n}\nconst whitespaceTextNodeRule = {\n  deserialize(node) {\n    return node.nodeName === \"#text\" && isWhitespaceTextNode(node) ? {\n      ...DEFAULT_SPAN,\n      marks: [],\n      text: (node.textContent ?? \"\").replace(/\\s\\s+/g, \" \")\n    } : void 0;\n  }\n};\nfunction isWhitespaceTextNode(node) {\n  return (node.nodeType === 3 && (node.textContent || \"\").replace(/[\\r\\n]/g, \" \").replace(/\\s\\s+/g, \" \") === \" \" && node.nextSibling && node.nextSibling.nodeType !== 3 && node.previousSibling && node.previousSibling.nodeType !== 3 || node.textContent !== \" \") && tagName(node.parentNode) !== \"body\";\n}\nfunction resolveListItem(listNodeTagName, enabledListTypes) {\n  if (listNodeTagName === \"ul\" && enabledListTypes.includes(\"bullet\"))\n    return \"bullet\";\n  if (listNodeTagName === \"ol\" && enabledListTypes.includes(\"number\"))\n    return \"number\";\n}\nfunction createHTMLRules(_blockContentType, options) {\n  return [\n    whitespaceTextNodeRule,\n    {\n      // Pre element\n      deserialize(el) {\n        if (tagName(el) !== \"pre\")\n          return;\n        const isCodeEnabled = options.enabledBlockStyles.includes(\"code\");\n        return {\n          _type: \"block\",\n          style: \"normal\",\n          markDefs: [],\n          children: [\n            {\n              ...DEFAULT_SPAN,\n              marks: isCodeEnabled ? [\"code\"] : [],\n              text: el.textContent || \"\"\n            }\n          ]\n        };\n      }\n    },\n    // Blockquote element\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"blockquote\")\n          return;\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        };\n        delete blocks2.blockquote;\n        const nonBlockquoteBlocks = Object.keys(blocks2), children = [];\n        return el.childNodes.forEach((node, index) => {\n          if (el.ownerDocument)\n            if (node.nodeType === 1 && nonBlockquoteBlocks.includes(\n              node.localName.toLowerCase()\n            )) {\n              const span = el.ownerDocument.createElement(\"span\"), previousChild = children[children.length - 1];\n              previousChild && previousChild.nodeType === 3 && previousChild.textContent?.trim() && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), node.childNodes.forEach((cn) => {\n                span.appendChild(cn.cloneNode(!0));\n              }), index !== el.childNodes.length && span.appendChild(el.ownerDocument.createTextNode(\"\\r\")), children.push(span);\n            } else\n              children.push(node);\n        }), {\n          _type: \"block\",\n          style: \"blockquote\",\n          markDefs: [],\n          children: next(children)\n        };\n      }\n    },\n    // Block elements\n    {\n      deserialize(el, next) {\n        const blocks2 = {\n          ...HTML_BLOCK_TAGS,\n          ...HTML_HEADER_TAGS\n        }, tag = tagName(el);\n        let block = tag ? blocks2[tag] : void 0;\n        if (block)\n          return el.parentNode && tagName(el.parentNode) === \"li\" ? next(el.childNodes) : (options.enabledBlockStyles.includes(block.style) || (block = DEFAULT_BLOCK), {\n            ...block,\n            children: next(el.childNodes)\n          });\n      }\n    },\n    // Ignore span tags\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_SPAN_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Ignore div tags\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"div\")\n          return next(el.childNodes);\n      }\n    },\n    // Ignore list containers\n    {\n      deserialize(el, next) {\n        const tag = tagName(el);\n        if (!(!tag || !(tag in HTML_LIST_CONTAINER_TAGS)))\n          return next(el.childNodes);\n      }\n    },\n    // Deal with br's\n    {\n      deserialize(el) {\n        if (tagName(el) === \"br\")\n          return {\n            ...DEFAULT_SPAN,\n            text: `\n`\n          };\n      }\n    },\n    // Deal with list items\n    {\n      deserialize(el, next, block) {\n        const tag = tagName(el), listItem = tag ? HTML_LIST_ITEM_TAGS[tag] : void 0, parentTag = tagName(el.parentNode) || \"\";\n        if (!listItem || !el.parentNode || !HTML_LIST_CONTAINER_TAGS[parentTag])\n          return;\n        const enabledListItem = resolveListItem(\n          parentTag,\n          options.enabledListTypes\n        );\n        return enabledListItem ? (listItem.listItem = enabledListItem, {\n          ...listItem,\n          children: next(el.childNodes)\n        }) : block({ _type: \"block\", children: next(el.childNodes) });\n      }\n    },\n    // Deal with decorators - this is a limited set of known html elements that we know how to deserialize\n    {\n      deserialize(el, next) {\n        const decorator = HTML_DECORATOR_TAGS[tagName(el) || \"\"];\n        if (!(!decorator || !options.enabledSpanDecorators.includes(decorator)))\n          return {\n            _type: \"__decorator\",\n            name: decorator,\n            children: next(el.childNodes)\n          };\n      }\n    },\n    // Special case for hyperlinks, add annotation (if allowed by schema),\n    // If not supported just write out the link text and href in plain text.\n    {\n      deserialize(el, next) {\n        if (tagName(el) !== \"a\")\n          return;\n        const linkEnabled = options.enabledBlockAnnotations.includes(\"link\"), href = isElement(el) && el.getAttribute(\"href\");\n        if (!href)\n          return next(el.childNodes);\n        let markDef;\n        return linkEnabled ? (markDef = {\n          _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n          _type: \"link\",\n          href\n        }, {\n          _type: \"__annotation\",\n          markDef,\n          children: next(el.childNodes)\n        }) : el.appendChild(el.ownerDocument.createTextNode(` (${href})`)) && next(el.childNodes);\n      }\n    }\n  ];\n}\nfunction isEmphasis(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-style:italic/.test(style || \"\");\n}\nfunction isStrong(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /font-weight:700/.test(style || \"\") || /font-weight:600/.test(style || \"\");\n}\nfunction isUnderline(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  return /text-decoration:underline/.test(style || \"\");\n}\nfunction isNotion(el) {\n  return isElement(el) && !!el.getAttribute(\"data-is-notion\");\n}\nfunction createNotionRules(_blockContentType) {\n  return [\n    {\n      deserialize(el) {\n        if (isElement(el) && tagName(el) === \"span\" && isNotion(el)) {\n          const span = {\n            ...DEFAULT_SPAN,\n            marks: [],\n            text: el.textContent\n          };\n          return isStrong(el) && span.marks.push(\"strong\"), isUnderline(el) && span.marks.push(\"underline\"), isEmphasis(el) && span.marks.push(\"em\"), span;\n        }\n      }\n    }\n  ];\n}\nfunction getListItemStyle(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (style && style.match(/lfo\\d+/))\n    return style.match(\"lfo1\") ? \"bullet\" : \"number\";\n}\nfunction getListItemLevel(el) {\n  const style = isElement(el) && el.getAttribute(\"style\");\n  if (!style)\n    return;\n  const levelMatch = style.match(/level\\d+/);\n  if (!levelMatch)\n    return;\n  const [level] = levelMatch[0].match(/\\d/) || [];\n  return (level ? Number.parseInt(level, 10) : 1) || 1;\n}\nfunction isWordListElement(el) {\n  return isElement(el) && el.className ? el.className === \"MsoListParagraphCxSpFirst\" || el.className === \"MsoListParagraphCxSpMiddle\" || el.className === \"MsoListParagraphCxSpLast\" : !1;\n}\nfunction createWordRules() {\n  return [\n    {\n      deserialize(el, next) {\n        if (tagName(el) === \"p\" && isWordListElement(el))\n          return {\n            ...DEFAULT_BLOCK,\n            listItem: getListItemStyle(el),\n            level: getListItemLevel(el),\n            style: BLOCK_DEFAULT_STYLE,\n            children: next(el.childNodes)\n          };\n      }\n    }\n  ];\n}\nfunction createRules(blockContentType, options) {\n  return [\n    ...createWordRules(),\n    ...createNotionRules(),\n    ...createGDocsRules(blockContentType, options),\n    ...createHTMLRules(blockContentType, options)\n  ];\n}\nclass HtmlDeserializer {\n  blockContentType;\n  rules;\n  parseHtml;\n  _markDefs = [];\n  /**\n   * Create a new serializer respecting a Sanity block content type's schema\n   *\n   * @param blockContentType - Schema type for array containing _at least_ a block child type\n   * @param options - Options for the deserialization process\n   */\n  constructor(blockContentType, options = {}) {\n    const { rules = [], unstable_whitespaceOnPasteMode = \"preserve\" } = options;\n    if (!blockContentType)\n      throw new Error(\"Parameter 'blockContentType' is required\");\n    const standardRules = createRules(blockContentType, {\n      ...createRuleOptions(blockContentType),\n      keyGenerator: options.keyGenerator\n    });\n    this.rules = [...rules, ...standardRules];\n    const parseHtml = options.parseHtml || defaultParseHtml();\n    this.blockContentType = blockContentType, this.parseHtml = (html) => preprocess(html, parseHtml, { unstable_whitespaceOnPasteMode }).body;\n  }\n  /**\n   * Deserialize HTML.\n   *\n   * @param html - The HTML to deserialize, as a string\n   * @returns Array of blocks - either portable text blocks or other allowed blocks\n   */\n  deserialize = (html) => {\n    this._markDefs = [];\n    const { parseHtml } = this, fragment = parseHtml(html), children = Array.from(fragment.childNodes), blocks2 = trimWhitespace(\n      flattenNestedBlocks(\n        ensureRootIsBlocks(this.deserializeElements(children))\n      )\n    );\n    this._markDefs.length > 0 && blocks2.filter(\n      (block) => block._type === \"block\"\n    ).forEach((block) => {\n      block.markDefs = block.markDefs || [], block.markDefs = block.markDefs.concat(\n        this._markDefs.filter((def) => lodash_flatten_js__WEBPACK_IMPORTED_MODULE_0__(\n          block.children.map((child) => child.marks || [])\n        ).includes(def._key))\n      );\n    });\n    const type = this.blockContentType.of.find(findBlockType);\n    return type ? blocks2.map((block) => (block._type === \"block\" && (block._type = type.name), block)) : blocks2;\n  };\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param elements - Array of DOM elements to deserialize\n   * @returns\n   */\n  deserializeElements = (elements = []) => {\n    let nodes = [];\n    return elements.forEach((element) => {\n      nodes = nodes.concat(this.deserializeElement(element));\n    }), nodes;\n  };\n  /**\n   * Deserialize a DOM element\n   *\n   * @param element - Deserialize a DOM element\n   * @returns\n   */\n  deserializeElement = (element) => {\n    const next = (elements) => {\n      if (isNodeList(elements))\n        return this.deserializeElements(Array.from(elements));\n      if (Array.isArray(elements))\n        return this.deserializeElements(elements);\n      if (elements)\n        return this.deserializeElement(elements);\n    }, block = (props) => ({\n      _type: \"__block\",\n      block: props\n    });\n    let node;\n    for (let i = 0; i < this.rules.length; i++) {\n      const rule = this.rules[i];\n      if (!rule.deserialize)\n        continue;\n      const ret = rule.deserialize(element, next, block), type = resolveJsType(ret);\n      if (type !== \"array\" && type !== \"object\" && type !== \"null\" && type !== \"undefined\")\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        );\n      if (ret !== void 0) {\n        {\n          if (ret === null)\n            throw new Error(\"Deserializer rule returned `null`\");\n          Array.isArray(ret) ? node = ret : isPlaceholderDecorator(ret) ? node = this.deserializeDecorator(ret) : isPlaceholderAnnotation(ret) ? node = this.deserializeAnnotation(ret) : node = ret;\n        }\n        if (ret && !Array.isArray(ret) && isMinimalBlock(ret) && \"listItem\" in ret) {\n          let parent = element.parentNode?.parentNode;\n          for (; parent && tagName(parent) === \"li\"; )\n            parent = parent.parentNode?.parentNode, ret.level = ret.level ? ret.level + 1 : 1;\n        }\n        ret && !Array.isArray(ret) && isMinimalBlock(ret) && ret.style === \"blockquote\" && ret.children.forEach((child, index) => {\n          isMinimalSpan(child) && child.text === \"\\r\" && (child.text = `\n`, (index === 0 || index === ret.children.length - 1) && ret.children.splice(index, 1));\n        });\n        break;\n      }\n    }\n    return node || next(element.childNodes) || [];\n  };\n  /**\n   * Deserialize a `__decorator` type\n   * (an internal made up type to process decorators exclusively)\n   *\n   * @param decorator -\n   * @returns array of ...\n   */\n  deserializeDecorator = (decorator) => {\n    const { name } = decorator, applyDecorator = (node) => {\n      if (isPlaceholderDecorator(node))\n        return this.deserializeDecorator(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(name);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyDecorator);\n      }\n      return node;\n    };\n    return decorator.children.reduce((children, node) => {\n      const ret = applyDecorator(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n  /**\n   * Deserialize a `__annotation` object.\n   * (an internal made up type to process annotations exclusively)\n   *\n   * @param annotation -\n   * @returns Array of...\n   */\n  deserializeAnnotation = (annotation) => {\n    const { markDef } = annotation;\n    this._markDefs.push(markDef);\n    const applyAnnotation = (node) => {\n      if (isPlaceholderAnnotation(node))\n        return this.deserializeAnnotation(node);\n      if (isMinimalSpan(node))\n        node.marks = node.marks || [], node.text.trim() && node.marks.unshift(markDef._key);\n      else if (\"children\" in node && Array.isArray(node.children)) {\n        const block = node;\n        block.children = block.children.map(applyAnnotation);\n      }\n      return node;\n    };\n    return annotation.children.reduce((children, node) => {\n      const ret = applyAnnotation(node);\n      return Array.isArray(ret) ? children.concat(ret) : (children.push(ret), children);\n    }, []);\n  };\n}\nfunction normalizeBlock(node, options = {}) {\n  if (node._type !== (options.blockTypeName || \"block\"))\n    return \"_key\" in node ? node : {\n      ...node,\n      _key: options.keyGenerator ? options.keyGenerator() : keyGenerator()\n    };\n  const block = {\n    _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n    children: [],\n    markDefs: [],\n    ...node\n  }, lastChild = block.children[block.children.length - 1];\n  if (!lastChild)\n    return block.children = [\n      {\n        _type: \"span\",\n        _key: options.keyGenerator ? options.keyGenerator() : keyGenerator(),\n        text: \"\",\n        marks: []\n      }\n    ], block;\n  const usedMarkDefs = [], allowedDecorators = options.allowedDecorators && Array.isArray(options.allowedDecorators) ? options.allowedDecorators : !1;\n  return block.children = block.children.reduce(\n    (acc, child) => {\n      const previousChild = acc[acc.length - 1];\n      return previousChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(previousChild) && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_1__(previousChild.marks, child.marks) ? (lastChild && lastChild === child && child.text === \"\" && block.children.length > 1 || (previousChild.text += child.text), acc) : (acc.push(child), acc);\n    },\n    []\n  ).map((child) => {\n    if (!child)\n      throw new Error(\"missing child\");\n    return child._key = options.keyGenerator ? options.keyGenerator() : keyGenerator(), (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(child) && (child.marks ? allowedDecorators && (child.marks = child.marks.filter((mark) => {\n      const isAllowed = allowedDecorators.includes(mark), isUsed = block.markDefs?.some((def) => def._key === mark);\n      return isAllowed || isUsed;\n    })) : child.marks = [], usedMarkDefs.push(...child.marks)), child;\n  }), block.markDefs = (block.markDefs || []).filter(\n    (markDef) => usedMarkDefs.includes(markDef._key)\n  ), block;\n}\nfunction htmlToBlocks(html, blockContentType, options = {}) {\n  return new HtmlDeserializer(blockContentType, options).deserialize(html).map((block) => normalizeBlock(block, { keyGenerator: options.keyGenerator }));\n}\nfunction getBlockContentFeatures(blockContentType) {\n  return blockContentFeatures(blockContentType);\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coreBehaviors: () => (/* binding */ coreBehaviors),\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   execute: () => (/* binding */ execute),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   isHotkey: () => (/* binding */ isHotkey),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.get-selection-start-point.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js\");\n\n\n\n\nfunction execute(event) {\n  return {\n    type: \"execute\",\n    event\n  };\n}\nfunction forward(event) {\n  return {\n    type: \"forward\",\n    event\n  };\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction effect(effect2) {\n  return {\n    type: \"effect\",\n    effect: effect2\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\nconst addAnnotationOnCollapsedSelection = {\n  on: \"annotation.add\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const caretWordSelection = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getCaretWordSelection)(snapshot);\n    return !caretWordSelection || !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionExpanded)({\n      context: {\n        ...snapshot.context,\n        selection: caretWordSelection\n      }\n    }) ? !1 : {\n      caretWordSelection\n    };\n  },\n  actions: [({\n    event\n  }, {\n    caretWordSelection\n  }) => [raise({\n    type: \"select\",\n    at: caretWordSelection\n  }), raise({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n}, coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection\n}, IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nconst arrowDownOnLonelyBlockObject = {\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!isHotkey(\"ArrowDown\", event.originEvent) || !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)(snapshot), nextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)(snapshot);\n    return focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}, arrowUpOnLonelyBlockObject = {\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!isHotkey(\"ArrowUp\", event.originEvent) || !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)(snapshot), previousBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)(snapshot);\n    return focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\"\n  })]]\n}, breakingBlockObject = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusBlockObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)(snapshot);\n    return (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot) && focusBlockObject !== void 0;\n  },\n  actions: [({\n    snapshot\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}, clickingAboveLonelyBlockObject = {\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), previousBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)({\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"start\" && focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [raise({\n    type: \"select\",\n    at: event.position.selection\n  }), raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\",\n    select: \"start\"\n  })]]\n}, clickingBelowLonelyBlockObject = {\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusBlockObject)({\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), nextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)({\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"end\" && focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [raise({\n    type: \"select\",\n    at: event.position.selection\n  }), raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\",\n    select: \"start\"\n  })]]\n}, deletingEmptyTextBlockAfterBlockObject = {\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot), previousBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getPreviousBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [raise({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), raise({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}, deletingEmptyTextBlockBeforeBlockObject = {\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot), nextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getNextBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusTextBlock.node) && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_2__.isPortableTextTextBlock)(nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [raise({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), raise({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}, coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: {\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => isHotkey(\"mod+b\", event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"strong\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  },\n  emShortcut: {\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => isHotkey(\"mod+i\", event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"em\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  },\n  underlineShortcut: {\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => isHotkey(\"mod+u\", event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"underline\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  },\n  codeShortcut: {\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => isHotkey(\"mod+'\", event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"code\"),\n    actions: [() => [raise({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  }\n}, coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  {\n    on: \"drag.dragover\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin;\n      return dragOrigin ? (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isOverlappingSelection)(event.position.selection)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }\n], breakingAtTheEndOfTextBlock = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const atTheEndOfBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isAtTheEndOfBlock)(focusTextBlock)(snapshot), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return atTheEndOfBlock ? {\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusListItem,\n    focusLevel\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"after\"\n  })]]\n}, breakingAtTheStartOfTextBlock = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)(snapshot), focusDecorators = focusSpan?.node.marks?.filter((mark) => snapshot.context.schema.decorators.some((decorator) => decorator.name === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark) => !snapshot.context.schema.decorators.some((decorator) => decorator.name === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isAtTheStartOfBlock)(focusTextBlock)(snapshot) ? {\n      focusAnnotations,\n      focusDecorators,\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusAnnotations,\n    focusDecorators,\n    focusListItem,\n    focusLevel\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        marks: focusAnnotations.length === 0 ? focusDecorators : [],\n        text: \"\"\n      }],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"before\",\n    select: \"none\"\n  })]]\n}, breakingEntireDocument = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionExpanded)(snapshot))\n      return !1;\n    const firstBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFirstBlock)(snapshot), lastBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getLastBlock)(snapshot);\n    if (!firstBlock || !lastBlock)\n      return !1;\n    const firstBlockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)(firstBlock), selectionStartPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_3__.getSelectionStartPoint)(snapshot.context.selection), lastBlockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockEndPoint)(lastBlock), selectionEndPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_3__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(firstBlockStartPoint, selectionStartPoint) && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(lastBlockEndPoint, selectionEndPoint) ? {\n      selection: snapshot.context.selection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [raise({\n    type: \"delete\",\n    at: selection\n  })]]\n}, breakingEntireBlocks = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionExpanded)(snapshot))\n      return !1;\n    const selectedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)(snapshot), selectionStartBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return !1;\n    const startBlockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)(selectionStartBlock), selectionStartPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_3__.getSelectionStartPoint)(snapshot.context.selection), endBlockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockEndPoint)(selectionEndBlock), selectionEndPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_3__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(selectionStartPoint, startBlockStartPoint) && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(selectionEndPoint, endBlockEndPoint) ? {\n      selectedBlocks\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    selectedBlocks\n  }) => [raise({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"before\",\n    select: \"start\"\n  }), ...selectedBlocks.map((block) => raise({\n    type: \"delete.block\",\n    at: block.path\n  }))]]\n}, coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [raise({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  })]]\n}, unindentListOnBackspace = {\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [raise({\n    type: \"block.set\",\n    props: {\n      level\n    },\n    at: focusTextBlock.path\n  })]]\n}, clearListOnEnter = {\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(snapshot), focusListBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusListBlock)(snapshot);\n    return !selectionCollapsed || !focusListBlock || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEmptyTextBlock)(focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [raise({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  })]]\n}, indentListOnTab = {\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!isHotkey(\"Tab\", event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)(snapshot), guards = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(snapshot.context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => raise({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}, unindentListOnShiftTab = {\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!isHotkey(\"Shift+Tab\", event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getSelectedBlocks)(snapshot), guards = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.createGuards)(snapshot.context), selectedListBlocks = selectedBlocks.flatMap((block) => guards.isListBlock(block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => raise({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}, coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab\n}, coreBehaviors = [coreAnnotationBehaviors.addAnnotationOnCollapsedSelection, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, ...coreDndBehaviors, coreBlockObjectBehaviors.clickingAboveLonelyBlockObject, coreBlockObjectBehaviors.clickingBelowLonelyBlockObject, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab, coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock, coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock, coreInsertBreakBehaviors.breakingEntireDocument, coreInsertBreakBehaviors.breakingEntireBlocks];\n\n//# sourceMappingURL=behavior.core.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMarkdownBehaviors: () => (/* binding */ createMarkdownBehaviors)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _behavior_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n\n\n\n\n\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousInlineObject)(snapshot), blockOffset = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(snapshot.context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.text\",\n      text: \" \"\n    })], (_, {\n      focusTextBlock,\n      style\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: 2\n        }\n      }\n    })]]\n  }), automaticHr = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot);\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const previousInlineObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousInlineObject)(snapshot), textBefore = (0,_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_3__.getBlockTextBefore)(snapshot), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.text\",\n      text: hrCharacter\n    })], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.block\",\n      placement: \"before\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      }\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"delete.text\",\n      at: hrBlockOffsets\n    })]]\n  }), automaticHrOnPaste = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const text = event.originEvent.dataTransfer.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)(snapshot);\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.text\",\n      text: hrCharacters\n    })], ({\n      snapshot\n    }, {\n      hrObject,\n      focusBlock\n    }) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_4__.isPortableTextTextBlock)(focusBlock.node) ? [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: snapshot.context.schema.block.name,\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"delete.block\",\n      at: focusBlock.path\n    })] : [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    })]]\n  }), automaticHeadingOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const previousInlineObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousInlineObject)(snapshot), blockText = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;\n      if (previousInlineObject || !caretAtTheEndOfHeading)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: snapshot.context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: level + 1\n        }\n      }\n    })]]\n  }), clearStyleOnBackspace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      snapshot\n    }) => {\n      const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(snapshot.context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.set\",\n      props: {\n        style: defaultStyle\n      },\n      at: focusTextBlock.path\n    })]]\n  }), automaticListOnSpace = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getPreviousInlineObject)(snapshot), blockOffset = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(snapshot.context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(snapshot.context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(snapshot.context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"block.set\",\n      props: {\n        listItem,\n        level: 1,\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_0__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: listItemLength + 1\n        }\n      }\n    })]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\n\n//# sourceMappingURL=behavior.markdown.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorActorContext: () => (/* binding */ EditorActorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   KEY_TO_VALUE_ELEMENT: () => (/* binding */ KEY_TO_VALUE_ELEMENT),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   debugWithName: () => (/* binding */ debugWithName),\n/* harmony export */   defaultKeyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   fromSlateValue: () => (/* binding */ fromSlateValue),\n/* harmony export */   getEditorSnapshot: () => (/* binding */ getEditorSnapshot),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNodeBlock: () => (/* binding */ getNodeBlock),\n/* harmony export */   isEqualToEmptyEditor: () => (/* binding */ isEqualToEmptyEditor),\n/* harmony export */   moveRangeByOperation: () => (/* binding */ moveRangeByOperation),\n/* harmony export */   slateRangeToSelection: () => (/* binding */ slateRangeToSelection),\n/* harmony export */   toSlateRange: () => (/* binding */ toSlateRange),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/./node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/./node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/./node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/./node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./parse-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js\");\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/./node_modules/@portabletext/block-tools/lib/index.js\");\n/* harmony import */ var _portabletext_to_html__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @portabletext/to-html */ \"(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\");\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/./node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/./node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./util.selection-point-to-block-offset.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js\");\n/* harmony import */ var _selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./selector.is-selecting-entire-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/./node_modules/lodash.startcase/index.js\");\n/* harmony import */ var _behavior_core_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./util.get-selection-start-point.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_3__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_3__ && debug__WEBPACK_IMPORTED_MODULE_3__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_3__(namespace) : debug__WEBPACK_IMPORTED_MODULE_3__(rootName);\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block;\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: [{\n            _key: VOID_CHILD_KEY,\n            _type: \"span\",\n            text: \"\",\n            marks: []\n          }],\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].name), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: [{\n        _key: VOID_CHILD_KEY,\n        _type: \"span\",\n        text: \"\",\n        marks: []\n      }],\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].name && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_14__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"emit has pending patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n      type: \"has pending patches\"\n    }),\n    \"emit mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const bulk of context.pendingMutations)\n        enqueue.emit({\n          type: \"mutation\",\n          patches: bulk.patches,\n          snapshot: bulk.value\n        });\n    }),\n    \"clear pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingMutations: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingMutations: ({\n        context,\n        event\n      }) => {\n        if ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"patch\"), context.pendingMutations.length === 0)\n          return [{\n            actionId: event.actionId,\n            value: event.value,\n            patches: [event.patch]\n          }];\n        const lastBulk = context.pendingMutations.at(-1);\n        return lastBulk && lastBulk.actionId === event.actionId ? context.pendingMutations.slice(0, -1).concat({\n          value: event.value,\n          actionId: lastBulk.actionId,\n          patches: [...lastBulk.patches, event.patch]\n        }) : context.pendingMutations.concat({\n          value: event.value,\n          actionId: event.actionId,\n          patches: [event.patch]\n        });\n      }\n    })\n  },\n  actors: {\n    \"type listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_16__.fromCallback)(({\n      input,\n      sendBack\n    }) => {\n      const originalApply = input.slateEditor.apply;\n      return input.slateEditor.apply = (op) => {\n        op.type === \"insert_text\" || op.type === \"remove_text\" ? sendBack({\n          type: \"typing\"\n        }) : sendBack({\n          type: \"not typing\"\n        }), originalApply(op);\n      }, () => {\n        input.slateEditor.apply = originalApply;\n      };\n    })\n  },\n  guards: {\n    \"is typing\": (0,xstate__WEBPACK_IMPORTED_MODULE_17__.G)({\n      typing: \"typing\"\n    }),\n    \"no pending mutations\": ({\n      context\n    }) => context.pendingMutations.length === 0,\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_13__.Editor.isNormalizing(context.slateEditor)\n  },\n  delays: {\n    \"mutation debounce\":  false ? 0 : 0,\n    \"type debounce\":  false ? 0 : 250\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingMutations: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  type: \"parallel\",\n  states: {\n    typing: {\n      initial: \"idle\",\n      invoke: {\n        src: \"type listener\",\n        input: ({\n          context\n        }) => ({\n          slateEditor: context.slateEditor\n        })\n      },\n      states: {\n        idle: {\n          on: {\n            typing: {\n              target: \"typing\"\n            }\n          }\n        },\n        typing: {\n          after: {\n            \"type debounce\": {\n              target: \"idle\"\n            }\n          },\n          on: {\n            \"not typing\": {\n              target: \"idle\"\n            },\n            typing: {\n              target: \"typing\",\n              reenter: !0\n            }\n          }\n        }\n      }\n    },\n    mutations: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          on: {\n            patch: {\n              actions: [\"defer patch\", \"emit has pending patches\"],\n              target: \"emitting mutations\"\n            }\n          }\n        },\n        \"emitting mutations\": {\n          after: {\n            \"mutation debounce\": [{\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_17__.D)([(0,xstate__WEBPACK_IMPORTED_MODULE_17__.E)(\"is typing\"), \"slate is normalizing\"]),\n              target: \"idle\",\n              actions: [\"emit mutations\", \"clear pending mutations\"]\n            }, {\n              target: \"emitting mutations\",\n              reenter: !0\n            }]\n          },\n          on: {\n            patch: {\n              target: \"emitting mutations\",\n              actions: [\"defer patch\"],\n              reenter: !0\n            }\n          }\n        }\n      }\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextTextBlock)({\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.name).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nconst CURRENT_ACTION_ID = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorActions(editor, fn) {\n  CURRENT_ACTION_ID.set(editor, defaultKeyGenerator()), slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, fn), CURRENT_ACTION_ID.set(editor, void 0);\n}\nfunction getCurrentActionId(editor) {\n  return CURRENT_ACTION_ID.get(editor);\n}\nfunction isApplyingBehaviorActions(editor) {\n  return getCurrentActionId(editor) !== void 0;\n}\nconst CURRENT_UNDO_STEP = /* @__PURE__ */ new WeakMap();\nfunction withUndoStep(editor, fn) {\n  const current = CURRENT_UNDO_STEP.get(editor);\n  if (current) {\n    fn();\n    return;\n  }\n  CURRENT_UNDO_STEP.set(editor, current ?? {\n    undoStepId: defaultKeyGenerator()\n  }), fn(), CURRENT_UNDO_STEP.set(editor, void 0);\n}\nfunction getCurrentUndoStepId(editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId;\n}\nconst debug$f = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name);\n    const remotePatches = getRemotePatches(editor);\n    let previousUndoStepId = getCurrentUndoStepId(editor);\n    options.subscriptions.push(() => {\n      debug$f(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$f(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$f(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor), currentUndoStepId = getCurrentUndoStepId(editor);\n      let merge = currentUndoStepId !== void 0 && previousUndoStepId === void 0 ? !1 : currentUndoStepId !== void 0 && previousUndoStepId !== void 0 ? currentUndoStepId === previousUndoStepId : !0;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = currentUndoStepId === void 0 && previousUndoStepId === void 0 ? shouldMerge(op, lastOp) || overwrite : merge) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$f(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      previousUndoStepId = currentUndoStepId, apply2(op);\n    }, editor;\n  };\n}\nconst historyUndoActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, {\n    undos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1];\n    if (debug$f(\"Undoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_13__.Operation.inverse).reverse();\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$f(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.redos.push(step), editor.history.undos.pop();\n    }\n  }\n}, historyRedoActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, {\n    redos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1];\n    if (debug$f(\"Redoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_5__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$f(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.undos.push(step), editor.history.redos.pop();\n    }\n  }\n};\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$f(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$f(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$f(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_13__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_13__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst debug$e = debugWithName(\"sync machine\"), syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_16__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_14__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing initial value\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n      type: \"done syncing initial value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => {\n      const editable = !context.readOnly, isProcessingLocalChanges = context.isProcessingLocalChanges, isChanging = isChangingRemotely(context.slateEditor) ?? !1, isBusy = editable && (isProcessingLocalChanges || isChanging);\n      return debug$e(\"isBusy\", {\n        isBusy,\n        editable,\n        isProcessingLocalChanges,\n        isChanging\n      }), isBusy;\n    },\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  on: {\n    \"has pending patches\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"setting up\": {\n      initial: \"syncing initial value\",\n      states: {\n        \"syncing initial value\": {\n          entry: [() => {\n            debug$e(\"entry: syncing initial value\");\n          }],\n          exit: [() => {\n            debug$e(\"exit: syncing initial value\");\n          }],\n          always: {\n            guard: \"initial value synced\",\n            target: \"done syncing initial value\"\n          }\n        },\n        \"done syncing initial value\": {\n          entry: [\"emit done syncing initial value\", () => {\n            debug$e(\"entry: done syncing initial value\");\n          }],\n          exit: [() => {\n            debug$e(\"exit: done syncing initial value\");\n          }],\n          type: \"final\"\n        }\n      }\n    },\n    syncing: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          entry: [() => {\n            debug$e(\"entry: syncing->idle\");\n          }],\n          exit: [() => {\n            debug$e(\"exit: syncing->idle\");\n          }],\n          on: {\n            \"update value\": [{\n              guard: \"is busy\",\n              target: \"busy\",\n              actions: [\"assign pending value\"]\n            }, {\n              target: \"syncing\",\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        busy: {\n          entry: [() => {\n            debug$e(\"entry: syncing->busy\");\n          }],\n          exit: [() => {\n            debug$e(\"exit: syncing->busy\");\n          }],\n          after: {\n            1e3: [{\n              guard: \"is busy\",\n              target: \".\",\n              reenter: !0,\n              actions: [() => {\n                debug$e(\"reenter: syncing->busy\");\n              }]\n            }, {\n              target: \"syncing\"\n            }]\n          },\n          on: {\n            \"update value\": [{\n              actions: [\"assign pending value\"]\n            }]\n          }\n        },\n        syncing: {\n          entry: [() => {\n            debug$e(\"entry: syncing->syncing\");\n          }],\n          exit: [() => {\n            debug$e(\"exit: syncing->syncing\");\n          }],\n          always: {\n            guard: \"pending value equals previous value\",\n            target: \"idle\",\n            actions: [\"clear pending value\", \"assign initial value synced\"]\n          },\n          invoke: {\n            src: \"sync value\",\n            id: \"sync value\",\n            input: ({\n              context\n            }) => ({\n              context: {\n                keyGenerator: context.keyGenerator,\n                previousValue: context.previousValue,\n                readOnly: context.readOnly,\n                schema: context.schema\n              },\n              slateEditor: context.slateEditor,\n              streamBlocks: !context.initialValueSynced,\n              value: context.pendingValue\n            })\n          },\n          on: {\n            \"update value\": {\n              actions: [\"assign pending value\"]\n            },\n            patch: {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n                event\n              }) => event)]\n            },\n            \"invalid value\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n                event\n              }) => event)]\n            },\n            \"value changed\": {\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n                event\n              }) => event)]\n            },\n            \"done syncing\": [{\n              guard: \"value changed while syncing\",\n              actions: [\"assign previous value\", \"assign initial value synced\"],\n              target: \"syncing\",\n              reenter: !0\n            }, {\n              target: \"idle\",\n              actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n});\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$e(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        hadSelection && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(slateEditor);\n        const childrenLength = slateEditor.children.length;\n        slateEditor.children.forEach((_, index) => {\n          slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(slateEditor, {\n            at: [childrenLength - 1 - index]\n          });\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n          decorators: []\n        }), {\n          at: [0]\n        }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(slateEditor, [0, 0]);\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length;\n            if (slateValueFromProps.length < childrenLength) {\n              for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(slateEditor, {\n                  at: [i]\n                });\n              isChanged = !0;\n            }\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks\n            })) {\n              const {\n                blockChanged,\n                blockValid\n              } = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value\n              });\n              isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n            }\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$e(\"Invalid value, returning\"), sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$e(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$e(\"Server value and editor value is equal, no need to sync.\");\n  sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nasync function* getBlocks({\n  slateValue,\n  streamBlocks\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    streamBlocks && index % 10 === 0 && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$e.enabled && debug$e(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$e.enabled && debug$e(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$e.enabled && debug$e(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$e(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$e(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$e(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode = slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode && isTextChanged ? (oldBlockChild.text.length > 0 && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode || (debug$e(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$e(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$e(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$d = debugWithName(\"component:PortableTextEditor:Synchronizer\");\nfunction Synchronizer(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__.c)(41), {\n    editorActor,\n    slateEditor\n  } = props, incomingValue = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(props.editorActor, _temp2);\n  let t0;\n  $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];\n  const t1 = t0.context.keyGenerator;\n  let t2;\n  $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({\n    \"edit mode\": \"read only\"\n  }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];\n  let t3;\n  $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];\n  let t4;\n  $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {\n    input: {\n      keyGenerator: t1,\n      readOnly: t2,\n      schema: t3.context.schema,\n      slateEditor\n    }\n  }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];\n  const syncActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(syncMachine, t4);\n  let t5;\n  $[11] !== props.editorActor ? (t5 = props.editorActor.getSnapshot(), $[11] = props.editorActor, $[12] = t5) : t5 = $[12];\n  let t6;\n  $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {\n    input: {\n      schema: t5.context.schema,\n      slateEditor\n    }\n  }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];\n  const mutationActorRef = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(mutationMachine, t6);\n  let t7, t8;\n  $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = () => {\n    const subscription = mutationActorRef.on(\"*\", (event) => {\n      event.type === \"has pending patches\" && syncActorRef.send({\n        type: \"has pending patches\"\n      }), event.type === \"mutation\" && (syncActorRef.send({\n        type: \"mutation\"\n      }), editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t8 = [mutationActorRef, syncActorRef, editorActor], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t7, t8);\n  let t10, t9;\n  $[21] !== props.editorActor || $[22] !== slateEditor || $[23] !== syncActorRef ? (t9 = () => {\n    const subscription_0 = syncActorRef.on(\"*\", (event_0) => {\n      bb15: switch (event_0.type) {\n        case \"invalid value\": {\n          props.editorActor.send({\n            ...event_0,\n            type: \"notify.invalid value\"\n          });\n          break bb15;\n        }\n        case \"value changed\": {\n          props.editorActor.send({\n            ...event_0,\n            type: \"notify.value changed\"\n          });\n          break bb15;\n        }\n        case \"patch\": {\n          props.editorActor.send({\n            ...event_0,\n            type: \"internal.patch\",\n            value: fromSlateValue(slateEditor.children, props.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditor))\n          });\n          break bb15;\n        }\n        default:\n          props.editorActor.send(event_0);\n      }\n    });\n    return () => {\n      subscription_0.unsubscribe();\n    };\n  }, t10 = [props.editorActor, slateEditor, syncActorRef], $[21] = props.editorActor, $[22] = slateEditor, $[23] = syncActorRef, $[24] = t10, $[25] = t9) : (t10 = $[24], t9 = $[25]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t9, t10);\n  let t11, t12;\n  $[26] !== readOnly || $[27] !== syncActorRef ? (t11 = () => {\n    syncActorRef.send({\n      type: \"update readOnly\",\n      readOnly\n    });\n  }, t12 = [syncActorRef, readOnly], $[26] = readOnly, $[27] = syncActorRef, $[28] = t11, $[29] = t12) : (t11 = $[28], t12 = $[29]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t11, t12);\n  let t13, t14;\n  $[30] !== incomingValue || $[31] !== syncActorRef ? (t13 = () => {\n    debug$d(\"Value from props changed, syncing new value\"), syncActorRef.send({\n      type: \"update value\",\n      value: incomingValue\n    });\n  }, t14 = [syncActorRef, incomingValue], $[30] = incomingValue, $[31] = syncActorRef, $[32] = t13, $[33] = t14) : (t13 = $[32], t14 = $[33]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t13, t14);\n  let t15;\n  $[34] !== editorActor || $[35] !== mutationActorRef ? (t15 = () => {\n    debug$d(\"Subscribing to patch events\");\n    const sub = editorActor.on(\"internal.patch\", (event_1) => {\n      mutationActorRef.send({\n        ...event_1,\n        type: \"patch\"\n      });\n    });\n    return () => {\n      debug$d(\"Unsubscribing to patch events\"), sub.unsubscribe();\n    };\n  }, $[34] = editorActor, $[35] = mutationActorRef, $[36] = t15) : t15 = $[36];\n  let t16;\n  return $[37] !== editorActor || $[38] !== mutationActorRef || $[39] !== slateEditor ? (t16 = [editorActor, mutationActorRef, slateEditor], $[37] = editorActor, $[38] = mutationActorRef, $[39] = slateEditor, $[40] = t16) : t16 = $[40], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t15, t16), null;\n}\nfunction _temp2(s_0) {\n  return s_0.matches({\n    \"edit mode\": \"read only\"\n  });\n}\nfunction _temp(s) {\n  return s.context.incomingValue;\n}\nSynchronizer.displayName = \"Synchronizer\";\nconst converterJson = {\n  mimeType: \"application/json\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.serialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"application/json\",\n      originEvent: event.originEvent,\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.deserialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\"\n    } : {\n      type: \"deserialization.failure\",\n      mimeType: \"application/json\",\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  }\n}, converterPortableText = {\n  mimeType: \"application/x-portable-text\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;\n    if (!selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.sliceBlocks)({\n      blocks: snapshot.context.value,\n      selection\n    });\n    return blocks.length === 0 ? {\n      type: \"serialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks serialized\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.success\",\n      data: JSON.stringify(blocks),\n      mimeType: \"application/x-portable-text\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const blocks = JSON.parse(event.data);\n    if (!Array.isArray(blocks))\n      return {\n        type: \"deserialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        reason: \"Data is not an array\"\n      };\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.(\"dragging internally\")\n        }\n      });\n      return parsedBlock ? [parsedBlock] : [];\n    });\n    return parsedBlocks.length === 0 && blocks.length > 0 ? {\n      type: \"deserialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks were parsed\"\n    } : {\n      type: \"deserialization.success\",\n      data: parsedBlocks,\n      mimeType: \"application/x-portable-text\"\n    };\n  }\n};\nfunction createConverterTextHtml(legacySchema) {\n  return {\n    mimeType: \"text/html\",\n    serialize: ({\n      snapshot,\n      event\n    }) => {\n      const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;\n      if (!selection)\n        return {\n          type: \"serialization.failure\",\n          mimeType: \"text/html\",\n          originEvent: event.originEvent,\n          reason: \"No selection\"\n        };\n      const blocks = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.sliceBlocks)({\n        blocks: snapshot.context.value,\n        selection\n      }), html = (0,_portabletext_to_html__WEBPACK_IMPORTED_MODULE_24__.toHTML)(blocks, {\n        onMissingComponent: !1,\n        components: {\n          unknownType: ({\n            children\n          }) => children !== void 0 ? `${children}` : \"\"\n        }\n      });\n      return html === \"\" ? {\n        type: \"serialization.failure\",\n        mimeType: \"text/html\",\n        originEvent: event.originEvent,\n        reason: \"Serialized HTML is empty\"\n      } : {\n        type: \"serialization.success\",\n        data: html,\n        mimeType: \"text/html\",\n        originEvent: event.originEvent\n      };\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__.htmlToBlocks)(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode: legacySchema.block.options.unstable_whitespaceOnPasteMode\n      }).flatMap((block) => {\n        const parsedBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/html\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/html\"\n      };\n    }\n  };\n}\nfunction createConverterTextPlain(legacySchema) {\n  return {\n    mimeType: \"text/plain\",\n    serialize: ({\n      snapshot,\n      event\n    }) => {\n      const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;\n      return selection ? {\n        type: \"serialization.success\",\n        data: (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.sliceBlocks)({\n          blocks: snapshot.context.value,\n          selection\n        }).map((block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextTextBlock)(block) ? block.children.map((child) => child._type === snapshot.context.schema.span.name ? child.text : snapshot.beta.hasTag(\"dragging internally\") ? `[${snapshot.context.schema.inlineObjects.find((inlineObjectType) => inlineObjectType.name === child._type)?.title ?? \"Object\"}]` : \"\").join(\"\") : snapshot.beta.hasTag(\"dragging internally\") ? `[${snapshot.context.schema.blockObjects.find((blockObjectType) => blockObjectType.name === block._type)?.title ?? \"Object\"}]` : \"\").filter((block) => block !== \"\").join(`\n\n`),\n        mimeType: \"text/plain\",\n        originEvent: event.originEvent\n      } : {\n        type: \"serialization.failure\",\n        mimeType: \"text/plain\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const textToHtml = `<html><body>${escapeHtml(event.data).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`, parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_25__.htmlToBlocks)(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator\n      }).flatMap((block) => {\n        const parsedBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/plain\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/plain\"\n      };\n    }\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction createCoreConverters(legacySchema) {\n  return [converterJson, converterPortableText, createConverterTextHtml(legacySchema), createConverterTextPlain(legacySchema)];\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_26__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst debug$c = debugWithName(\"operationToPatches\");\nfunction createOperationToPatches(editorActor) {\n  const textBlockName = editorActor.getSnapshot().context.schema.block.name;\n  function insertTextPatch(editor, operation, beforeValue) {\n    debug$c.enabled && debug$c(\"Operation\", JSON.stringify(operation, null, 2));\n    const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.diffMatchPatch)(prevText, textChild.text, path);\n    return patch.value.length ? [patch] : [];\n  }\n  function removeTextPatch(editor, operation, beforeValue) {\n    const block = editor && editor.children[operation.path[0]];\n    if (!block)\n      throw new Error(\"Could not find block\");\n    const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;\n    if (child && !textChild)\n      throw new Error(\"Expected span\");\n    if (!textChild)\n      throw new Error(\"Could not find child\");\n    const path = [{\n      _key: block._key\n    }, \"children\", {\n      _key: textChild._key\n    }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n    return patch.value ? [patch] : [];\n  }\n  function setNodePatch(editor, operation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]];\n      if (typeof block._key != \"string\")\n        throw new Error(\"Expected block to have a _key\");\n      const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_10__({\n        ...editor.children[operation.path[0]],\n        ...operation.newProperties\n      }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_9__);\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(fromSlateValue([setNode], textBlockName)[0], [{\n        _key: block._key\n      }])];\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]];\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]];\n        if (child) {\n          const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n          return keys.forEach((keyName) => {\n            if (keys.length === 1 && keyName === \"_key\") {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_8__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(val, [{\n                _key: blockKey\n              }, \"children\", block.children.indexOf(child), keyName]));\n            } else {\n              const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_8__(operation.newProperties, keyName);\n              patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(val, [{\n                _key: blockKey\n              }, \"children\", {\n                _key: childKey\n              }, keyName]));\n            }\n          }), patches;\n        }\n        throw new Error(\"Could not find a valid child\");\n      }\n      throw new Error(\"Could not find a valid block\");\n    } else\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n  }\n  function insertNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]], isTextBlock2 = editor.isTextBlock(block);\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n      return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([fromSlateValue([operation.node], textBlockName)[0]], position, [{\n        _key: targetKey\n      }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([fromSlateValue([operation.node], textBlockName)[0]], \"before\", [operation.path[0]])];\n    } else if (isTextBlock2 && operation.path.length === 2 && editor.children[operation.path[0]]) {\n      const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n        ...operation.node\n      };\n      !node._type && slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n      const child = fromSlateValue([{\n        _key: \"bogus\",\n        _type: textBlockName,\n        children: [node]\n      }], textBlockName)[0].children[0];\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([child], position, [{\n        _key: block._key\n      }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n        _key: block.children[operation.path[1] - 1]._key\n      }])];\n    }\n    return debug$c(\"Something was inserted into a void block. Not producing editor patches.\"), [];\n  }\n  function splitNodePatch(editor, operation, beforeValue) {\n    const patches = [], splitBlock = editor.children[operation.path[0]];\n    if (!editor.isTextBlock(splitBlock))\n      throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]];\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue([editor.children[operation.path[0] + 1]], textBlockName)[0];\n        targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([targetValue], \"after\", [{\n          _key: splitBlock._key\n        }])), oldBlock.children.slice(operation.position).forEach((span) => {\n          const path = [{\n            _key: oldBlock._key\n          }, \"children\", {\n            _key: span._key\n          }];\n          patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)(path));\n        }));\n      }\n      return patches;\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]];\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = fromSlateValue([{\n          ...splitBlock,\n          children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n        }], textBlockName)[0].children;\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)(targetSpans, \"after\", [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(splitSpan.text, [{\n          _key: splitBlock._key\n        }, \"children\", {\n          _key: splitSpan._key\n        }, \"text\"]));\n      }\n      return patches;\n    }\n    return patches;\n  }\n  function removeNodePatch(editor, operation, beforeValue) {\n    const block = beforeValue[operation.path[0]];\n    if (operation.path.length === 1) {\n      if (block && block._key)\n        return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n          _key: block._key\n        }])];\n      throw new Error(\"Block not found\");\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]];\n      return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: spanToRemove._key\n      }])] : (debug$c(\"Span not found in editor trying to remove node\"), []);\n    } else\n      return debug$c(\"Not creating patch inside object block\"), [];\n  }\n  function mergeNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];\n    if (operation.path.length === 1)\n      if (block?._key) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(newBlock, [{\n          _key: newBlock._key\n        }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n          _key: block._key\n        }]));\n      } else\n        throw new Error(\"Target key not found!\");\n    else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {\n      const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n      updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.set)(updatedSpan.text, [{\n        _key: block._key\n      }, \"children\", {\n        _key: updatedSpan._key\n      }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: removedSpan._key\n      }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n    } else\n      debug$c(\"Void nodes can't be merged, not creating any patches\");\n    return patches;\n  }\n  function moveNodePatch(editor, operation, beforeValue) {\n    const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n    if (!targetBlock)\n      return patches;\n    if (operation.path.length === 1) {\n      const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n        _key: block._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([fromSlateValue([block], textBlockName)[0]], position, [{\n        _key: targetBlock._key\n      }]));\n    } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {\n      const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([{\n        _key: block._key\n      }, \"children\", {\n        _key: child._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)([childToInsert], position, [{\n        _key: targetBlock._key\n      }, \"children\", {\n        _key: targetChild._key\n      }]));\n    }\n    return patches;\n  }\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch\n  };\n}\nconst insertTextActionImplementation = ({\n  action\n}) => {\n  action.editor.marks ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(action.editor, {\n    text: action.text,\n    ...action.editor.marks\n  }) : slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertText(action.editor, action.text), action.editor.marks = null;\n};\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_13__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_13__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nconst debug$b = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = editorActor.getSnapshot().context.schema.decorators.map((t) => t.name);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$b(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$b(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$b(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_13__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, blockPath), decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$b(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_13__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$b(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$b(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(newMarkDefs, node.markDefs)) {\n          debug$b(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          if (movedToNextSpan || movedToPreviousSpan)\n            return;\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const {\n          selection\n        } = editor, collapsedSelection = selection ? slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(selection) : !1;\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: selection.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath\n          }), nextSpanAnnotations = nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? []\n                });\n                return;\n              } else if (previousSpanHasSameAnnotation) {\n                apply2(op);\n                return;\n              } else if (!previousSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n            if (atTheEndOfSpan) {\n              if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? []\n                });\n                return;\n              }\n              if (!nextSpan) {\n                slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n                  _type: \"span\",\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: []\n                });\n                return;\n              }\n            }\n          }\n          if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {\n            slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, {\n              _type: \"span\",\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark) => decorators.includes(mark))\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const marksWithoutAnnotationMarks = ({\n                ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {}\n              }.marks || []).filter((mark) => decorators.includes(mark));\n              slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n                  marks: marksWithoutAnnotationMarks\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === editorActor.getSnapshot().context.schema.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_7__([...oldDefs, ...op.properties.markDefs]);\n          debug$b(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst removeDecoratorActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else {\n        const existingMarks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {}\n        }.marks || [], marks = {\n          ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {},\n          marks: existingMarks.filter((eMark) => eMark !== mark)\n        };\n        editor.marks = {\n          marks: marks.marks,\n          _type: \"span\"\n        };\n      }\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction isDecoratorActive({\n  editor,\n  decorator\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedTextNodes = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText,\n    at: editor.selection\n  }));\n  return selectedTextNodes.length === 0 ? !1 : slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(editor.selection) ? selectedTextNodes.every((n) => {\n    const [node] = n;\n    return node.marks?.includes(decorator);\n  }) : ({\n    ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {}\n  }.marks || []).includes(decorator);\n}\nconst addAnnotationActionImplementation = ({\n  context,\n  action\n}) => {\n  const parsedAnnotation = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseAnnotation)({\n    annotation: {\n      _type: action.annotation.name,\n      ...action.annotation.value\n    },\n    context,\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!parsedAnnotation)\n    throw new Error(`Failed to parse annotation ${JSON.stringify(action.annotation)}`);\n  const editor = action.editor;\n  if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(editor.selection))\n    return;\n  let paths, spanPath, markDefPath;\n  const markDefPaths = [], selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: slate__WEBPACK_IMPORTED_MODULE_13__.Range.isBackward(editor.selection)\n  });\n  let blockIndex = 0;\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n      continue;\n    const annotationKey = blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator(), markDefs = block.markDefs ?? [];\n    markDefs.find((markDef) => markDef._type === parsedAnnotation._type && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n      markDefs: [...markDefs, {\n        ...parsedAnnotation,\n        _key: annotationKey\n      }]\n    }, {\n      at: blockPath\n    }), markDefPath = [{\n      _key: block._key\n    }, \"markDefs\", {\n      _key: annotationKey\n    }], slate__WEBPACK_IMPORTED_MODULE_13__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {}, {\n      match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText,\n      split: !0\n    });\n    const children = slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath);\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_13__.Range.includes(editor.selection, path))\n        continue;\n      const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === parsedAnnotation._type));\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n        marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n      }, {\n        at: path\n      }), spanPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: span._key\n      }];\n    }\n    blockIndex++;\n  }\n  return markDefPath && spanPath && (paths = {\n    markDefPath,\n    markDefPaths,\n    spanPath\n  }), paths;\n}, removeAnnotationActionImplementation = ({\n  action\n}) => {\n  const editor = action.editor;\n  if (editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_13__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_13__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_13__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== action.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n};\nfunction toSlatePath(path, editor) {\n  if (!editor)\n    return [];\n  const [block, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isKeySegment)(path[0]) && n._key === path[0]._key\n  }))[0] || [void 0, void 0];\n  if (!block || !slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(block))\n    return [];\n  if (editor.isVoid(block))\n    return [blockPath[0], 0];\n  const childPath = [path[2]], childIndex = block.children.findIndex((child) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__([{\n    _key: child._key\n  }], childPath));\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex];\n    return slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);\n  }\n  return [blockPath[0], 0];\n}\nfunction toSlateRange(selection, editor) {\n  if (!selection || !editor)\n    return null;\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset\n  }, focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset\n  };\n  return focus.path.length === 0 || anchor.path.length === 0 ? null : anchor && focus ? {\n    anchor,\n    focus\n  } : null;\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_13__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_13__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nconst blockSetBehaviorActionImplementation = ({\n  context,\n  action\n}) => {\n  const location = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(action.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(action.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`);\n  const {\n    _type,\n    ...filteredProps\n  } = action.props, updatedBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps\n    },\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!updatedBlock)\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema\n  })?.at(0);\n  if (!slateBlock)\n    throw new Error(\"Unable to convert block to Slate value\");\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(action.editor, slateBlock, {\n    at: location\n  });\n}, blockUnsetBehaviorActionImplementation = ({\n  context,\n  action\n}) => {\n  const location = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(action.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(action.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`);\n  if ((0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.isTextBlock)(context.schema, parsedBlock)) {\n    const propsToRemove = action.props.filter((prop) => prop !== \"_type\"), updatedTextBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n      context,\n      block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_11__(parsedBlock, propsToRemove),\n      options: {\n        refreshKeys: !1\n      }\n    });\n    if (!updatedTextBlock)\n      throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);\n    const propsToSet = {};\n    for (const prop of propsToRemove)\n      prop in updatedTextBlock ? propsToSet[prop] = updatedTextBlock[prop] : propsToSet[prop] = void 0;\n    slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(action.editor, propsToSet, {\n      at: location\n    });\n    return;\n  }\n  const updatedBlockObject = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n    context,\n    block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_11__(parsedBlock, action.props.filter((prop) => prop !== \"_type\")),\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!updatedBlockObject)\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);\n  const {\n    _type,\n    _key,\n    ...props\n  } = updatedBlockObject;\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(action.editor, {\n    _type,\n    _key,\n    value: props\n  }, {\n    at: location\n  });\n};\nfunction getFocusBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    return slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getSelectionStartBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.start(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionStartPoint\n  });\n}\nfunction getSelectionEndBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.end(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionEndPoint\n  });\n}\nfunction getPointBlock({\n  editor,\n  point\n}) {\n  try {\n    const [block] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, point.path.slice(0, 1)) ?? [void 0, void 0];\n    return block ? [block, point.path.slice(0, 1)] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusChild({\n  editor\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({\n    editor\n  }), childIndex = editor.selection?.focus.path.at(1);\n  if (!focusBlock || !focusBlockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const focusChild = slate__WEBPACK_IMPORTED_MODULE_13__.Node.child(focusBlock, childIndex);\n    return focusChild ? [focusChild, [...focusBlockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getPointChild({\n  editor,\n  point\n}) {\n  const [block, blockPath] = getPointBlock({\n    editor,\n    point\n  }), childIndex = point.path.at(1);\n  if (!block || !blockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const pointChild = slate__WEBPACK_IMPORTED_MODULE_13__.Node.child(block, childIndex);\n    return pointChild ? [pointChild, [...blockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFirstBlock({\n  editor\n}) {\n  const firstBlockPath = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, []).path.at(0);\n  try {\n    return firstBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, [firstBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getLastBlock({\n  editor\n}) {\n  const lastBlockPath = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, []).path.at(0);\n  try {\n    return lastBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, [lastBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getNodeBlock({\n  editor,\n  schema,\n  node\n}) {\n  if (slate__WEBPACK_IMPORTED_MODULE_13__.Editor.isEditor(node))\n    return;\n  if (isBlockElement({\n    editor,\n    schema\n  }, node))\n    return elementToBlock({\n      schema,\n      element: node\n    });\n  const parent = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    mode: \"highest\",\n    at: [],\n    match: (n) => isBlockElement({\n      editor,\n      schema\n    }, n) && n.children.some((child) => child._key === node._key)\n  })).at(0)?.at(0);\n  return slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(parent) ? elementToBlock({\n    schema,\n    element: parent\n  }) : void 0;\n}\nfunction elementToBlock({\n  schema,\n  element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0);\n}\nfunction isBlockElement({\n  editor,\n  schema\n}, node) {\n  return slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(node) && !editor.isInline(node) && (schema.block.name === node._type || schema.blockObjects.some((blockObject) => blockObject.name === node._type));\n}\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nfunction slateRangeToSelection({\n  schema,\n  editor,\n  range\n}) {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor\n  }), [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus\n  });\n  if (!anchorBlock || !focusBlock)\n    return null;\n  const [anchorChild] = anchorBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.anchor\n  }) : [void 0, void 0], [focusChild] = focusBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.focus\n  }) : [void 0, void 0], selection = {\n    anchor: {\n      path: [{\n        _key: anchorBlock._key\n      }],\n      offset: range.anchor.offset\n    },\n    focus: {\n      path: [{\n        _key: focusBlock._key\n      }],\n      offset: range.focus.offset\n    },\n    backward: slate__WEBPACK_IMPORTED_MODULE_13__.Range.isBackward(range)\n  };\n  return anchorChild && (selection.anchor.path.push(\"children\"), selection.anchor.path.push({\n    _key: anchorChild._key\n  })), focusChild && (selection.focus.path.push(\"children\"), selection.focus.path.push({\n    _key: focusChild._key\n  })), selection;\n}\nconst decoratorAddActionImplementation = ({\n  context,\n  action\n}) => {\n  const editor = action.editor, mark = action.decorator, value = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), manualAnchor = action.at?.anchor ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.blockOffsetToSpanSelectionPoint)({\n    value,\n    blockOffset: action.at.anchor,\n    direction: \"backward\"\n  }) : void 0, manualFocus = action.at?.focus ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.blockOffsetToSpanSelectionPoint)({\n    value,\n    blockOffset: action.at.focus,\n    direction: \"forward\"\n  }) : void 0, manualSelection = manualAnchor && manualFocus ? {\n    anchor: manualAnchor,\n    focus: manualFocus\n  } : void 0, selection = manualSelection ? toSlateRange(manualSelection, action.editor) ?? editor.selection : editor.selection;\n  if (!selection)\n    return;\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection\n  }), anchorOffset = editorSelection ? (0,_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__.selectionPointToBlockOffset)({\n    value,\n    selectionPoint: editorSelection.anchor\n  }) : void 0, focusOffset = editorSelection ? (0,_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__.selectionPointToBlockOffset)({\n    value,\n    selectionPoint: editorSelection.focus\n  }) : void 0;\n  if (!anchorOffset || !focusOffset)\n    throw new Error(\"Unable to find anchor or focus offset\");\n  if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(selection)) {\n    slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {}, {\n      at: selection,\n      match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText,\n      split: !0,\n      hanging: !0\n    });\n    const newValue = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), newSelection = (0,_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__.blockOffsetsToSelection)({\n      value: newValue,\n      offsets: {\n        anchor: anchorOffset,\n        focus: focusOffset\n      },\n      backward: editorSelection?.backward\n    }), trimmedSelection = (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getTrimmedSelection)({\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: !1,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue\n      }\n    });\n    if (!trimmedSelection)\n      throw new Error(\"Unable to find trimmed selection\");\n    const newRange = toSlateRange(trimmedSelection, editor);\n    if (!newRange)\n      throw new Error(\"Unable to find new selection\");\n    const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_13__.Range.isRange(newRange) ? [...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n      at: newRange,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(node)\n    })] : [];\n    for (const [node, path] of splitTextNodes) {\n      const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n        marks\n      }, {\n        at: path,\n        match: slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n    }\n  } else {\n    if (!Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n      at: selection,\n      match: (node) => editor.isTextSpan(node)\n    }))?.at(0))\n      return;\n    const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, selection, {\n      depth: 1\n    }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n        marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n      }, {\n        at: blockPath,\n        match: (node) => editor.isTextSpan(node)\n      });\n    } else {\n      const existingMarks = {\n        ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {}\n      }.marks || [], marks = {\n        ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {},\n        marks: [...existingMarks, mark]\n      };\n      editor.marks = marks;\n    }\n  }\n  if (editor.selection) {\n    const selection2 = editor.selection;\n    editor.selection = {\n      ...selection2\n    };\n  }\n}, deleteActionImplementation = ({\n  action\n}) => {\n  const range = toSlateRange(action.at, action.editor);\n  if (!range)\n    throw new Error(`Failed to get Slate Range for selection ${JSON.stringify(action.at)}`);\n  action.editor.delete({\n    at: range\n  });\n}, deleteBackwardActionImplementation = ({\n  action\n}) => {\n  action.editor.deleteBackward(action.unit);\n}, deleteBlockActionImplementation = ({\n  action\n}) => {\n  const range = toSlateRange({\n    anchor: {\n      path: action.at,\n      offset: 0\n    },\n    focus: {\n      path: action.at,\n      offset: 0\n    }\n  }, action.editor);\n  if (!range) {\n    console.error(\"Unable to find Slate range from selection points\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(action.editor, {\n    at: range\n  });\n}, deleteForwardActionImplementation = ({\n  action\n}) => {\n  action.editor.deleteForward(action.unit);\n}, effectActionImplementation = ({\n  action\n}) => {\n  action.effect();\n}, insertInlineObjectActionImplementation = ({\n  context,\n  action\n}) => {\n  const parsedInlineObject = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseInlineObject)({\n    context,\n    inlineObject: {\n      _type: action.inlineObject.name,\n      ...action.inlineObject.value ?? {}\n    },\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!parsedInlineObject)\n    throw new Error(`Failed to parse inline object ${JSON.stringify(action.inlineObject)}`);\n  if (!action.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [parsedInlineObject]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(action.editor, child);\n}, insertSpanActionImplementation = ({\n  context,\n  action\n}) => {\n  if (!action.editor.selection) {\n    console.error(\"Unable to perform action without selection\", action);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(action.editor, {\n    at: action.editor.selection.focus.path,\n    match: (node) => action.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", action);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(action.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(action.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...action.decorators ?? []]\n  });\n}, insertBlockActionImplementation = ({\n  context,\n  action\n}) => {\n  const parsedBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n    block: action.block,\n    context,\n    options: {\n      refreshKeys: !1\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`);\n  const fragment = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })[0];\n  if (!fragment)\n    throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    select: action.select ?? \"start\",\n    editor: action.editor,\n    schema: context.schema\n  });\n};\nfunction insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({\n    editor\n  }), [endBlock, endBlockPath] = getSelectionEndBlock({\n    editor\n  });\n  if (!editor.selection || !startBlock || !startBlockPath || !endBlock || !endBlockPath) {\n    select !== \"none\" && slate_dom__WEBPACK_IMPORTED_MODULE_29__.DOMEditor.focus(editor);\n    const [lastBlock, lastBlockPath] = getLastBlock({\n      editor\n    });\n    if (placement === \"before\")\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n        at: [0]\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, [0])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, [0]));\n    else if (placement === \"after\") {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: !1\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, nextPath));\n    } else {\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n          at: lastBlockPath\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, lastBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, lastBlockPath));\n        return;\n      }\n      if (editor.isTextBlock(block) && lastBlock && editor.isTextBlock(lastBlock)) {\n        const selectionBefore = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, lastBlockPath);\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n          at: slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, lastBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, selectionBefore) : select === \"none\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor);\n        return;\n      }\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: !1\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, nextPath));\n    }\n  } else if (placement === \"before\") {\n    const currentSelection = editor.selection, selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.start(currentSelection);\n    slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n      at: [selectionStartPoint.path[0]],\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, [selectionStartPoint.path[0]])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, [selectionStartPoint.path[0]]));\n  } else if (placement === \"after\") {\n    const currentSelection = editor.selection, nextPath = [slate__WEBPACK_IMPORTED_MODULE_13__.Range.end(currentSelection).path[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n      at: nextPath,\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, nextPath));\n  } else {\n    const currentSelection = editor.selection, endBlockEndPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, endBlockPath);\n    if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.delete(editor, {\n        at: currentSelection\n      });\n      const newSelection = editor.selection, [focusBlock, focusBlockPath] = getFocusBlock({\n        editor\n      });\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n        voids: !0\n      });\n      const adjustedSelection = newSelection.anchor.offset === 0 ? slate__WEBPACK_IMPORTED_MODULE_13__.Range.transform(newSelection, {\n        type: \"insert_node\",\n        node: block,\n        path: [newSelection.anchor.path[0]]\n      }) : newSelection;\n      select === \"none\" && adjustedSelection && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, adjustedSelection), focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n        at: focusBlockPath\n      });\n      return;\n    }\n    if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n      const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.start(currentSelection);\n      if (select === \"end\") {\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n          voids: !0\n        });\n        return;\n      }\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n        at: currentSelection,\n        voids: !0\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, selectionStartPoint) : slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionStartPoint, endBlockEndPoint) || slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, selectionStartPoint);\n    } else if (editor.isTextBlock(endBlock)) {\n      const endBlockStartPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, endBlockPath), endBlockEndPoint2 = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, endBlockPath), selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.start(currentSelection), selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_13__.Range.end(currentSelection);\n      if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, endBlockPath)), isEqualToEmptyEditor([endBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_13__.Path.next(endBlockPath)\n        });\n      else if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionEndPoint, endBlockEndPoint2)) {\n        const nextPath = [endBlockPath[0] + 1];\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n          at: nextPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath));\n      } else if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionStartPoint, endBlockStartPoint) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_13__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Path.next(endBlockPath))) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Path.next(endBlockPath)));\n      else {\n        const currentSelection2 = editor.selection, [focusChild] = getFocusChild({\n          editor\n        });\n        if (focusChild && editor.isTextSpan(focusChild))\n          slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertFragment(editor, [block], {\n            at: currentSelection2\n          }), select === \"start\" || select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, [endBlockPath[0] + 1]) : slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, currentSelection2);\n        else {\n          const nextPath = [endBlockPath[0] + 1];\n          slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n            at: nextPath,\n            select: !1\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, currentSelection2), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, nextPath));\n        }\n      }\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, [block], {\n        select: !1\n      });\n      const nextPath = [endBlockPath[0] + 1];\n      select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_13__.Editor.end(editor, nextPath));\n    }\n  }\n}\nconst moveBackwardActionImplementation = ({\n  action\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.move(action.editor, {\n    unit: \"character\",\n    distance: action.distance,\n    reverse: !0\n  });\n}, moveBlockActionImplementation = ({\n  action\n}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]], to = [toSlatePath(action.to, action.editor)[0]];\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.moveNodes(action.editor, {\n    at,\n    to,\n    mode: \"highest\"\n  });\n}, moveForwardActionImplementation = ({\n  action\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.move(action.editor, {\n    unit: \"character\",\n    distance: action.distance\n  });\n}, selectActionImplementation = ({\n  action\n}) => {\n  const newSelection = toSlateRange(action.at, action.editor);\n  newSelection ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(action.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(action.editor);\n}, debug$a = debugWithName(\"behaviors:action\"), behaviorActionImplementations = {\n  \"annotation.add\": addAnnotationActionImplementation,\n  \"annotation.remove\": removeAnnotationActionImplementation,\n  \"block.set\": blockSetBehaviorActionImplementation,\n  \"block.unset\": blockUnsetBehaviorActionImplementation,\n  \"decorator.add\": decoratorAddActionImplementation,\n  \"decorator.remove\": removeDecoratorActionImplementation,\n  delete: deleteActionImplementation,\n  \"delete.backward\": deleteBackwardActionImplementation,\n  \"delete.forward\": deleteForwardActionImplementation,\n  \"delete.block\": deleteBlockActionImplementation,\n  \"history.redo\": historyRedoActionImplementation,\n  \"history.undo\": historyUndoActionImplementation,\n  \"insert.block\": insertBlockActionImplementation,\n  \"insert.inline object\": insertInlineObjectActionImplementation,\n  \"insert.span\": insertSpanActionImplementation,\n  \"insert.text\": insertTextActionImplementation,\n  effect: effectActionImplementation,\n  \"move.backward\": moveBackwardActionImplementation,\n  \"move.block\": moveBlockActionImplementation,\n  \"move.forward\": moveForwardActionImplementation,\n  select: selectActionImplementation\n};\nfunction performAction({\n  context,\n  action\n}) {\n  switch (debug$a(JSON.stringify(lodash_omit_js__WEBPACK_IMPORTED_MODULE_11__(action, [\"editor\"]), null, 2)), action.type) {\n    case \"annotation.add\": {\n      behaviorActionImplementations[\"annotation.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"annotation.remove\": {\n      behaviorActionImplementations[\"annotation.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"block.set\": {\n      behaviorActionImplementations[\"block.set\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"block.unset\": {\n      behaviorActionImplementations[\"block.unset\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.add\": {\n      behaviorActionImplementations[\"decorator.add\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"decorator.remove\": {\n      behaviorActionImplementations[\"decorator.remove\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete\": {\n      behaviorActionImplementations.delete({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.backward\": {\n      behaviorActionImplementations[\"delete.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.block\": {\n      behaviorActionImplementations[\"delete.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"delete.forward\": {\n      behaviorActionImplementations[\"delete.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"effect\": {\n      behaviorActionImplementations.effect({\n        context,\n        action\n      });\n      break;\n    }\n    case \"history.redo\": {\n      behaviorActionImplementations[\"history.redo\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"history.undo\": {\n      behaviorActionImplementations[\"history.undo\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.block\": {\n      behaviorActionImplementations[\"insert.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.inline object\": {\n      behaviorActionImplementations[\"insert.inline object\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.span\": {\n      behaviorActionImplementations[\"insert.span\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"insert.text\": {\n      behaviorActionImplementations[\"insert.text\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.backward\": {\n      behaviorActionImplementations[\"move.backward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.block\": {\n      behaviorActionImplementations[\"move.block\"]({\n        context,\n        action\n      });\n      break;\n    }\n    case \"move.forward\": {\n      behaviorActionImplementations[\"move.forward\"]({\n        context,\n        action\n      });\n      break;\n    }\n    default: {\n      behaviorActionImplementations.select({\n        context,\n        action\n      });\n      break;\n    }\n  }\n}\nfunction createWithEventListeners(editorActor) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    const {\n      deleteBackward,\n      deleteForward,\n      insertBreak,\n      insertText,\n      select\n    } = editor;\n    return editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak();\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor))\n        throw new Error(\"Unexpected call to .insertData(...)\");\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"input.*\",\n          originEvent: {\n            dataTransfer\n          }\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertTextActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          action: {\n            text: `\n`,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options);\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text\n        },\n        editor\n      });\n    }, editor.redo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          action: {\n            type: \"history.redo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range\n          })\n        },\n        editor\n      });\n    }, editor.setFragmentData = () => {\n      console.warn(\"Unexpected call to .setFragmentData(...)\");\n    }, editor.undo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          action: {\n            type: \"history.undo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_13__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_13__.Editor.isEditor(operation.node)) {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_13__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(node) && node._type === editorActor.getSnapshot().context.schema.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_13__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nconst debug$9 = debugWithName(\"applyPatches\"), debugVerbose = debug$9.enabled && !0;\nfunction createApplyPatch(schema) {\n  return (editor, patch) => {\n    let changed = !1;\n    debugVerbose && (debug$9(`\n\nNEW PATCH =============================================================`), debug$9(JSON.stringify(patch, null, 2)));\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schema);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n        default:\n          debug$9(\"Unhandled patch\", patch.type);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const {\n    block,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$9(\"Block not found\"), !1;\n  if (!child || !childPath)\n    return debug$9(\"Child not found\"), !1;\n  if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(child))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);\n  debugState(editor, \"before\");\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return debugState(editor, \"after\"), !0;\n}\nfunction insertPatch(editor, patch, schema) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!targetBlock || !targetBlockPath)\n    return debug$9(\"Block not found\"), !1;\n  if (patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$9(\"Ignoring patch targeting void value\"), !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes: schema\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex;\n    return debug$9(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), debugState(editor, \"after\"), !0;\n  }\n  const {\n    items,\n    position\n  } = patch;\n  if (!targetChild || !targetChildPath)\n    return debug$9(\"Child not found\"), !1;\n  const childrenToInsert = targetBlock && toSlateValue([{\n    ...targetBlock,\n    children: items\n  }], {\n    schemaTypes: schema\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === \"after\" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [targetChildPath[0], normalizedIdx];\n  return debug$9(`Inserting children at path ${childInsertPath}`), debugState(editor, \"before\"), childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), debugState(editor, \"after\"), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (!block)\n    return debug$9(\"Block not found\"), !1;\n  const isTextBlock2 = editor.isTextBlock(block);\n  if (isTextBlock2 && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return debug$9(\"Ignoring setting void value\"), !1;\n  if (debugState(editor, \"before\"), isTextBlock2 && child && childPath) {\n    if (slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(value) && slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(child)) {\n      const newText = child.text;\n      value.text !== newText && (debug$9(\"Setting text property\"), editor.apply({\n        type: \"remove_text\",\n        path: childPath,\n        offset: 0,\n        text: newText\n      }), editor.apply({\n        type: \"insert_text\",\n        path: childPath,\n        offset: 0,\n        text: value.text\n      }), editor.onChange());\n    } else\n      debug$9(\"Setting non-text property\"), editor.apply({\n        type: \"set_node\",\n        path: childPath,\n        properties: {},\n        newProperties: value\n      });\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug$9(\"Setting block property\");\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: blockPath,\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    }), debug$9(\"Setting children\"), block.children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c2\n      });\n    }), Array.isArray(children) && children.forEach((c2, cIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: blockPath.concat(cIndex),\n        node: c2\n      });\n    });\n  } else if (block && \"value\" in block)\n    if (patch.path.length > 1 && patch.path[1] !== \"children\") {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.applyAll)(block.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n        ...block,\n        value: newVal\n      }, {\n        at: blockPath\n      });\n    } else\n      return !1;\n  return debugState(editor, \"after\"), !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    debug$9(\"Removing everything\"), debugState(editor, \"before\");\n    const previousSelection = editor.selection;\n    return slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor), editor.children.forEach((_child, i) => {\n      slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n        at: [i]\n      });\n    }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), debugState(editor, \"after\"), !0;\n  }\n  const {\n    block,\n    blockPath,\n    child,\n    childPath\n  } = findBlockAndChildFromPath(editor, patch.path);\n  if (patch.path.length === 1) {\n    if (!block || !blockPath)\n      return debug$9(\"Block not found\"), !1;\n    const blockIndex = blockPath[0];\n    return debug$9(`Removing block at path [${blockIndex}]`), debugState(editor, \"before\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n      at: [blockIndex]\n    }), debugState(editor, \"after\"), !0;\n  }\n  return editor.isTextBlock(block) && patch.path[1] === \"children\" && patch.path.length === 3 ? !child || !childPath ? (debug$9(\"Child not found\"), !1) : (debug$9(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, \"before\"), debugVerbose && debug$9(`Removing child at path ${JSON.stringify(childPath)}`), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n    at: childPath\n  }), debugState(editor, \"after\"), !0) : !1;\n}\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction debugState(editor, stateName) {\n  debugVerbose && (debug$9(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$9(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));\n}\nfunction findBlockFromPath(editor, path) {\n  let blockIndex = -1;\n  const block = editor.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  return block ? {\n    block,\n    path: [blockIndex]\n  } : {};\n}\nfunction findBlockAndChildFromPath(editor, path) {\n  const {\n    block,\n    path: blockPath\n  } = findBlockFromPath(editor, path);\n  if (!(slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(block) && path[1] === \"children\"))\n    return {\n      block,\n      blockPath,\n      child: void 0,\n      childPath: void 0\n    };\n  let childIndex = -1;\n  const child = block.children.find((node, index) => {\n    const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  return child ? {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex)\n  } : {\n    block,\n    blockPath,\n    child: void 0,\n    childPath: void 0\n  };\n}\nconst debug$8 = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  patchFunctions,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                debug$8.enabled && debug$8(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);\n              });\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$8(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$8(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, editorActor.getSnapshot().context.schema);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, editorActor.getSnapshot().context.schema);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...patchFunctions.insertTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...patchFunctions.removeTextPatch(editor, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...patchFunctions.removeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...patchFunctions.splitNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...patchFunctions.insertNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...patchFunctions.setNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...patchFunctions.moveNodePatch(editor, operation, previousChildren)];\n          break;\n      }\n      if (!editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.unset)([])], editorActor.send({\n        type: \"notify.unset\",\n        previousValue: fromSlateValue(previousChildren, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_18__.setIfMissing)([], []), ...patches]), patches.length > 0)\n        for (const patch of patches)\n          editorActor.send({\n            type: \"internal.patch\",\n            patch: {\n              ...patch,\n              origin: \"local\"\n            },\n            actionId: getCurrentActionId(editor),\n            value: fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n          });\n      return editor;\n    }, editor;\n  };\n}\nconst debug$7 = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const node = op.node;\n        if (op.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_13__.Editor.isVoid(editor, node)) {\n          const nextPath = slate__WEBPACK_IMPORTED_MODULE_13__.Path.next(op.path);\n          editor.children[nextPath[0]] || (debug$7(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_13__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n            decorators: []\n          })));\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$6 = debugWithName(\"plugin:withPortableTextBlockStyle\");\nfunction createWithPortableTextBlockStyle(editorActor) {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name;\n  return function(editor) {\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry;\n      for (const op of editor.operations)\n        if (op.type === \"split_node\" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !slate__WEBPACK_IMPORTED_MODULE_13__.Path.equals(path, op.path)) {\n          const [child] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, [op.path[0] + 1, 0]);\n          if (slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(child) && child.text === \"\") {\n            debug$6(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n              style: defaultStyle\n            }, {\n              at: [op.path[0] + 1],\n              voids: !1\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      normalizeNode(nodeEntry);\n    }, editor;\n  };\n}\ndebugWithName(\"plugin:withPortableTextSelections\");\nfunction createWithPortableTextSelections(editorActor) {\n  let prevSelection = null;\n  return function(editor) {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange = null;\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n          existing ? ptRange = existing : (ptRange = slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection\n          }), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange));\n        }\n        ptRange ? editorActor.send({\n          type: \"notify.selection\",\n          selection: ptRange\n        }) : editorActor.send({\n          type: \"notify.selection\",\n          selection: null\n        });\n      }\n      prevSelection = editor.selection;\n    }, {\n      onChange\n    } = editor;\n    return editor.onChange = () => {\n      onChange(), editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      }) || emitPortableTextSelection();\n    }, editor;\n  };\n}\nconst debug$5 = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextTextBlock)(value) && value._type === editorActor.getSnapshot().context.schema.block.name, editor.isTextSpan = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextSpan)(value) && value._type === editorActor.getSnapshot().context.schema.span.name, editor.isListBlock = (value) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextListBlock)(value) && value._type === editorActor.getSnapshot().context.schema.block.name, editor.isVoid = (element) => editorActor.getSnapshot().context.schema.block.name !== element._type && (editorActor.getSnapshot().context.schema.blockObjects.map((obj) => obj.name).includes(element._type) || editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$5(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          ...span,\n          _type: editorActor.getSnapshot().context.schema.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$5(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createWithUtils({\n  editorActor\n}) {\n  return function(editor) {\n    return editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: editorActor.getSnapshot().context.schema.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: editorActor.getSnapshot().context.schema.styles[0].name || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => editorActor.getSnapshot().context.schema.decorators.find(({\n          name\n        }) => name === decorator))\n      }]\n    }], {\n      schemaTypes: editorActor.getSnapshot().context.schema\n    })[0], editor;\n  };\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor\n  } = options, operationToPatches = createOperationToPatches(editorActor), withObjectKeys = createWithObjectKeys(editorActor), withSchemaTypes = createWithSchemaTypes({\n    editorActor\n  }), withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor\n  }), withPortableTextSelections = createWithPortableTextSelections(editorActor);\n  return createWithEventListeners(editorActor)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));\n}, debug$4 = debugWithName(\"component:PortableTextEditor:SlateContainer\"), slateEditors = /* @__PURE__ */ new WeakMap();\nfunction createSlateEditor(config) {\n  const existingSlateEditor = slateEditors.get(config.editorActor);\n  if (existingSlateEditor)\n    return debug$4(\"Reusing existing Slate editor instance\", config.editorActor.id), existingSlateEditor;\n  debug$4(\"Creating new Slate editor instance\", config.editorActor.id);\n  const unsubscriptions = [], subscriptions = [], instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_30__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_13__.createEditor)()), {\n    editorActor: config.editorActor,\n    subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});\n  for (const subscription of subscriptions)\n    unsubscriptions.push(subscription());\n  const initialValue = [instance.pteCreateTextBlock({\n    decorators: []\n  })], slateEditor = {\n    instance,\n    initialValue\n  };\n  return slateEditors.set(config.editorActor, slateEditor), slateEditor;\n}\nfunction createLegacySchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`, temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`, temporaryObjectNames = {\n  image: temporaryImageName,\n  url: temporaryUrlName\n}, objectNames = {\n  [temporaryImageName]: \"image\",\n  [temporaryUrlName]: \"url\"\n}, defaultObjectTitles = {\n  image: \"Image\",\n  url: \"URL\"\n};\nfunction legacySchemaToEditorSchema(schema) {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType\n      })),\n      title: annotation.title\n    })),\n    block: {\n      name: schema.block.name\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType\n      })),\n      title: blockObject.title\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType\n      })),\n      title: inlineObject.title\n    })),\n    span: {\n      name: schema.span.name\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value\n    }))\n  };\n}\nfunction compileSchemaDefinitionToLegacySchema(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with certain names.\n    name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n    title: blockObject.title === void 0 ? (\n      // This avoids the default title which is a title case of the object name\n      defaultObjectTitles[blockObject.name]\n    ) : blockObject.title,\n    fields: blockObject.fields?.map((field) => ({\n      name: field.name,\n      type: field.type\n    })) ?? []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with certain names.\n    name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n    title: inlineObject.title === void 0 ? (\n      // This avoids the default title which is a title case of the object name\n      defaultObjectTitles[inlineObject.name]\n    ) : inlineObject.title,\n    fields: inlineObject.fields?.map((field) => ({\n      name: field.name,\n      type: field.type\n    })) ?? []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(decorator.name),\n          value: decorator.name\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title,\n          fields: annotation.fields?.map((field) => ({\n            name: field.name,\n            type: field.type\n          })) ?? []\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(list.name)\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(style.name)\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_26__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createLegacySchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => objectNames[blockObject.name] !== void 0 ? {\n      ...blockObject,\n      name: objectNames[blockObject.name],\n      type: {\n        ...blockObject.type,\n        name: objectNames[blockObject.name]\n      }\n    } : blockObject),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) => objectNames[inlineObject.name] !== void 0 ? {\n      ...inlineObject,\n      name: objectNames[inlineObject.name]\n    } : inlineObject)\n  };\n}\nfunction slateChildrenToBlocks(schema, value) {\n  const blocks = new Array(value.length);\n  for (let blockIndex = 0; blockIndex < value.length; blockIndex++) {\n    const descendant = value[blockIndex];\n    if (descendant._type !== schema.block.name) {\n      blocks[blockIndex] = {\n        _key: descendant._key,\n        _type: descendant._type,\n        ...\"value\" in descendant && typeof descendant.value == \"object\" ? descendant.value : {}\n      };\n      continue;\n    }\n    const children = \"children\" in descendant ? descendant.children : [], processedChildren = new Array(children.length);\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex];\n      processedChildren[childIndex] = child._type === schema.span.name ? child : {\n        _key: child._key,\n        _type: child._type,\n        ...\"value\" in child && typeof child.value == \"object\" ? child.value : {}\n      };\n    }\n    blocks[blockIndex] = {\n      ...descendant,\n      children: processedChildren\n    };\n  }\n  return blocks;\n}\nfunction getActiveDecorators({\n  schema,\n  slateEditorInstance\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name);\n  return ({\n    ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(slateEditorInstance) ?? {}\n  }.marks ?? []).filter((mark) => decorators.includes(mark));\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateChildrenToBlocks(editorActorSnapshot.context.schema, slateEditorInstance.children)\n    },\n    beta: {\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag\n    }\n  };\n}\nconst debug$3 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"focus\",\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"blur\",\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      try {\n        return isDecoratorActive({\n          editor,\n          decorator: mark\n        });\n      } catch (err) {\n        return console.warn(err), !1;\n      }\n    },\n    marks: () => ({\n      ...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.marks(editor) || {}\n    }).marks || [],\n    undo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    },\n    redo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    },\n    select: (selection) => {\n      const slateSelection = toSlateRange(selection, editor);\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_13__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_13__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), editor.selection ? slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        })?.focus.path ?? [] : [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_13__.Node.get(editor, focusChildPath);\n      return isSpanNode && focusNode._type !== types.span.name && (debug$3(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), editor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range: editor.selection\n      })?.focus.path ?? [] : [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block\",\n        block: {\n          _type: type.name,\n          ...value || {}\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), editor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor,\n      range: editor.selection\n    })?.focus.path ?? [] : []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        focus: {\n          path,\n          offset: 0\n        },\n        anchor: {\n          path,\n          offset: 0\n        }\n      }, editor);\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_30__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => isAnnotationActive({\n      editor,\n      annotation: {\n        name: annotationType\n      }\n    }),\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_13__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          action: {\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange(selection, editor);\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$3(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          options?.mode === \"blocks\" && (debug$3(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$3(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_13__.Element.isElement(node)\n          })), editor.children.length === 0 && (editor.children = [editor.pteCreateTextBlock({\n            decorators: []\n          })]), editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        }), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_13__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_13__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);\n      return slate__WEBPACK_IMPORTED_MODULE_13__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_13__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_13__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nfunction isAnnotationActive({\n  editor,\n  annotation\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2)\n    return !1;\n  try {\n    const spans = [...slate__WEBPACK_IMPORTED_MODULE_13__.Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_13__.Text.isText(node)\n    })];\n    if (spans.length === 0 || spans.some(([span]) => !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextSpan)(span) || !span.marks || span.marks?.length === 0)) return !1;\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = slate__WEBPACK_IMPORTED_MODULE_13__.Editor.node(editor, path, {\n        depth: 1\n      });\n      return editor.isTextBlock(block) && block.markDefs ? [...accMarkDefs, ...block.markDefs] : accMarkDefs;\n    }, []);\n    return spans.every(([span]) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_19__.isPortableTextSpan)(span) ? span.marks?.map((markKey) => selectionMarkDefs.find((def) => def?._key === markKey)?._type)?.includes(annotation.name) : !1);\n  } catch {\n    return !1;\n  }\n}\nfunction compileSchemasFromEditorConfig(config) {\n  const legacySchema = config.schemaDefinition ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition) : createLegacySchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)), schema = legacySchemaToEditorSchema(legacySchema);\n  return {\n    legacySchema,\n    schema\n  };\n}\nfunction editorConfigToMachineInput(config) {\n  const {\n    legacySchema,\n    schema\n  } = compileSchemasFromEditorConfig(config);\n  return {\n    behaviors: config.behaviors,\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue\n  };\n}\nfunction createInternalEditor(editorActor) {\n  const slateEditor = createSlateEditor({\n    editorActor\n  }), editable = createEditableAPI(slateEditor.instance, editorActor);\n  return {\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (config) => (editorActor.send({\n      type: \"add behavior\",\n      behavior: config.behavior\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior: config.behavior\n      });\n    }),\n    send: (event) => {\n      switch (event.type) {\n        case \"add behavior\":\n        case \"remove behavior\":\n        case \"update behaviors\":\n        case \"update key generator\":\n        case \"update readOnly\":\n        case \"patches\":\n        case \"update value\":\n        case \"update schema\":\n        case \"update maxBlocks\":\n          editorActor.send(event);\n          break;\n        case \"blur\":\n          editorActor.send({\n            type: \"blur\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"focus\":\n          editorActor.send({\n            type: \"focus\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"insert.block object\":\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"insert.block\",\n              block: {\n                _type: event.blockObject.name,\n                ...event.blockObject.value ?? {}\n              },\n              placement: event.placement\n            },\n            editor: slateEditor.instance\n          });\n          break;\n        default:\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: event,\n            editor: slateEditor.instance\n          });\n      }\n    },\n    on: (event, listener) => editorActor.on(event, (event2) => {\n      switch (event2.type) {\n        case \"blurred\":\n        case \"done loading\":\n        case \"editable\":\n        case \"error\":\n        case \"focused\":\n        case \"invalid value\":\n        case \"loading\":\n        case \"mutation\":\n        case \"patch\":\n        case \"read only\":\n        case \"ready\":\n        case \"selection\":\n        case \"value changed\":\n          listener(event2);\n          break;\n      }\n    }),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n}\nconst EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction getGlobalScope() {\n  if (typeof globalThis < \"u\") return globalThis;\n  if (typeof window < \"u\") return window;\n  if (typeof self < \"u\") return self;\n  if (typeof global < \"u\") return global;\n  throw new Error(\"@portabletext/editor: could not locate global scope\");\n}\nconst globalScope = getGlobalScope();\nfunction createGloballyScopedContext(key, defaultValue) {\n  const symbol = Symbol.for(key);\n  return typeof document > \"u\" ? (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(defaultValue) : (globalScope[symbol] = globalScope[symbol] ?? (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(defaultValue), globalScope[symbol]);\n}\nconst EditorContext = createGloballyScopedContext(\"@portabletext/editor/context/editor\", null), abstractAnnotationBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n})], abstractDecoratorBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveDecorator)(event.decorator)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"decorator.remove\",\n    decorator: event.decorator\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const manualSelection = event.at ? (0,_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__.blockOffsetsToSelection)({\n      value: snapshot.context.value,\n      offsets: event.at\n    }) : null;\n    return manualSelection ? !(0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveDecorator)(event.decorator)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: manualSelection\n      }\n    }) : !(0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveDecorator)(event.decorator)(snapshot);\n  },\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    ...event,\n    type: \"decorator.add\"\n  })]]\n})], abstractDeleteBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"delete.text\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const selection = (0,_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_27__.blockOffsetsToSelection)({\n      value: snapshot.context.value,\n      offsets: event.at\n    });\n    if (!selection)\n      return !1;\n    const trimmedSelection = (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getTrimmedSelection)({\n      context: {\n        converters: [],\n        schema: snapshot.context.schema,\n        keyGenerator: snapshot.context.keyGenerator,\n        activeDecorators: [],\n        readOnly: !1,\n        value: snapshot.context.value,\n        selection\n      }\n    });\n    return trimmedSelection ? {\n      selection: trimmedSelection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n})], abstractInsertBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"before\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"before\" : \"after\",\n    select: \"end\"\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"after\",\n  actions: [({\n    event\n  }) => event.blocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: \"end\"\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\")\n      return !1;\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusTextBlock)(snapshot);\n    return focusTextBlock ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    focusTextBlock\n  }) => event.blocks.length === 1 ? [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block: event.blocks[0],\n    placement: \"auto\",\n    select: \"end\"\n  })] : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.isEmptyTextBlock)(focusTextBlock.node) ? event.blocks.map((block, index) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: \"end\"\n  })) : event.blocks.flatMap((block, index) => index === 0 ? [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"split\"\n  }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"select.previous block\",\n    select: \"end\"\n  }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: \"end\"\n  })] : index === event.blocks.length - 1 ? [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"select.next block\",\n    select: \"start\"\n  }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: \"end\"\n  })] : [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: \"end\"\n  })])]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"auto\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: \"end\"\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.break\",\n  actions: [() => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"split\"\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"insert.soft break\",\n  actions: [() => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.text\",\n    text: `\n`\n  })]]\n})], abstractListItemBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"list item.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      level: 1,\n      listItem: event.listItem\n    }\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"list item.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"level\", \"listItem\"]\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"list item.remove\",\n    listItem: event.listItem\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"list item.add\",\n    listItem: event.listItem\n  })]]\n})], abstractMoveBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"move.block up\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getPreviousBlock)({\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return previousBlock ? {\n      previousBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    previousBlock\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: previousBlock.path\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"move.block down\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getNextBlock)({\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return nextBlock ? {\n      nextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    nextBlock\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: nextBlock.path\n  })]]\n})], abstractSelectBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"select.previous block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getPreviousBlock)(snapshot);\n    if (!previousBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getBlockEndPoint)(previousBlock) : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getBlockStartPoint)(previousBlock);\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"select.next block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getNextBlock)(snapshot);\n    if (!nextBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getBlockEndPoint)(nextBlock) : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getBlockStartPoint)(nextBlock);\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n})], abstractSplitBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"split\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const selectionStartPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_33__.getSelectionStartPoint)(snapshot.context.selection), selectionEndPoint = (0,_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_33__.getSelectionEndPoint)(snapshot.context.selection), focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusTextBlock)({\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    });\n    if (focusTextBlock) {\n      const blockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getBlockEndPoint)(focusTextBlock), newTextBlockSelection = {\n        anchor: selectionEndPoint,\n        focus: blockEndPoint\n      }, newTextBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n        block: (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.sliceBlocks)({\n          blocks: [focusTextBlock.node],\n          selection: newTextBlockSelection\n        }).at(0),\n        context: snapshot.context,\n        options: {\n          refreshKeys: !0\n        }\n      });\n      return !newTextBlock || !(0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.isTextBlock)(snapshot.context.schema, newTextBlock) ? !1 : {\n        newTextBlock,\n        newTextBlockSelection,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: blockEndPoint\n        }\n      };\n    }\n    if ((0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusBlockObject)({\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    })) {\n      const newTextBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.parseBlock)({\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: []\n        },\n        context: snapshot.context,\n        options: {\n          refreshKeys: !0\n        }\n      });\n      return newTextBlock ? {\n        newTextBlock,\n        newTextBlockSelection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        },\n        selection: snapshot.context.selection\n      } : !1;\n    }\n    return !1;\n  },\n  actions: [(_, {\n    newTextBlock,\n    selection\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"delete\",\n    at: selection\n  }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.block\",\n    block: newTextBlock,\n    placement: \"after\",\n    select: \"start\"\n  })]]\n})], abstractStyleBehaviors = [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"style.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      style: event.style\n    }\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"style.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"style\"]\n  }))]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"style.remove\",\n    style: event.style\n  })]]\n}), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"style.add\",\n    style: event.style\n  })]]\n})], keyIs = {\n  lineBreak: (event) => event.key === \"Enter\" && event.shiftKey\n}, raiseInsertSoftBreak = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    event\n  }) => keyIs.lineBreak(event.originEvent),\n  actions: [() => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    type: \"insert.soft break\"\n  })]]\n}), raiseDeserializationSuccessOrFailure = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"deserialize\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    let success;\n    const failures = [];\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(converter.mimeType);\n      if (!data)\n        continue;\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {\n          type: \"deserialize\",\n          data\n        }\n      });\n      if (deserializeEvent.type === \"deserialization.success\") {\n        success = deserializeEvent;\n        break;\n      } else\n        failures.push(deserializeEvent);\n    }\n    return success || {\n      type: \"deserialization.failure\",\n      mimeType: \"*/*\",\n      reason: failures.map((failure) => failure.reason).join(\", \")\n    };\n  },\n  actions: [({\n    event\n  }, deserializeEvent) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    ...deserializeEvent,\n    originEvent: event.originEvent\n  })]]\n}), raiseSerializationSuccessOrFailure = (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n  on: \"serialize\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.converters.length === 0)\n      return !1;\n    const serializeEvents = snapshot.context.converters.map((converter) => converter.serialize({\n      snapshot,\n      event: {\n        ...event,\n        originEvent: event.originEvent.type\n      }\n    }));\n    return serializeEvents.length === 0 ? !1 : serializeEvents;\n  },\n  actions: [({\n    event\n  }, serializeEvents) => serializeEvents.map((serializeEvent) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n    ...serializeEvent,\n    originEvent: event.originEvent\n  }))]\n}), defaultBehaviors = [\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.copy\",\n    guard: ({\n      snapshot\n    }) => {\n      const focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusSpan)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.isSelectionCollapsed)(snapshot);\n      return focusSpan && selectionCollapsed;\n    },\n    actions: []\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.copy\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.cut\",\n    guard: ({\n      snapshot\n    }) => {\n      const focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusSpan)(snapshot), selectionCollapsed = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.isSelectionCollapsed)(snapshot);\n      return focusSpan && selectionCollapsed;\n    },\n    actions: []\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.cut\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [({\n      event\n    }, {\n      selection\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"drag.dragstart\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"serialization.success\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        event.originEvent.originEvent.dataTransfer.setData(event.mimeType, event.data);\n      }\n    }]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"serialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin, dropPosition = event.position.selection;\n      return dragOrigin ? (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"drag.drop\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"select\",\n      at: event.position.selection\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.originEvent.type !== \"drag.drop\" || snapshot.beta.internalDrag === void 0)\n        return !1;\n      const dragOrigin = snapshot.beta.internalDrag.origin, dropPosition = event.originEvent.position.selection, droppingOnDragOrigin = dragOrigin ? (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1, draggingEntireBlocks = (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.isSelectingEntireBlocks)({\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }), draggedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getSelectedBlocks)({\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      });\n      return droppingOnDragOrigin ? !1 : {\n        draggingEntireBlocks,\n        draggedBlocks,\n        dragOrigin,\n        originEvent: event.originEvent\n      };\n    },\n    actions: [({\n      event\n    }, {\n      draggingEntireBlocks,\n      draggedBlocks,\n      dragOrigin,\n      originEvent\n    }) => [...draggingEntireBlocks ? draggedBlocks.map((block) => (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })) : [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"delete\",\n      at: dragOrigin.selection\n    })], (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: draggingEntireBlocks ? originEvent.position.block === \"start\" ? \"before\" : originEvent.position.block === \"end\" ? \"after\" : \"auto\" : \"auto\"\n    })]]\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if ((0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.getFocusTextBlock)(snapshot) && event.mimeType === \"text/plain\" && event.originEvent.type === \"clipboard.paste\") {\n        const activeDecorators = snapshot.context.activeDecorators;\n        return {\n          activeAnnotations: (0,_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_28__.getActiveAnnotations)(snapshot),\n          activeDecorators,\n          textRuns: event.data.flatMap((block) => (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_23__.isTextBlock)(snapshot.context.schema, block) ? [(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_22__.getTextBlockText)(block)] : [])\n        };\n      }\n      return !1;\n    },\n    actions: [(_, {\n      activeAnnotations,\n      activeDecorators,\n      textRuns\n    }) => textRuns.flatMap((textRun, index) => index !== textRuns.length - 1 ? [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"insert.break\"\n    })] : [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    })])]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"deserialization.success\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: \"auto\"\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"deserialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_32__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [({\n      event\n    }, {\n      selection\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"delete\",\n      at: selection\n    }), (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"clipboard.paste\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.defineBehavior)({\n    on: \"input.*\",\n    actions: [({\n      event\n    }) => [(0,_behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n  raiseInsertSoftBreak\n], abstractBehaviorEventTypes = [\"annotation.toggle\", \"decorator.toggle\", \"delete.text\", \"deserialize\", \"deserialization.success\", \"deserialization.failure\", \"insert.blocks\", \"insert.break\", \"insert.soft break\", \"list item.add\", \"list item.remove\", \"list item.toggle\", \"move.block down\", \"move.block up\", \"select.previous block\", \"select.next block\", \"serialize\", \"serialization.success\", \"serialization.failure\", \"split\", \"style.add\", \"style.remove\", \"style.toggle\"];\nfunction isAbstractBehaviorEvent(event) {\n  return abstractBehaviorEventTypes.includes(event.type);\n}\nconst nativeBehaviorEventTypes = [\"clipboard.copy\", \"clipboard.cut\", \"clipboard.paste\", \"drag.dragstart\", \"drag.drag\", \"drag.dragend\", \"drag.dragenter\", \"drag.dragover\", \"drag.dragleave\", \"drag.drop\", \"input.*\", \"keyboard.keydown\", \"keyboard.keyup\", \"mouse.click\"];\nfunction isNativeBehaviorEvent(event) {\n  return nativeBehaviorEventTypes.includes(event.type);\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nconst debug$2 = debugWithName(\"behaviors:event\");\nfunction eventCategory(event) {\n  return isNativeBehaviorEvent(event) ? \"native\" : isAbstractBehaviorEvent(event) ? \"synthetic\" : isCustomBehaviorEvent(event) ? \"custom\" : \"synthetic\";\n}\nfunction performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent\n}) {\n  debug$2(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2));\n  const defaultAction = isCustomBehaviorEvent(event) || isNativeBehaviorEvent(event) || isAbstractBehaviorEvent(event) ? void 0 : {\n    ...event,\n    editor\n  }, eventBehaviors = [...remainingEventBehaviors, ...defaultBehaviors].filter((behavior) => {\n    if (behavior.on === \"*\")\n      return !0;\n    const [listenedNamespace] = behavior.on.includes(\"*\") && behavior.on.includes(\".\") ? behavior.on.split(\".\") : [void 0], [eventNamespace] = event.type.includes(\".\") ? event.type.split(\".\") : [void 0];\n    return listenedNamespace !== void 0 && eventNamespace !== void 0 && listenedNamespace === eventNamespace || listenedNamespace !== void 0 && eventNamespace === void 0 && listenedNamespace === event.type ? !0 : behavior.on === event.type;\n  });\n  if (eventBehaviors.length === 0) {\n    if (!defaultAction)\n      return;\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema\n          },\n          action: defaultAction\n        });\n      } catch (error) {\n        console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`));\n      }\n    }), editor.onChange();\n    return;\n  }\n  const guardSnapshot = getSnapshot();\n  let nativeEventPrevented = !1, defaultBehaviorOverwritten = !1, eventBehaviorIndex = -1;\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++;\n    const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n      snapshot: guardSnapshot,\n      event\n    });\n    if (shouldRun) {\n      defaultBehaviorOverwritten = !0;\n      for (const actionSet of eventBehavior.actions) {\n        const actionsSnapshot = getSnapshot(), actions = actionSet({\n          snapshot: actionsSnapshot,\n          event\n        }, shouldRun);\n        if (actions.length !== 0) {\n          if (actions.some((action) => action.type === \"execute\")) {\n            withUndoStep(editor, () => {\n              for (const action of actions) {\n                if (action.type === \"effect\") {\n                  nativeEventPrevented = !0, performAction({\n                    context: {\n                      keyGenerator,\n                      schema\n                    },\n                    action: {\n                      ...action,\n                      editor\n                    }\n                  });\n                  continue;\n                }\n                if (action.type === \"forward\") {\n                  const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n                  performEvent({\n                    mode: \"forward\",\n                    behaviors,\n                    remainingEventBehaviors: remainingEventBehaviors2,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent\n                  });\n                  continue;\n                }\n                if (action.type === \"raise\") {\n                  nativeEventPrevented = !0, performEvent({\n                    mode: \"raise\",\n                    behaviors,\n                    remainingEventBehaviors: behaviors,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent\n                  });\n                  continue;\n                }\n                if (isAbstractBehaviorEvent(action.event))\n                  nativeEventPrevented = !0, performEvent({\n                    mode: \"execute\",\n                    behaviors,\n                    remainingEventBehaviors: behaviors,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent: void 0\n                  });\n                else {\n                  const internalAction = {\n                    ...action.event,\n                    editor\n                  };\n                  let actionFailed = !1;\n                  if (withApplyingBehaviorActions(editor, () => {\n                    try {\n                      performAction({\n                        context: {\n                          keyGenerator,\n                          schema\n                        },\n                        action: internalAction\n                      });\n                    } catch (error) {\n                      console.error(new Error(`Performing action \"${action.event.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`)), actionFailed = !0;\n                    }\n                  }), actionFailed)\n                    break;\n                  editor.onChange();\n                }\n              }\n            });\n            continue;\n          }\n          for (const action of actions) {\n            if (action.type === \"effect\") {\n              nativeEventPrevented = !0, performAction({\n                context: {\n                  keyGenerator,\n                  schema\n                },\n                action: {\n                  ...action,\n                  editor\n                }\n              });\n              continue;\n            }\n            if (action.type === \"forward\") {\n              const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n              performEvent({\n                mode: \"forward\",\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors2,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent\n              });\n              continue;\n            }\n            if (action.type === \"raise\") {\n              nativeEventPrevented = !0, performEvent({\n                mode: \"raise\",\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent\n              });\n              continue;\n            }\n            action.type === \"execute\" && console.error(\"Unexpected action type: `execute`\");\n          }\n        }\n      }\n      break;\n    }\n  }\n  !defaultBehaviorOverwritten && defaultAction ? (nativeEvent?.preventDefault(), withApplyingBehaviorActions(editor, () => {\n    try {\n      performAction({\n        context: {\n          keyGenerator,\n          schema\n        },\n        action: defaultAction\n      });\n    } catch (error) {\n      console.error(new Error(`Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`));\n    }\n  }), editor.onChange()) : nativeEventPrevented && nativeEvent?.preventDefault();\n}\nfunction createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag\n}) {\n  const value = slateChildrenToBlocks(schema, editor.children), selection = editor.selection ? slateRangeToSelection({\n    schema,\n    editor,\n    range: editor.selection\n  }) : null;\n  return {\n    context: {\n      activeDecorators: getActiveDecorators({\n        schema,\n        slateEditorInstance: editor\n      }),\n      converters,\n      keyGenerator,\n      readOnly,\n      schema,\n      selection,\n      value\n    },\n    beta: {\n      hasTag,\n      internalDrag\n    }\n  };\n}\nconst editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_14__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {},\n    tags: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behavior]))\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behavior), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"assign behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      behaviors: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"update behaviors\"), /* @__PURE__ */ new Set([...event.behaviors]))\n    }),\n    \"assign schema\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      schema: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"update schema\"), event.schema)\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.b)(({\n      event,\n      enqueue\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"internal.patch\"), enqueue.emit(event), enqueue.emit({\n        type: \"patch\",\n        patch: event.patch\n      });\n    }),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, [\"internal.patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.b)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        event.type === \"internal.patch\" ? (enqueue.emit(event), enqueue.emit({\n          type: \"patch\",\n          patch: event.patch\n        })) : enqueue.emit(event);\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n      pendingEvents: []\n    }),\n    \"handle blur\": ({\n      event\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, \"blur\");\n      try {\n        slate_react__WEBPACK_IMPORTED_MODULE_30__.ReactEditor.blur(event.editor);\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`));\n      }\n    },\n    \"handle focus\": ({\n      context\n    }) => {\n      if (!context.slateEditor) {\n        console.error(\"No Slate editor found to focus\");\n        return;\n      }\n      try {\n        const currentSelection = context.slateEditor.selection;\n        slate_react__WEBPACK_IMPORTED_MODULE_30__.ReactEditor.focus(context.slateEditor), currentSelection && slate__WEBPACK_IMPORTED_MODULE_13__.Transforms.select(context.slateEditor, currentSelection);\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`));\n      }\n    },\n    \"handle behavior event\": ({\n      context,\n      event,\n      self: self2\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_14__.assertEvent)(event, [\"behavior event\"]), performEvent({\n        mode: \"raise\",\n        behaviors: [...context.behaviors.values()],\n        remainingEventBehaviors: [...context.behaviors.values()],\n        event: event.behaviorEvent,\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        getSnapshot: () => createEditorSnapshot({\n          converters: [...context.converters],\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          readOnly: self2.getSnapshot().matches({\n            \"edit mode\": \"read only\"\n          }),\n          schema: context.schema,\n          hasTag: (tag) => self2.getSnapshot().hasTag(tag),\n          internalDrag: context.internalDrag\n        }),\n        nativeEvent: event.nativeEvent\n      });\n    }\n  },\n  guards: {\n    \"slate is busy\": ({\n      context\n    }) => context.slateEditor ? context.slateEditor.operations.length > 0 : !1\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: /* @__PURE__ */ new Set([...input.behaviors ?? _behavior_core_js__WEBPACK_IMPORTED_MODULE_31__.coreBehaviors]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    incomingValue: input.initialValue\n  }),\n  on: {\n    \"notify.blurred\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"blurred\"\n      }))\n    },\n    \"notify.done loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n        type: \"done loading\"\n      })\n    },\n    \"notify.error\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"error\"\n      }))\n    },\n    \"notify.invalid value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"invalid value\"\n      }))\n    },\n    \"notify.focused\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"focused\"\n      }))\n    },\n    \"notify.selection\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"selection\"\n      }))]\n    },\n    \"notify.unset\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"unset\"\n      }))\n    },\n    \"notify.loading\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)({\n        type: \"loading\"\n      })\n    },\n    \"notify.value changed\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => ({\n        ...event,\n        type: \"value changed\"\n      }))\n    },\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    patches: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.e)(({\n        event\n      }) => event)\n    },\n    \"update behaviors\": {\n      actions: \"assign behaviors\"\n    },\n    \"update key generator\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        keyGenerator: ({\n          event\n        }) => event.keyGenerator\n      })\n    },\n    \"update schema\": {\n      actions: \"assign schema\"\n    },\n    \"update value\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        incomingValue: ({\n          event\n        }) => event.value\n      })\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          on: {\n            \"behavior event\": {\n              actions: \"handle behavior event\",\n              guard: ({\n                event\n              }) => event.behaviorEvent.type === \"clipboard.copy\" || event.behaviorEvent.type === \"mouse.click\" || event.behaviorEvent.type === \"serialize\" || event.behaviorEvent.type === \"serialization.failure\" || event.behaviorEvent.type === \"serialization.success\" || event.behaviorEvent.type === \"select\"\n            }\n          },\n          states: {\n            \"determine initial edit mode\": {\n              on: {\n                \"done syncing initial value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: \"handle behavior event\"\n            },\n            blur: {\n              actions: \"handle blur\"\n            },\n            focus: {\n              target: \".focusing\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n                slateEditor: ({\n                  event\n                }) => event.editor\n              })]\n            }\n          },\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                dragstart: {\n                  actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n                    internalDrag: ({\n                      event\n                    }) => ({\n                      ghost: event.ghost,\n                      origin: event.origin\n                    })\n                  })],\n                  target: \"dragging internally\"\n                }\n              }\n            },\n            focusing: {\n              initial: \"checking if busy\",\n              states: {\n                \"checking if busy\": {\n                  always: [{\n                    guard: \"slate is busy\",\n                    target: \"busy\"\n                  }, {\n                    target: \"#editor.edit mode.editable.idle\",\n                    actions: [\"handle focus\"]\n                  }]\n                },\n                busy: {\n                  after: {\n                    10: {\n                      target: \"checking if busy\"\n                    }\n                  }\n                }\n              }\n            },\n            \"dragging internally\": {\n              exit: [({\n                context\n              }) => {\n                if (context.internalDrag?.ghost)\n                  try {\n                    context.internalDrag.ghost.parentNode?.removeChild(context.internalDrag.ghost);\n                  } catch (error) {\n                    console.error(new Error(`Removing the internal drag ghost failed due to: ${error.message}`));\n                  }\n              }, (0,xstate__WEBPACK_IMPORTED_MODULE_15__.a)({\n                internalDrag: void 0\n              })],\n              tags: [\"dragging internally\"],\n              on: {\n                dragend: {\n                  target: \"idle\"\n                },\n                drop: {\n                  target: \"idle\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          exit: [\"emit ready\"],\n          on: {\n            \"internal.patch\": {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing initial value\": {\n              target: \"pristine\"\n            }\n          }\n        },\n        pristine: {\n          initial: \"idle\",\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: \"normalizing\"\n                },\n                \"internal.patch\": {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                },\n                mutation: {\n                  actions: \"defer event\",\n                  target: \"#editor.setup.dirty\"\n                }\n              }\n            },\n            normalizing: {\n              on: {\n                \"done normalizing\": {\n                  target: \"idle\"\n                },\n                \"internal.patch\": {\n                  actions: \"defer event\"\n                },\n                mutation: {\n                  actions: \"defer event\"\n                }\n              }\n            }\n          }\n        },\n        dirty: {\n          entry: [\"emit pending events\", \"clear pending events\"],\n          on: {\n            \"internal.patch\": {\n              actions: \"emit patch event\"\n            },\n            mutation: {\n              actions: \"emit mutation event\"\n            }\n          }\n        }\n      }\n    }\n  }\n}), PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n}, PortableTextEditorSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditorSelection = () => {\n  const selection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorSelectionContext);\n  if (selection === void 0)\n    throw new Error(\"The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.\");\n  return selection;\n}, debug$1 = debugWithName(\"component:PortableTextEditor:SelectionProvider\");\nfunction PortableTextEditorSelectionProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__.c)(6), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  let t0, t1;\n  $[0] !== props.editorActor ? (t0 = () => {\n    debug$1(\"Subscribing to selection changes\");\n    const subscription = props.editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n        setSelection(event.selection);\n      });\n    });\n    return () => {\n      debug$1(\"Unsubscribing to selection changes\"), subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortableTextEditorSelectionContext.Provider, { value: selection, children: props.children }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;\n}\nconst debug = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_34__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  constructor(props) {\n    if (super(props), props.editor)\n      this.editor = props.editor, this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.getLegacySchema();\n    else {\n      const legacySchema = createLegacySchema(props.schemaType.hasOwnProperty(\"jsonType\") ? props.schemaType : compileType(props.schemaType)), schema = legacySchemaToEditorSchema(legacySchema), editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.A)(editorMachine, {\n        input: {\n          converters: createCoreConverters(legacySchema),\n          getLegacySchema: () => legacySchema,\n          initialValue: props.value,\n          keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n          maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n          readOnly: props.readOnly,\n          schema\n        }\n      });\n      editorActor.start(), this.editor = createInternalEditor(editorActor), this.schemaTypes = legacySchema;\n    }\n    this.editable = this.editor._internal.editable;\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createLegacySchema(this.props.schemaType.hasOwnProperty(\"jsonType\") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({\n      type: \"update schema\",\n      schema: legacySchemaToEditorSchema(this.schemaTypes)\n    })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RouteEventsToChanges, { editorActor: this.editor._internal.editorActor, onChange: (change) => {\n        this.props.editor || this.props.onChange(change), this.change$.next(change);\n      } }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Synchronizer, { editorActor: this.editor._internal.editorActor, slateEditor: this.editor._internal.slateEditor.instance }),\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_30__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortableTextEditorContext.Provider, { value: this, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortableTextEditorSelectionProvider, { editorActor: this.editor._internal.editorActor, children: this.props.children }) }) }) })\n    ] });\n  }\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor) => {\n    debug(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor) => {\n    debug(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (editor) => editor.editable?.focusChild();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor) => editor.editable?.getValue();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = (editor, type, value) => (debug(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (editor, selection) => {\n    debug(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (editor, blockStyle) => (debug(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor, mark) => {\n    debug(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (editor) => editor.editable?.getFragment();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor) => {\n    debug(\"Host undoing\"), editor.editable?.undo();\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor) => {\n    debug(\"Host redoing\"), editor.editable?.redo();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_2__.c)(7);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_35__.useEffectEvent)(t0);\n  let t1;\n  $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = () => {\n    debug(\"Subscribing to editor changes\");\n    const sub = props.editorActor.on(\"*\", (event) => {\n      bb5: switch (event.type) {\n        case \"blurred\": {\n          handleChange({\n            type: \"blur\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"patch\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !0\n          });\n          break bb5;\n        }\n        case \"done loading\": {\n          handleChange({\n            type: \"loading\",\n            isLoading: !1\n          });\n          break bb5;\n        }\n        case \"focused\": {\n          handleChange({\n            type: \"focus\",\n            event: event.event\n          });\n          break bb5;\n        }\n        case \"value changed\": {\n          handleChange({\n            type: \"value\",\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"invalid value\": {\n          handleChange({\n            type: \"invalidValue\",\n            resolution: event.resolution,\n            value: event.value\n          });\n          break bb5;\n        }\n        case \"error\": {\n          handleChange({\n            ...event,\n            level: \"warning\"\n          });\n          break bb5;\n        }\n        case \"mutation\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"ready\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"selection\": {\n          handleChange(event);\n          break bb5;\n        }\n        case \"unset\":\n          handleChange(event);\n      }\n    });\n    return () => {\n      debug(\"Unsubscribing to changes\"), sub.unsubscribe();\n    };\n  }, $[2] = handleChange, $[3] = props.editorActor, $[4] = t1) : t1 = $[4];\n  let t2;\n  return $[5] !== props.editorActor ? (t2 = [props.editorActor], $[5] = props.editorActor, $[6] = t2) : t2 = $[6], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2), null;\n}\nfunction EditorProvider(props) {\n  const editorActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(editorMachine, {\n    input: editorConfigToMachineInput(props.initialConfig)\n  }), internalEditor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => createInternalEditor(editorActor), [editorActor]), portableTextEditor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => new PortableTextEditor({\n    editor: internalEditor\n  }), [internalEditor]);\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(EditorContext.Provider, { value: internalEditor, children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RouteEventsToChanges, { editorActor, onChange: (change) => {\n      portableTextEditor.change$.next(change);\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Synchronizer, { editorActor, slateEditor: internalEditor._internal.slateEditor.instance }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EditorActorContext.Provider, { value: editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_30__.Slate, { editor: internalEditor._internal.slateEditor.instance, initialValue: internalEditor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PortableTextEditorSelectionProvider, { editorActor, children: props.children }) }) }) })\n  ] });\n}\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_1__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\n\n//# sourceMappingURL=editor-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   isTypedObject: () => (/* binding */ isTypedObject),\n/* harmony export */   parseAnnotation: () => (/* binding */ parseAnnotation),\n/* harmony export */   parseBlock: () => (/* binding */ parseBlock),\n/* harmony export */   parseBlocks: () => (/* binding */ parseBlocks),\n/* harmony export */   parseInlineObject: () => (/* binding */ parseInlineObject)\n/* harmony export */ });\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction parseBlocks({\n  context,\n  blocks,\n  options\n}) {\n  return Array.isArray(blocks) ? blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({\n      context,\n      block,\n      options\n    });\n    return parsedBlock ? [parsedBlock] : [];\n  }) : [];\n}\nfunction parseBlock({\n  context,\n  block,\n  options\n}) {\n  return parseTextBlock({\n    block,\n    context,\n    options\n  }) ?? parseBlockObject({\n    blockObject: block,\n    context,\n    options\n  });\n}\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(blockObject))\n    return;\n  const schemaType = context.schema.blockObjects.find(({\n    name\n  }) => name === blockObject._type);\n  if (schemaType)\n    return parseObject({\n      object: blockObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction isTextBlock(schema, block) {\n  return parseTextBlock({\n    block,\n    context: {\n      schema,\n      keyGenerator: () => \"\"\n    },\n    options: {\n      refreshKeys: !1\n    }\n  }) !== void 0;\n}\nfunction parseTextBlock({\n  block,\n  context,\n  options\n}) {\n  if (!isTypedObject(block) || block._type !== context.schema.block.name)\n    return;\n  const _key = options.refreshKeys ? context.keyGenerator() : typeof block._key == \"string\" ? block._key : context.keyGenerator(), unparsedMarkDefs = Array.isArray(block.markDefs) ? block.markDefs : [], markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef))\n      return [];\n    const schemaType = context.schema.annotations.find(({\n      name\n    }) => name === markDef._type);\n    if (!schemaType)\n      return [];\n    if (typeof markDef._key != \"string\")\n      return [];\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator\n      },\n      options\n    });\n    return parsedAnnotation ? (markDefKeyMap.set(markDef._key, parsedAnnotation._key), [parsedAnnotation]) : [];\n  }), children = (Array.isArray(block.children) ? block.children : []).map((child) => parseSpan({\n    span: child,\n    context,\n    markDefKeyMap,\n    options\n  }) ?? parseInlineObject({\n    inlineObject: child,\n    context,\n    options\n  })).filter((child) => child !== void 0), parsedBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children: children.length > 0 ? children : [{\n      _key: context.keyGenerator(),\n      _type: context.schema.span.name,\n      text: \"\",\n      marks: []\n    }],\n    markDefs\n  };\n  if (typeof block.style == \"string\" && context.schema.styles.find((style) => style.name === block.style))\n    parsedBlock.style = block.style;\n  else {\n    const defaultStyle = context.schema.styles.at(0)?.name;\n    defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : console.error(\"Expected default style\");\n  }\n  return typeof block.listItem == \"string\" && context.schema.lists.find((list) => list.name === block.listItem) && (parsedBlock.listItem = block.listItem), typeof block.level == \"number\" && (parsedBlock.level = block.level), parsedBlock;\n}\nfunction parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options\n}) {\n  if (!isTypedObject(span) || span._type !== context.schema.span.name || span._type !== \"span\")\n    return;\n  const marks = (Array.isArray(span.marks) ? span.marks : []).flatMap((mark) => {\n    if (typeof mark != \"string\")\n      return [];\n    const markDefKey = markDefKeyMap.get(mark);\n    return markDefKey !== void 0 ? [markDefKey] : context.schema.decorators.some((decorator) => decorator.name === mark) ? [mark] : [];\n  });\n  return {\n    _type: \"span\",\n    _key: options.refreshKeys ? context.keyGenerator() : typeof span._key == \"string\" ? span._key : context.keyGenerator(),\n    text: typeof span.text == \"string\" ? span.text : \"\",\n    marks\n  };\n}\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(inlineObject))\n    return;\n  const schemaType = context.schema.inlineObjects.find(({\n    name\n  }) => name === inlineObject._type);\n  if (schemaType)\n    return parseObject({\n      object: inlineObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseAnnotation({\n  annotation,\n  context,\n  options\n}) {\n  if (!isTypedObject(annotation))\n    return;\n  const schemaType = context.schema.annotations.find(({\n    name\n  }) => name === annotation._type);\n  if (schemaType)\n    return parseObject({\n      object: annotation,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseObject({\n  object,\n  context,\n  options\n}) {\n  const values = context.schemaType.fields.reduce((fieldValues, field) => {\n    const fieldValue = object[field.name];\n    return fieldValue !== void 0 && (fieldValues[field.name] = fieldValue), fieldValues;\n  }, {});\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys ? context.keyGenerator() : typeof object._key == \"string\" ? object._key : context.keyGenerator(),\n    ...values\n  };\n}\n\n//# sourceMappingURL=parse-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFocusInlineObject: () => (/* binding */ getFocusInlineObject)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n\n\nconst getFocusInlineObject = (snapshot) => {\n  const focusChild = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_0__.getFocusChild)(snapshot);\n  return focusChild && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n};\n\n//# sourceMappingURL=selector.get-focus-inline-object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LWZvY3VzLWlubGluZS1vYmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1EO0FBQ29CO0FBQ3ZFO0FBQ0EscUJBQXFCLG9GQUFhO0FBQ2xDLHdCQUF3QixpRUFBa0I7QUFDMUM7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rYXJlLy4vbm9kZV9tb2R1bGVzL0Bwb3J0YWJsZXRleHQvZWRpdG9yL2xpYi9fY2h1bmtzLWVzL3NlbGVjdG9yLmdldC1mb2N1cy1pbmxpbmUtb2JqZWN0LmpzP2JmNzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQb3J0YWJsZVRleHRTcGFuIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmltcG9ydCB7IGdldEZvY3VzQ2hpbGQgfSBmcm9tIFwiLi9zZWxlY3Rvci5pcy1vdmVybGFwcGluZy1zZWxlY3Rpb24uanNcIjtcbmNvbnN0IGdldEZvY3VzSW5saW5lT2JqZWN0ID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGZvY3VzQ2hpbGQgPSBnZXRGb2N1c0NoaWxkKHNuYXBzaG90KTtcbiAgcmV0dXJuIGZvY3VzQ2hpbGQgJiYgIWlzUG9ydGFibGVUZXh0U3Bhbihmb2N1c0NoaWxkLm5vZGUpID8ge1xuICAgIG5vZGU6IGZvY3VzQ2hpbGQubm9kZSxcbiAgICBwYXRoOiBmb2N1c0NoaWxkLnBhdGhcbiAgfSA6IHZvaWQgMDtcbn07XG5leHBvcnQge1xuICBnZXRGb2N1c0lubGluZU9iamVjdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmdldC1mb2N1cy1pbmxpbmUtb2JqZWN0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n\n\nconst getBlockTextBefore = (snapshot) => {\n  if (!snapshot.context.selection)\n    return \"\";\n  const point = (snapshot.context.selection.backward ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.reverseSelection)(snapshot.context.selection) : snapshot.context.selection).anchor, key = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isKeyedSegment)(point.path[0]) ? point.path[0]._key : void 0, block = key ? snapshot.context.value.find((block2) => block2._key === key) : void 0;\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    node: block,\n    path: [{\n      _key: block._key\n    }]\n  });\n  return (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionText)({\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: point\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4RjtBQUNwQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsdUVBQWdCLHlFQUF5RSxxRUFBYztBQUM5SjtBQUNBO0FBQ0EsdUJBQXVCLHlFQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILFNBQVMsdUZBQWdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2thcmUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzPzBjY2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QmxvY2tTdGFydFBvaW50LCBpc0tleWVkU2VnbWVudCwgcmV2ZXJzZVNlbGVjdGlvbiB9IGZyb20gXCIuL3V0aWwuc2xpY2UtYmxvY2tzLmpzXCI7XG5pbXBvcnQgeyBnZXRTZWxlY3Rpb25UZXh0IH0gZnJvbSBcIi4vc2VsZWN0b3IuaXMtb3ZlcmxhcHBpbmctc2VsZWN0aW9uLmpzXCI7XG5jb25zdCBnZXRCbG9ja1RleHRCZWZvcmUgPSAoc25hcHNob3QpID0+IHtcbiAgaWYgKCFzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3QgcG9pbnQgPSAoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uYmFja3dhcmQgPyByZXZlcnNlU2VsZWN0aW9uKHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKSA6IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKS5hbmNob3IsIGtleSA9IGlzS2V5ZWRTZWdtZW50KHBvaW50LnBhdGhbMF0pID8gcG9pbnQucGF0aFswXS5fa2V5IDogdm9pZCAwLCBibG9jayA9IGtleSA/IHNuYXBzaG90LmNvbnRleHQudmFsdWUuZmluZCgoYmxvY2syKSA9PiBibG9jazIuX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgaWYgKCFibG9jaylcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3Qgc3RhcnRPZkJsb2NrID0gZ2V0QmxvY2tTdGFydFBvaW50KHtcbiAgICBub2RlOiBibG9jayxcbiAgICBwYXRoOiBbe1xuICAgICAgX2tleTogYmxvY2suX2tleVxuICAgIH1dXG4gIH0pO1xuICByZXR1cm4gZ2V0U2VsZWN0aW9uVGV4dCh7XG4gICAgY29udGV4dDoge1xuICAgICAgLi4uc25hcHNob3QuY29udGV4dCxcbiAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICBhbmNob3I6IHN0YXJ0T2ZCbG9jayxcbiAgICAgICAgZm9jdXM6IHBvaW50XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5leHBvcnQge1xuICBnZXRCbG9ja1RleHRCZWZvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3Rvci5nZXQtdGV4dC1iZWZvcmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGuards: () => (/* binding */ createGuards),\n/* harmony export */   getCaretWordSelection: () => (/* binding */ getCaretWordSelection),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getNextInlineObject: () => (/* binding */ getNextInlineObject),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getPreviousInlineObject: () => (/* binding */ getPreviousInlineObject),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectedSlice: () => (/* binding */ getSelectedSlice),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText),\n/* harmony export */   isAtTheEndOfBlock: () => (/* binding */ isAtTheEndOfBlock),\n/* harmony export */   isAtTheStartOfBlock: () => (/* binding */ isAtTheStartOfBlock),\n/* harmony export */   isOverlappingSelection: () => (/* binding */ isOverlappingSelection),\n/* harmony export */   isPointAfterSelection: () => (/* binding */ isPointAfterSelection),\n/* harmony export */   isPointBeforeSelection: () => (/* binding */ isPointBeforeSelection),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed),\n/* harmony export */   isSelectionExpanded: () => (/* binding */ isSelectionExpanded)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\nconst isSelectionCollapsed = (snapshot) => snapshot.context.selection ? JSON.stringify(snapshot.context.selection.anchor.path) === JSON.stringify(snapshot.context.selection.focus.path) && snapshot.context.selection?.anchor.offset === snapshot.context.selection?.focus.offset : !1;\nfunction createGuards({\n  schema\n}) {\n  function isListBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListBlock)(block) && block._type === schema.block.name;\n  }\n  function isTextBlock(block) {\n    return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._type === schema.block.name;\n  }\n  return {\n    isListBlock,\n    isTextBlock\n  };\n}\nconst getFocusBlock = (snapshot) => {\n  const key = snapshot.context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0, node = key ? snapshot.context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusListBlock = (snapshot) => {\n  const guards = createGuards(snapshot.context), focusBlock = getFocusBlock(snapshot);\n  return focusBlock && guards.isListBlock(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusTextBlock = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot);\n  return focusBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusBlockObject = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot);\n  return focusBlock && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = (snapshot) => {\n  const focusBlock = getFocusTextBlock(snapshot);\n  if (!focusBlock)\n    return;\n  const key = snapshot.context.selection && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[2]) ? snapshot.context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = (snapshot) => {\n  const focusChild = getFocusChild(snapshot);\n  return focusChild && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFirstBlock = (snapshot) => {\n  const node = snapshot.context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getLastBlock = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1] ? snapshot.context.value[snapshot.context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getSelectedBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = [], startKey = snapshot.context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, endKey = snapshot.context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getSelectionStartBlock = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const key = snapshot.context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, node = key ? snapshot.context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getSelectionEndBlock = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const key = snapshot.context.selection.backward ? (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0, node = key ? snapshot.context.value.find((block) => block._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getPreviousBlock = (snapshot) => {\n  let previousBlock;\n  const selectionStartBlock = getSelectionStartBlock(snapshot);\n  if (!selectionStartBlock)\n    return;\n  let foundSelectionStartBlock = !1;\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = !0;\n      break;\n    }\n    previousBlock = {\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    };\n  }\n  if (foundSelectionStartBlock && previousBlock)\n    return previousBlock;\n}, getNextBlock = (snapshot) => {\n  let nextBlock;\n  const selectionEndBlock = getSelectionEndBlock(snapshot);\n  if (!selectionEndBlock)\n    return;\n  let foundSelectionEndBlock = !1;\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = !0;\n      continue;\n    }\n    if (foundSelectionEndBlock) {\n      nextBlock = {\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      };\n      break;\n    }\n  }\n  if (foundSelectionEndBlock && nextBlock)\n    return nextBlock;\n}, getSelectionEndPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus;\n}, getSelectionStartPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor;\n}, getNextInlineObject = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionEndPointChildKey)\n    return;\n  let endPointChildFound = !1, inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return inlineObject;\n}, getPreviousInlineObject = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionStartPointChildKey)\n    return;\n  let inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) || (inlineObject = {\n      node: child,\n      path: [...focusTextBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return inlineObject;\n}, getSelectedSlice = (snapshot) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.sliceBlocks)({\n  blocks: snapshot.context.value,\n  selection: snapshot.context.selection\n}), getSelectionText = (snapshot) => getSelectedSlice(snapshot).reduce((text, block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) ? text + block.children.reduce((text2, child) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) ? text2 + child.text : text2, \"\") : text, \"\"), isSelectionExpanded = (snapshot) => !isSelectionCollapsed(snapshot), getCaretWordSelection = (snapshot) => {\n  if (!snapshot.context.selection || !isSelectionCollapsed(snapshot))\n    return null;\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartOffset = selectionStartPoint ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.spanSelectionPointToBlockOffset)({\n    value: snapshot.context.value,\n    selectionPoint: selectionStartPoint\n  }) : void 0;\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset)\n    return null;\n  const previousInlineObject = getPreviousInlineObject(snapshot), blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)(focusTextBlock), textDirectlyBefore = getSelectionText({\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject ? {\n          path: previousInlineObject.path,\n          offset: 0\n        } : blockStartPoint,\n        focus: selectionStartPoint\n      }\n    }\n  }).split(/\\s+/).at(-1), nextInlineObject = getNextInlineObject(snapshot), blockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockEndPoint)(focusTextBlock), textDirectlyAfter = getSelectionText({\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject ? {\n          path: nextInlineObject.path,\n          offset: 0\n        } : blockEndPoint\n      }\n    }\n  }).split(/\\s+/).at(0);\n  if ((textDirectlyBefore === void 0 || textDirectlyBefore === \"\") && (textDirectlyAfter === void 0 || textDirectlyAfter === \"\"))\n    return null;\n  const caretWordStartOffset = textDirectlyBefore ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset - textDirectlyBefore.length\n  } : selectionStartOffset, caretWordEndOffset = textDirectlyAfter ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset + textDirectlyAfter.length\n  } : selectionStartOffset, caretWordStartSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    value: snapshot.context.value,\n    blockOffset: caretWordStartOffset,\n    direction: \"backward\"\n  }), caretWordEndSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    value: snapshot.context.value,\n    blockOffset: caretWordEndOffset,\n    direction: \"forward\"\n  });\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint)\n    return null;\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint\n  };\n  return isSelectionExpanded({\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection\n    }\n  }) ? caretWordSelection : null;\n};\nfunction isAtTheEndOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot))\n      return !1;\n    const blockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockEndPoint)(block);\n    return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockEndPoint);\n  };\n}\nfunction isAtTheStartOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot))\n      return !1;\n    const blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)(block);\n    return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockStartPoint);\n  };\n}\nfunction isPointAfterSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const selection = snapshot.context.selection.backward ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.reverseSelection)(snapshot.context.selection) : snapshot.context.selection, pointBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(point.path[2]) ? point.path[2]._key : void 0, endBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0, endChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selection.focus.path[2]) ? selection.focus.path[2]._key : void 0;\n    if (!pointBlockKey || !endBlockKey)\n      return !1;\n    let after = !1;\n    for (const block of snapshot.context.value) {\n      if (block._key === endBlockKey) {\n        if (block._key !== pointBlockKey) {\n          after = !0;\n          break;\n        }\n        if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) || !pointChildKey || !endChildKey)\n          break;\n        for (const child of block.children) {\n          if (child._key === endChildKey) {\n            if (child._key !== pointChildKey) {\n              after = !0;\n              break;\n            }\n            after = point.offset > selection.focus.offset;\n            break;\n          }\n          if (child._key === pointChildKey)\n            break;\n        }\n      }\n      if (block._key === pointBlockKey)\n        break;\n    }\n    return after;\n  };\n}\nfunction isPointBeforeSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const selection = snapshot.context.selection.backward ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.reverseSelection)(snapshot.context.selection) : snapshot.context.selection, pointBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(point.path[2]) ? point.path[2]._key : void 0, startBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selection.anchor.path[0]) ? selection.anchor.path[0]._key : void 0, startChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(selection.anchor.path[2]) ? selection.anchor.path[2]._key : void 0;\n    if (!pointBlockKey || !startBlockKey)\n      return !1;\n    let before = !1;\n    for (const block of snapshot.context.value) {\n      if (block._key === pointBlockKey) {\n        if (block._key !== startBlockKey) {\n          before = !0;\n          break;\n        }\n        if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) || !pointChildKey || !startChildKey)\n          break;\n        for (const child of block.children) {\n          if (child._key === pointChildKey) {\n            if (child._key !== startChildKey) {\n              before = !0;\n              break;\n            }\n            before = point.offset < selection.anchor.offset;\n            break;\n          }\n          if (child._key === startChildKey)\n            break;\n        }\n      }\n      if (block._key === startBlockKey)\n        break;\n    }\n    return before;\n  };\n}\nfunction isOverlappingSelection(selection) {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection)\n      return !1;\n    const selectionStartPoint = getSelectionStartPoint({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), selectionEndPoint = getSelectionEndPoint({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), originalSelectionStartPoint = getSelectionStartPoint(snapshot), originalSelectionEndPoint = getSelectionEndPoint(snapshot);\n    if (!selectionStartPoint || !selectionEndPoint || !originalSelectionStartPoint || !originalSelectionEndPoint)\n      return !1;\n    const startPointBeforeSelection = isPointBeforeSelection(selectionStartPoint)(snapshot), startPointAfterSelection = isPointAfterSelection(selectionStartPoint)(snapshot), endPointBeforeSelection = isPointBeforeSelection(selectionEndPoint)(snapshot), endPointAfterSelection = isPointAfterSelection(selectionEndPoint)(snapshot), originalStartPointBeforeStartPoint = isPointBeforeSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalStartPointAfterStartPoint = isPointAfterSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalEndPointBeforeEndPoint = isPointBeforeSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), originalEndPointAfterEndPoint = isPointAfterSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), endPointEqualToOriginalStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(selectionEndPoint, originalSelectionStartPoint), startPointEqualToOriginalEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isEqualSelectionPoints)(selectionStartPoint, originalSelectionEndPoint);\n    return endPointBeforeSelection && !endPointEqualToOriginalStartPoint || startPointAfterSelection && !startPointEqualToOriginalEndPoint ? !1 : !originalStartPointBeforeStartPoint && originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && originalEndPointAfterEndPoint ? !endPointEqualToOriginalStartPoint : originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint ? !startPointEqualToOriginalEndPoint : !startPointAfterSelection || !startPointBeforeSelection || !endPointAfterSelection || !endPointBeforeSelection;\n  };\n}\n\n//# sourceMappingURL=selector.is-overlapping-selection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveAnnotations: () => (/* binding */ getActiveAnnotations),\n/* harmony export */   getActiveListItem: () => (/* binding */ getActiveListItem),\n/* harmony export */   getActiveStyle: () => (/* binding */ getActiveStyle),\n/* harmony export */   getSelectedSpans: () => (/* binding */ getSelectedSpans),\n/* harmony export */   getSelectedTextBlocks: () => (/* binding */ getSelectedTextBlocks),\n/* harmony export */   getTrimmedSelection: () => (/* binding */ getTrimmedSelection),\n/* harmony export */   isActiveAnnotation: () => (/* binding */ isActiveAnnotation),\n/* harmony export */   isActiveDecorator: () => (/* binding */ isActiveDecorator),\n/* harmony export */   isActiveListItem: () => (/* binding */ isActiveListItem),\n/* harmony export */   isActiveStyle: () => (/* binding */ isActiveStyle),\n/* harmony export */   isSelectingEntireBlocks: () => (/* binding */ isSelectingEntireBlocks)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var _selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _parse_blocks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parse-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js\");\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\n\n\n\nconst getSelectedSpans = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedSpans = [], startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[0]) ? endPoint.path[0]._key : void 0;\n  if (!startBlockKey || !endBlockKey)\n    return selectedSpans;\n  const startSpanKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endSpanKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[2]) ? endPoint.path[2]._key : void 0;\n  let startBlockFound = !1;\n  for (const block of snapshot.context.value)\n    if (block._key === startBlockKey && (startBlockFound = !0), !!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      if (block._key === startBlockKey) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (startSpanKey && child._key === startSpanKey) {\n              if (startPoint.offset < child.text.length && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              }), startSpanKey === endSpanKey)\n                break;\n              continue;\n            }\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.length > 0 && selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (block._key === endBlockKey) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        break;\n      }\n      if (startBlockFound)\n        for (const child of block.children)\n          (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) && selectedSpans.push({\n            node: child,\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }]\n          });\n    }\n  return selectedSpans;\n}, getActiveAnnotations = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)(snapshot), selectedSpans = getSelectedSpans(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot);\n  if (selectedSpans.length === 0 || !focusSpan)\n    return [];\n  if (selectedSpans.length === 1 && (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)(snapshot)) {\n    if (snapshot.context.selection.focus.offset === 0)\n      return [];\n    if (snapshot.context.selection.focus.offset === focusSpan.node.text.length)\n      return [];\n  }\n  return selectedBlocks.flatMap((block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => selectedSpans.some((span) => span.node.marks?.includes(markDef._key)));\n}, getActiveListItem = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const guards = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(snapshot.context), selectedTextBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)(snapshot).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstListItem = firstTextBlock.listItem;\n  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))\n    return firstListItem;\n}, getActiveStyle = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const guards = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.createGuards)(snapshot.context), selectedTextBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)(snapshot).map((block) => block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstStyle = firstTextBlock.style;\n  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))\n    return firstStyle;\n}, getSelectedTextBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedTextBlocks = [], startKey = snapshot.context.selection.backward ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, endKey = snapshot.context.selection.backward ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0;\n  if (!startKey || !endKey)\n    return selectedTextBlocks;\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      if ((0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context.schema, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context.schema, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedTextBlocks.length > 0 && (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_3__.isTextBlock)(snapshot.context.schema, block) && selectedTextBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedTextBlocks;\n}, getTrimmedSelection = (snapshot) => {\n  if (!snapshot.context.selection)\n    return snapshot.context.selection;\n  const startPoint = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot), endPoint = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot);\n  if (!startPoint || !endPoint)\n    return snapshot.context.selection;\n  const startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(startPoint.path[0]) ? startPoint.path[0]._key : null, startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(startPoint.path[2]) ? startPoint.path[2]._key : null, endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(endPoint.path[0]) ? endPoint.path[0]._key : null, endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isKeyedSegment)(endPoint.path[2]) ? endPoint.path[2]._key : null;\n  if (!startBlockKey || !endBlockKey)\n    return snapshot.context.selection;\n  let startBlockFound = !1, adjustedStartPoint, trimStartPoint = !1, adjustedEndPoint, trimEndPoint = !1, previousPotentialEndpoint;\n  for (const block of snapshot.context.value)\n    if (!(block._key === startBlockKey && (startBlockFound = !0, (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isEmptyTextBlock)(block))) && startBlockFound && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n      if (block._key === endBlockKey && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isEmptyTextBlock)(block))\n        break;\n      for (const child of block.children) {\n        if (child._key === endChildKey && (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) || endPoint.offset === 0)) {\n          adjustedEndPoint = previousPotentialEndpoint ? {\n            path: [{\n              _key: previousPotentialEndpoint.blockKey\n            }, \"children\", {\n              _key: previousPotentialEndpoint.span._key\n            }],\n            offset: previousPotentialEndpoint.span.text.length\n          } : void 0, trimEndPoint = !0;\n          break;\n        }\n        if (trimStartPoint) {\n          const lonelySpan = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) && block.children.length === 1;\n          ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) && child.text.length > 0 || lonelySpan) && (adjustedStartPoint = {\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          }, previousPotentialEndpoint = {\n            blockKey: block._key,\n            span: child\n          }, trimStartPoint = !1);\n          continue;\n        }\n        if (child._key === startChildKey) {\n          if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            trimStartPoint = !0;\n            continue;\n          }\n          if (startPoint.offset === child.text.length) {\n            trimStartPoint = !0, previousPotentialEndpoint = child.text.length > 0 ? {\n              blockKey: block._key,\n              span: child\n            } : previousPotentialEndpoint;\n            continue;\n          }\n        }\n        previousPotentialEndpoint = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) && child.text.length > 0 ? {\n          blockKey: block._key,\n          span: child\n        } : previousPotentialEndpoint;\n      }\n      if (block._key === endBlockKey)\n        break;\n    }\n  const trimmedSelection = snapshot.context.selection.backward ? {\n    anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n    focus: adjustedStartPoint ?? startPoint,\n    backward: !0\n  } : {\n    anchor: adjustedStartPoint ?? startPoint,\n    focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint\n  };\n  if ((0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: trimmedSelection\n    }\n  })) {\n    const focusTextBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusTextBlock)({\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection\n      }\n    });\n    if (focusTextBlock && !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isEmptyTextBlock)(focusTextBlock.node))\n      return null;\n  }\n  return trimmedSelection;\n};\nfunction isActiveAnnotation(annotation) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const selectedBlocks = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectedBlocks)(snapshot), focusSpan = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getFocusSpan)(snapshot), selectedSpans = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionExpanded)(snapshot) ? getSelectedSpans(snapshot) : focusSpan ? [focusSpan] : [];\n    if (selectedSpans.length === 0 || selectedSpans.some((span) => !span.node.marks || span.node.marks?.length === 0))\n      return !1;\n    const selectionMarkDefs = selectedBlocks.flatMap((block) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block.node) ? block.node.markDefs ?? [] : []);\n    return selectedSpans.every((span) => (span.node.marks?.flatMap((mark) => {\n      const markDef = selectionMarkDefs.find((markDef2) => markDef2._key === mark);\n      return markDef ? [markDef._type] : [];\n    }) ?? []).includes(annotation));\n  };\n}\nfunction isActiveDecorator(decorator) {\n  return (snapshot) => {\n    if ((0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.isSelectionExpanded)(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot);\n      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));\n    }\n    return snapshot.context.activeDecorators.includes(decorator);\n  };\n}\nfunction isActiveListItem(listItem) {\n  return (snapshot) => getActiveListItem(snapshot) === listItem;\n}\nfunction isActiveStyle(style) {\n  return (snapshot) => getActiveStyle(snapshot) === style;\n}\nconst isSelectingEntireBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return !1;\n  const startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartBlock)(snapshot), endBlock = (0,_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndBlock)(snapshot);\n  if (!startBlock || !endBlock)\n    return !1;\n  const startBlockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.getBlockStartPoint)(startBlock), endBlockEndPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.getBlockEndPoint)(endBlock);\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isEqualSelectionPoints)(startBlockStartPoint, startPoint) && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_2__.isEqualSelectionPoints)(endBlockEndPoint, endPoint);\n};\n\n//# sourceMappingURL=selector.is-selecting-entire-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint)\n/* harmony export */ });\nfunction getSelectionEndPoint(selection) {\n  return selection ? selection.backward ? selection.anchor : selection.focus : null;\n}\nfunction getSelectionStartPoint(selection) {\n  return selection ? selection.backward ? selection.focus : selection.anchor : null;\n}\n\n//# sourceMappingURL=util.get-selection-start-point.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5nZXQtc2VsZWN0aW9uLXN0YXJ0LXBvaW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2thcmUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5nZXQtc2VsZWN0aW9uLXN0YXJ0LXBvaW50LmpzP2I5N2YiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoc2VsZWN0aW9uKSB7XG4gIHJldHVybiBzZWxlY3Rpb24gPyBzZWxlY3Rpb24uYmFja3dhcmQgPyBzZWxlY3Rpb24uYW5jaG9yIDogc2VsZWN0aW9uLmZvY3VzIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc2VsZWN0aW9uKSB7XG4gIHJldHVybiBzZWxlY3Rpb24gPyBzZWxlY3Rpb24uYmFja3dhcmQgPyBzZWxlY3Rpb24uZm9jdXMgOiBzZWxlY3Rpb24uYW5jaG9yIDogbnVsbDtcbn1cbmV4cG9ydCB7XG4gIGdldFNlbGVjdGlvbkVuZFBvaW50LFxuICBnZXRTZWxlY3Rpb25TdGFydFBvaW50XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5nZXQtc2VsZWN0aW9uLXN0YXJ0LXBvaW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\nfunction isSelectionCollapsed(selection) {\n  return selection ? selection.anchor.path.join() === selection.focus.path.join() && selection.anchor.offset === selection.focus.offset : !1;\n}\n\n//# sourceMappingURL=util.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FyZS8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy91dGlsLmlzLXNlbGVjdGlvbi1jb2xsYXBzZWQuanM/MWI4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc1NlbGVjdGlvbkNvbGxhcHNlZChzZWxlY3Rpb24pIHtcbiAgcmV0dXJuIHNlbGVjdGlvbiA/IHNlbGVjdGlvbi5hbmNob3IucGF0aC5qb2luKCkgPT09IHNlbGVjdGlvbi5mb2N1cy5wYXRoLmpvaW4oKSAmJiBzZWxlY3Rpb24uYW5jaG9yLm9mZnNldCA9PT0gc2VsZWN0aW9uLmZvY3VzLm9mZnNldCA6ICExO1xufVxuZXhwb3J0IHtcbiAgaXNTZWxlY3Rpb25Db2xsYXBzZWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmlzLXNlbGVjdGlvbi1jb2xsYXBzZWQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   mergeTextBlocks: () => (/* binding */ mergeTextBlocks)\n/* harmony export */ });\n/* harmony import */ var _parse_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js\");\n\nfunction isTextBlock(context, block) {\n  return (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTypedObject)(block) && block._type === context.schema.block.name;\n}\nfunction mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock\n}) {\n  const parsedIncomingBlock = (0,_parse_blocks_js__WEBPACK_IMPORTED_MODULE_0__.parseBlock)({\n    context,\n    block: incomingBlock,\n    options: {\n      refreshKeys: !0\n    }\n  });\n  return !parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock) ? targetBlock : {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [...targetBlock.markDefs ?? [], ...parsedIncomingBlock.markDefs ?? []]\n  };\n}\n\n//# sourceMappingURL=util.merge-text-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEQ7QUFDOUQ7QUFDQSxTQUFTLCtEQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOEJBQThCLDREQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2thcmUvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcz84MDU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVHlwZWRPYmplY3QsIHBhcnNlQmxvY2sgfSBmcm9tIFwiLi9wYXJzZS1ibG9ja3MuanNcIjtcbmZ1bmN0aW9uIGlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrKSB7XG4gIHJldHVybiBpc1R5cGVkT2JqZWN0KGJsb2NrKSAmJiBibG9jay5fdHlwZSA9PT0gY29udGV4dC5zY2hlbWEuYmxvY2submFtZTtcbn1cbmZ1bmN0aW9uIG1lcmdlVGV4dEJsb2Nrcyh7XG4gIGNvbnRleHQsXG4gIHRhcmdldEJsb2NrLFxuICBpbmNvbWluZ0Jsb2NrXG59KSB7XG4gIGNvbnN0IHBhcnNlZEluY29taW5nQmxvY2sgPSBwYXJzZUJsb2NrKHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrOiBpbmNvbWluZ0Jsb2NrLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHJlZnJlc2hLZXlzOiAhMFxuICAgIH1cbiAgfSk7XG4gIHJldHVybiAhcGFyc2VkSW5jb21pbmdCbG9jayB8fCAhaXNUZXh0QmxvY2soY29udGV4dCwgcGFyc2VkSW5jb21pbmdCbG9jaykgPyB0YXJnZXRCbG9jayA6IHtcbiAgICAuLi50YXJnZXRCbG9jayxcbiAgICBjaGlsZHJlbjogWy4uLnRhcmdldEJsb2NrLmNoaWxkcmVuLCAuLi5wYXJzZWRJbmNvbWluZ0Jsb2NrLmNoaWxkcmVuXSxcbiAgICBtYXJrRGVmczogWy4uLnRhcmdldEJsb2NrLm1hcmtEZWZzID8/IFtdLCAuLi5wYXJzZWRJbmNvbWluZ0Jsb2NrLm1hcmtEZWZzID8/IFtdXVxuICB9O1xufVxuZXhwb3J0IHtcbiAgaXNUZXh0QmxvY2ssXG4gIG1lcmdlVGV4dEJsb2Nrc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwubWVyZ2UtdGV4dC1ibG9ja3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToBlockSelectionPoint: () => (/* binding */ blockOffsetToBlockSelectionPoint),\n/* harmony export */   blockOffsetToSelectionPoint: () => (/* binding */ blockOffsetToSelectionPoint),\n/* harmony export */   blockOffsetsToSelection: () => (/* binding */ blockOffsetsToSelection),\n/* harmony export */   childSelectionPointToBlockOffset: () => (/* binding */ childSelectionPointToBlockOffset),\n/* harmony export */   selectionPointToBlockOffset: () => (/* binding */ selectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\n\nfunction blockOffsetToBlockSelectionPoint({\n  value,\n  blockOffset\n}) {\n  let selectionPoint;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{\n          _key: block._key\n        }],\n        offset: blockOffset.offset\n      };\n      break;\n    }\n  return selectionPoint;\n}\nfunction blockOffsetToSelectionPoint({\n  value,\n  blockOffset,\n  direction\n}) {\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.blockOffsetToSpanSelectionPoint)({\n    value,\n    blockOffset,\n    direction\n  }) || blockOffsetToBlockSelectionPoint({\n    value,\n    blockOffset\n  });\n}\nfunction blockOffsetsToSelection({\n  value,\n  offsets,\n  backward\n}) {\n  const anchor = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.anchor,\n    direction: backward ? \"backward\" : \"forward\"\n  }), focus = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.focus,\n    direction: backward ? \"forward\" : \"backward\"\n  });\n  return !anchor || !focus ? null : {\n    anchor,\n    focus,\n    backward\n  };\n}\nfunction childSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isKeyedSegment)(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, childKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isKeyedSegment)(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;\n  if (!(!blockKey || !childKey)) {\n    for (const block of value)\n      if (block._key === blockKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isPortableTextTextBlock)(block))\n        for (const child of block.children) {\n          if (child._key === childKey)\n            return {\n              path: [{\n                _key: block._key\n              }],\n              offset: offset + selectionPoint.offset\n            };\n          (0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isPortableTextSpan)(child) && (offset += child.text.length);\n        }\n  }\n}\nfunction selectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  return selectionPoint.path.length === 1 && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isKeyedSegment)(selectionPoint.path[0]) ? {\n    path: [{\n      _key: selectionPoint.path[0]._key\n    }],\n    offset: selectionPoint.offset\n  } : childSelectionPointToBlockOffset({\n    value,\n    selectionPoint\n  });\n}\n\n//# sourceMappingURL=util.selection-point-to-block-offset.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUY7QUFDYjtBQUM1RTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELFNBQVMsc0ZBQStCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1CQUFtQixxRUFBYyw0RUFBNEUscUVBQWM7QUFDM0g7QUFDQTtBQUNBLHFDQUFxQyxzRUFBdUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsVUFBVSxpRUFBa0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDZDQUE2QyxxRUFBYztBQUMzRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFPRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2FyZS8uL25vZGVfbW9kdWxlcy9AcG9ydGFibGV0ZXh0L2VkaXRvci9saWIvX2NodW5rcy1lcy91dGlsLnNlbGVjdGlvbi1wb2ludC10by1ibG9jay1vZmZzZXQuanM/MmU3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibG9ja09mZnNldFRvU3BhblNlbGVjdGlvblBvaW50LCBpc0tleWVkU2VnbWVudCB9IGZyb20gXCIuL3V0aWwuc2xpY2UtYmxvY2tzLmpzXCI7XG5pbXBvcnQgeyBpc1BvcnRhYmxlVGV4dFRleHRCbG9jaywgaXNQb3J0YWJsZVRleHRTcGFuIH0gZnJvbSBcIkBzYW5pdHkvdHlwZXNcIjtcbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgdmFsdWUsXG4gIGJsb2NrT2Zmc2V0XG59KSB7XG4gIGxldCBzZWxlY3Rpb25Qb2ludDtcbiAgZm9yIChjb25zdCBibG9jayBvZiB2YWx1ZSlcbiAgICBpZiAoYmxvY2suX2tleSA9PT0gYmxvY2tPZmZzZXQucGF0aFswXS5fa2V5KSB7XG4gICAgICBzZWxlY3Rpb25Qb2ludCA9IHtcbiAgICAgICAgcGF0aDogW3tcbiAgICAgICAgICBfa2V5OiBibG9jay5fa2V5XG4gICAgICAgIH1dLFxuICAgICAgICBvZmZzZXQ6IGJsb2NrT2Zmc2V0Lm9mZnNldFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgcmV0dXJuIHNlbGVjdGlvblBvaW50O1xufVxuZnVuY3Rpb24gYmxvY2tPZmZzZXRUb1NlbGVjdGlvblBvaW50KHtcbiAgdmFsdWUsXG4gIGJsb2NrT2Zmc2V0LFxuICBkaXJlY3Rpb25cbn0pIHtcbiAgcmV0dXJuIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIHZhbHVlLFxuICAgIGJsb2NrT2Zmc2V0LFxuICAgIGRpcmVjdGlvblxuICB9KSB8fCBibG9ja09mZnNldFRvQmxvY2tTZWxlY3Rpb25Qb2ludCh7XG4gICAgdmFsdWUsXG4gICAgYmxvY2tPZmZzZXRcbiAgfSk7XG59XG5mdW5jdGlvbiBibG9ja09mZnNldHNUb1NlbGVjdGlvbih7XG4gIHZhbHVlLFxuICBvZmZzZXRzLFxuICBiYWNrd2FyZFxufSkge1xuICBjb25zdCBhbmNob3IgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIHZhbHVlLFxuICAgIGJsb2NrT2Zmc2V0OiBvZmZzZXRzLmFuY2hvcixcbiAgICBkaXJlY3Rpb246IGJhY2t3YXJkID8gXCJiYWNrd2FyZFwiIDogXCJmb3J3YXJkXCJcbiAgfSksIGZvY3VzID0gYmxvY2tPZmZzZXRUb1NlbGVjdGlvblBvaW50KHtcbiAgICB2YWx1ZSxcbiAgICBibG9ja09mZnNldDogb2Zmc2V0cy5mb2N1cyxcbiAgICBkaXJlY3Rpb246IGJhY2t3YXJkID8gXCJmb3J3YXJkXCIgOiBcImJhY2t3YXJkXCJcbiAgfSk7XG4gIHJldHVybiAhYW5jaG9yIHx8ICFmb2N1cyA/IG51bGwgOiB7XG4gICAgYW5jaG9yLFxuICAgIGZvY3VzLFxuICAgIGJhY2t3YXJkXG4gIH07XG59XG5mdW5jdGlvbiBjaGlsZFNlbGVjdGlvblBvaW50VG9CbG9ja09mZnNldCh7XG4gIHZhbHVlLFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgYmxvY2tLZXkgPSBpc0tleWVkU2VnbWVudChzZWxlY3Rpb25Qb2ludC5wYXRoWzBdKSA/IHNlbGVjdGlvblBvaW50LnBhdGhbMF0uX2tleSA6IHZvaWQgMCwgY2hpbGRLZXkgPSBpc0tleWVkU2VnbWVudChzZWxlY3Rpb25Qb2ludC5wYXRoWzJdKSA/IHNlbGVjdGlvblBvaW50LnBhdGhbMl0uX2tleSA6IHZvaWQgMDtcbiAgaWYgKCEoIWJsb2NrS2V5IHx8ICFjaGlsZEtleSkpIHtcbiAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIHZhbHVlKVxuICAgICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrS2V5ICYmIGlzUG9ydGFibGVUZXh0VGV4dEJsb2NrKGJsb2NrKSlcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBibG9jay5jaGlsZHJlbikge1xuICAgICAgICAgIGlmIChjaGlsZC5fa2V5ID09PSBjaGlsZEtleSlcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgKyBzZWxlY3Rpb25Qb2ludC5vZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgaXNQb3J0YWJsZVRleHRTcGFuKGNoaWxkKSAmJiAob2Zmc2V0ICs9IGNoaWxkLnRleHQubGVuZ3RoKTtcbiAgICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICB2YWx1ZSxcbiAgc2VsZWN0aW9uUG9pbnRcbn0pIHtcbiAgcmV0dXJuIHNlbGVjdGlvblBvaW50LnBhdGgubGVuZ3RoID09PSAxICYmIGlzS2V5ZWRTZWdtZW50KHNlbGVjdGlvblBvaW50LnBhdGhbMF0pID8ge1xuICAgIHBhdGg6IFt7XG4gICAgICBfa2V5OiBzZWxlY3Rpb25Qb2ludC5wYXRoWzBdLl9rZXlcbiAgICB9XSxcbiAgICBvZmZzZXQ6IHNlbGVjdGlvblBvaW50Lm9mZnNldFxuICB9IDogY2hpbGRTZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICAgIHZhbHVlLFxuICAgIHNlbGVjdGlvblBvaW50XG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgYmxvY2tPZmZzZXRUb0Jsb2NrU2VsZWN0aW9uUG9pbnQsXG4gIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCxcbiAgYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24sXG4gIGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0LFxuICBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLnNlbGVjdGlvbi1wb2ludC10by1ibG9jay1vZmZzZXQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getBlockEndPoint: () => (/* binding */ getBlockEndPoint),\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   isEqualSelectionPoints: () => (/* binding */ isEqualSelectionPoints),\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment),\n/* harmony export */   isSpan: () => (/* binding */ isSpan),\n/* harmony export */   reverseSelection: () => (/* binding */ reverseSelection),\n/* harmony export */   sliceBlocks: () => (/* binding */ sliceBlocks),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/./node_modules/@sanity/types/lib/index.mjs\");\n\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\nfunction blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n  direction\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint, skippedInlineObject = !1;\n  for (const block of value)\n    if (block._key === blockOffset.path[0]._key && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n      for (const child of block.children) {\n        if (direction === \"forward\") {\n          if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child))\n            continue;\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n          skippedInlineObject = !0;\n          continue;\n        }\n        if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n          skippedInlineObject && (selectionPoint = {\n            path: [...blockOffset.path, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          });\n          break;\n        }\n        if (offsetLeft > child.text.length) {\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (offsetLeft <= child.text.length && (selectionPoint = {\n          path: [...blockOffset.path, \"children\", {\n            _key: child._key\n          }],\n          offset: offsetLeft\n        }, offsetLeft -= child.text.length, offsetLeft !== 0))\n          break;\n      }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = isKeyedSegment(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, spanKey = isKeyedSegment(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;\n  if (!(!blockKey || !spanKey)) {\n    for (const block of value)\n      if (block._key === blockKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        for (const child of block.children)\n          if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getBlockEndPoint({\n  node,\n  path\n}) {\n  if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node)) {\n    const lastChild = node.children[node.children.length - 1];\n    if (lastChild)\n      return {\n        path: [...path, \"children\", {\n          _key: lastChild._key\n        }],\n        offset: (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(lastChild) ? lastChild.text.length : 0\n      };\n  }\n  return {\n    path,\n    offset: 0\n  };\n}\nfunction getBlockStartPoint({\n  node,\n  path\n}) {\n  return (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(node) ? {\n    path: [...path, \"children\", {\n      _key: node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path,\n    offset: 0\n  };\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isEmptyTextBlock(block) {\n  if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block))\n    return !1;\n  const onlyText = block.children.every(_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan), blockText = getTextBlockText(block);\n  return onlyText && blockText === \"\";\n}\nfunction isEqualSelectionPoints(a, b) {\n  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);\n}\nfunction isSpan(context, child) {\n  return child._type === context.schema.span.name;\n}\nfunction reverseSelection(selection) {\n  return selection && (selection.backward ? {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !1\n  } : {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: !0\n  });\n}\nfunction sliceBlocks({\n  blocks,\n  selection\n}) {\n  const slice = [];\n  if (!selection)\n    return slice;\n  let startBlock;\n  const middleBlocks = [];\n  let endBlock;\n  const startPoint = selection.backward ? selection.focus : selection.anchor, endPoint = selection.backward ? selection.anchor : selection.focus, startBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[0]) ? endPoint.path[0]._key : void 0, startChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endChildKey = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isKeySegment)(endPoint.path[2]) ? endPoint.path[2]._key : void 0;\n  if (!startBlockKey || !endBlockKey)\n    return slice;\n  for (const block of blocks) {\n    if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block) && block._key === startBlockKey && block._key === endBlockKey) {\n      startBlock = block;\n      break;\n    }\n    if (block._key === startBlockKey) {\n      if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        startBlock = block;\n        continue;\n      }\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if ((0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n              const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n              startBlock = {\n                ...block,\n                children: [{\n                  ...child,\n                  text\n                }]\n              };\n            } else\n              startBlock = {\n                ...block,\n                children: [child]\n              };\n            if (startChildKey === endChildKey)\n              break;\n            continue;\n          }\n          if (startBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(startBlock) && (endChildKey && child._key === endChildKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child) ? startBlock.children.push({\n            ...child,\n            text: child.text.slice(0, endPoint.offset)\n          }) : startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey))\n            break;\n        }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (startBlock = block, startBlockKey === endBlockKey)\n        break;\n    }\n    if (block._key === endBlockKey) {\n      if (!(0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(block)) {\n        endBlock = block;\n        break;\n      }\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: []\n        };\n        for (const child of block.children)\n          if (endBlock && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextTextBlock)(endBlock)) {\n            if (child._key === endChildKey && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_0__.isPortableTextSpan)(child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset)\n              });\n              break;\n            }\n            if (endBlock.children.push(child), endChildKey && child._key === endChildKey)\n              break;\n          }\n        break;\n      }\n      endBlock = block;\n      break;\n    }\n    startBlock && middleBlocks.push(block);\n  }\n  return [...startBlock ? [startBlock] : [], ...middleBlocks, ...endBlock ? [endBlock] : []];\n}\n\n//# sourceMappingURL=util.slice-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.defineSchema),\n/* harmony export */   keyGenerator: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.useEditor),\n/* harmony export */   useEditorSelector: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* reexport safe */ _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_chunks-es/editor-provider.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/./node_modules/lodash/noop.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! slate-react */ \"(ssr)/./node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var _chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./_chunks-es/selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./_chunks-es/util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_selector_get_focus_inline_object_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_chunks-es/selector.get-focus-inline-object.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! slate-dom */ \"(ssr)/./node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./_chunks-es/util.is-selection-collapsed.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\");\n/* harmony import */ var _chunks_es_parse_blocks_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./_chunks-es/parse-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var _chunks_es_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./_chunks-es/util.get-selection-start-point.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.get-selection-start-point.js\");\n/* harmony import */ var _chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_chunks-es/selector.is-selecting-entire-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/./node_modules/lodash/uniq.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/raise-1db27a82.development.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.useEditor)(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_7__.useEffectEvent)(props.on);\n  let t0;\n  $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];\n  let t1;\n  return $[3] !== editor ? (t1 = [editor], $[3] = editor, $[4] = t1) : t1 = $[4], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction getCompoundClientRect(nodes) {\n  if (nodes.length === 0)\n    return new DOMRect(0, 0, 0, 0);\n  const elements = nodes.filter((node) => node instanceof Element), firstRect = elements.at(0)?.getBoundingClientRect();\n  if (!firstRect)\n    return new DOMRect(0, 0, 0, 0);\n  let left = firstRect.left, top = firstRect.top, right = firstRect.right, bottom = firstRect.bottom;\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect();\n    left = Math.min(left, rect.left), top = Math.min(top, rect.top), right = Math.max(right, rect.right), bottom = Math.max(bottom, rect.bottom);\n  }\n  return new DOMRect(left, top, right - left, bottom - top);\n}\nfunction getDragSelection({\n  eventSelection,\n  snapshot\n}) {\n  let dragSelection = eventSelection;\n  if ((0,_chunks_es_selector_get_focus_inline_object_js__WEBPACK_IMPORTED_MODULE_8__.getFocusInlineObject)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }))\n    return dragSelection;\n  const draggingCollapsedSelection = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedTextBlock = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getFocusTextBlock)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedSpan = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getFocusSpan)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  });\n  draggingCollapsedSelection && draggedTextBlock && draggedSpan && (dragSelection = {\n    anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockStartPoint)(draggedTextBlock),\n    focus: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockEndPoint)(draggedTextBlock)\n  });\n  const selectedBlocks = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getSelectedBlocks)(snapshot);\n  if (snapshot.context.selection && (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.isSelectionExpanded)(snapshot) && selectedBlocks.length > 1) {\n    const selectionStartBlock = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return dragSelection;\n    const selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockStartPoint)(selectionStartBlock), selectionEndPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockEndPoint)(selectionEndBlock);\n    (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.isOverlappingSelection)(eventSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }) && (dragSelection = {\n      anchor: selectionStartPoint,\n      focus: selectionEndPoint\n    });\n  }\n  return dragSelection;\n}\nfunction getEventPosition({\n  editorActor,\n  slateEditor,\n  event\n}) {\n  if (editorActor.getSnapshot().matches({\n    setup: \"setting up\"\n  }))\n    return;\n  const node = getEventNode({\n    slateEditor,\n    event\n  });\n  if (!node)\n    return;\n  const block = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.getNodeBlock)({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node\n  }), positionBlock = getEventPositionBlock({\n    node,\n    slateEditor,\n    event\n  }), selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event\n  });\n  if (block && positionBlock && !selection && !slate__WEBPACK_IMPORTED_MODULE_11__.Editor.isEditor(node))\n    return {\n      block: positionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockStartPoint)({\n          node: block,\n          path: [{\n            _key: block._key\n          }]\n        }),\n        focus: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockEndPoint)({\n          node: block,\n          path: [{\n            _key: block._key\n          }]\n        })\n      }\n    };\n  if (!positionBlock || !selection)\n    return;\n  const focusBlockPath = selection.focus.path.at(0), focusBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.isKeyedSegment)(focusBlockPath) ? focusBlockPath._key : void 0;\n  if (focusBlockKey)\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_12__.isSelectionCollapsed)(selection) && block && focusBlockKey !== block._key ? {\n      block: positionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockStartPoint)({\n          node: block,\n          path: [{\n            _key: block._key\n          }]\n        }),\n        focus: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_10__.getBlockEndPoint)({\n          node: block,\n          path: [{\n            _key: block._key\n          }]\n        })\n      }\n    } : {\n      block: positionBlock,\n      isEditor: slate__WEBPACK_IMPORTED_MODULE_11__.Editor.isEditor(node),\n      selection\n    };\n}\nfunction getEventNode({\n  slateEditor,\n  event\n}) {\n  return slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.hasTarget(slateEditor, event.target) ? slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toSlateNode(slateEditor, event.target) : void 0;\n}\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event\n}) {\n  const [firstBlock] = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.getFirstBlock)({\n    editor: slateEditor\n  });\n  if (!firstBlock)\n    return;\n  const firstBlockRect = slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toDOMNode(slateEditor, firstBlock).getBoundingClientRect();\n  if (event.pageY < firstBlockRect.top)\n    return \"start\";\n  const [lastBlock] = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.getLastBlock)({\n    editor: slateEditor\n  });\n  if (!lastBlock)\n    return;\n  const lastBlockRef = slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toDOMNode(slateEditor, lastBlock).getBoundingClientRect();\n  if (event.pageY > lastBlockRef.bottom)\n    return \"end\";\n  const elementRect = slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toDOMNode(slateEditor, node).getBoundingClientRect(), top = elementRect.top, height = elementRect.height;\n  return Math.abs(top - event.pageY) < height / 2 ? \"start\" : \"end\";\n}\nfunction getEventSelection({\n  schema,\n  slateEditor,\n  event\n}) {\n  const range = getSlateRangeFromEvent(slateEditor, event);\n  return range ? (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.slateRangeToSelection)({\n    schema,\n    editor: slateEditor,\n    range\n  }) : null;\n}\nfunction getSlateRangeFromEvent(editor, event) {\n  if (!event.target || !(0,slate_dom__WEBPACK_IMPORTED_MODULE_13__.isDOMNode)(event.target))\n    return;\n  const window2 = slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.getWindow(editor);\n  let domRange;\n  if (window2.document.caretPositionFromPoint !== void 0) {\n    const position = window2.document.caretPositionFromPoint(event.clientX, event.clientY);\n    if (position)\n      try {\n        domRange = window2.document.createRange(), domRange.setStart(position.offsetNode, position.offset), domRange.setEnd(position.offsetNode, position.offset);\n      } catch {\n      }\n  } else if (window2.document.caretRangeFromPoint !== void 0)\n    domRange = window2.document.caretRangeFromPoint(event.clientX, event.clientY) ?? void 0;\n  else {\n    console.warn(\"Neither caretPositionFromPoint nor caretRangeFromPoint is supported\");\n    return;\n  }\n  if (!domRange)\n    return;\n  let range;\n  try {\n    range = slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: !1,\n      // It can still throw even with this option set to true\n      suppressThrow: !1\n    });\n  } catch {\n  }\n  return range;\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nfunction getSelectionDomNodes({\n  slateEditor,\n  snapshot\n}) {\n  if (!snapshot.context.selection)\n    return {\n      blockNodes: [],\n      childNodes: []\n    };\n  const range = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(snapshot.context.selection, slateEditor);\n  if (!range)\n    return {\n      blockNodes: [],\n      childNodes: []\n    };\n  const blockEntries = Array.from(slate__WEBPACK_IMPORTED_MODULE_11__.Editor.nodes(slateEditor, {\n    at: range,\n    mode: \"highest\",\n    match: (n) => !slate__WEBPACK_IMPORTED_MODULE_11__.Editor.isEditor(n)\n  })), childEntries = Array.from(slate__WEBPACK_IMPORTED_MODULE_11__.Editor.nodes(slateEditor, {\n    at: range,\n    mode: \"lowest\",\n    match: (n) => !slate__WEBPACK_IMPORTED_MODULE_11__.Editor.isEditor(n) && slateEditor.isTextSpan(n) || !slateEditor.isBlock(n)\n  }));\n  return {\n    blockNodes: blockEntries.map(([blockNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toDOMNode(slateEditor, blockNode)),\n    childNodes: childEntries.map(([childNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_13__.DOMEditor.toDOMNode(slateEditor, childNode))\n  };\n}\nfunction DefaultBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction DefaultInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { style: t0, children: [\n    \"[\",\n    props.value._type,\n    \": \",\n    props.value._key,\n    \"]\"\n  ] }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction DropIndicator() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { contentEditable: !1, className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  }, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {}) }), $[0] = t0) : t0 = $[0], t0;\n}\n(0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"components:Element\");\nconst EMPTY_ANNOTATIONS = [], inlineBlockStyle = {\n  display: \"inline-block\"\n}, Element$1 = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck\n}) => {\n  const editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.EditorActorContext), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_14__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_14__.useSelected)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), inlineBlockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), focused = selected && slateEditor.selection && slate__WEBPACK_IMPORTED_MODULE_11__.Range.isCollapsed(slateEditor.selection) || !1, [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const behavior = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__.defineBehavior)({\n      on: \"drag.dragover\",\n      guard: ({\n        snapshot,\n        event\n      }) => {\n        const dropFocusBlock = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getFocusBlock)({\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection\n          }\n        });\n        if (!dropFocusBlock || dropFocusBlock.node._key !== element._key)\n          return !1;\n        const dragOrigin = snapshot.beta.internalDrag?.origin;\n        return !dragOrigin || (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_9__.getSelectedBlocks)({\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection\n          }\n        }).some((draggedBlock) => draggedBlock.node._key === element._key) ? !1 : (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_16__.isSelectingEntireBlocks)({\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection\n          }\n        });\n      },\n      actions: [({\n        event: event_0\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          setDragPositionBlock(event_0.position.block);\n        }\n      }]]\n    });\n    return editorActor.send({\n      type: \"add behavior\",\n      behavior\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior\n      });\n    };\n  }, [editorActor, element._key]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const behavior_0 = (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__.defineBehavior)({\n      on: \"drag.*\",\n      guard: ({\n        event: event_1\n      }) => event_1.type !== \"drag.dragover\",\n      actions: [({\n        event: event_2\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          setDragPositionBlock(void 0);\n        }\n      }, (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__.forward)(event_2)]]\n    });\n    return editorActor.send({\n      type: \"add behavior\",\n      behavior: behavior_0\n    }), () => {\n      editorActor.send({\n        type: \"remove behavior\",\n        behavior: behavior_0\n      });\n    };\n  }, [editorActor]);\n  const value = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)([element], schemaTypes.block.name, _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.KEY_TO_VALUE_ELEMENT.get(slateEditor))[0], [slateEditor, element, schemaTypes.block.name]);\n  let renderedBlock = children, className;\n  const blockPath = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => [{\n    _key: element._key\n  }], [element]);\n  if (typeof element._type != \"string\")\n    throw new Error(\"Expected element to have a _type property\");\n  if (typeof element._key != \"string\")\n    throw new Error(\"Expected element to have a _key property\");\n  if (slateEditor.isInline(element)) {\n    const path = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.findPath(slateEditor, element), [block] = slate__WEBPACK_IMPORTED_MODULE_11__.Editor.node(slateEditor, path, {\n      depth: 1\n    }), schemaType = schemaTypes.inlineObjects.find((_type) => _type.name === element._type);\n    if (!schemaType)\n      throw new Error(\"Could not find type for inline block element\");\n    if (slate__WEBPACK_IMPORTED_MODULE_11__.Element.isElement(block)) {\n      const elmPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: element._key\n      }];\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { ...attributes, children: [\n        children,\n        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { draggable: !readOnly, className: \"pt-inline-object\", \"data-testid\": \"pt-inline-object\", ref: inlineBlockObjectRef, style: inlineBlockStyle, contentEditable: !1, children: [\n          renderChild && renderChild({\n            annotations: EMPTY_ANNOTATIONS,\n            // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultInlineObject, { value }),\n            editorElementRef: inlineBlockObjectRef,\n            focused,\n            path: elmPath,\n            schemaType,\n            selected,\n            type: schemaType,\n            value\n          }),\n          !renderChild && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultInlineObject, { value })\n        ] }, element._key)\n      ] });\n    }\n    throw new Error(\"Block not found!\");\n  }\n  if (element._type === schemaTypes.block.name) {\n    className = \"pt-block pt-text-block\";\n    const isListItem = \"listItem\" in element, style = \"style\" in element && element.style || \"normal\";\n    className = `pt-block pt-text-block pt-text-block-style-${style}`;\n    const blockStyleType = schemaTypes.styles.find((item) => item.value === style);\n    renderStyle && blockStyleType && (renderedBlock = renderStyle({\n      block: element,\n      children,\n      focused,\n      selected,\n      value: style,\n      path: blockPath,\n      schemaType: blockStyleType,\n      editorElementRef: blockRef\n    }));\n    let level;\n    if (isListItem && (typeof element.level == \"number\" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), slateEditor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find((item_0) => item_0.value === element.listItem);\n      renderListItem && listType && (renderedBlock = renderListItem({\n        block: value,\n        children: renderedBlock,\n        focused,\n        selected,\n        value: element.listItem,\n        path: blockPath,\n        schemaType: listType,\n        level: value.level || 1,\n        editorElementRef: blockRef\n      }));\n    }\n    const renderProps = Object.defineProperty({\n      children: renderedBlock,\n      editorElementRef: blockRef,\n      focused,\n      level,\n      listItem: isListItem ? element.listItem : void 0,\n      path: blockPath,\n      selected,\n      style,\n      schemaType: schemaTypes.block,\n      value\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.block;\n      }\n    }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...attributes, className, spellCheck, children: [\n      dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockRef, children: propsOrDefaultRendered }),\n      dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n    ] }, element._key);\n  }\n  const schemaType_0 = schemaTypes.blockObjects.find((_type_0) => _type_0.name === element._type);\n  if (!schemaType_0)\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`);\n  className = \"pt-block pt-object-block\";\n  const block_0 = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)([element], schemaTypes.block.name, _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.KEY_TO_VALUE_ELEMENT.get(slateEditor))[0];\n  let renderedBlockFromProps;\n  if (renderBlock) {\n    const _props = Object.defineProperty({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultBlockObject, { value }),\n      editorElementRef: blockRef,\n      focused,\n      path: blockPath,\n      schemaType: schemaType_0,\n      selected,\n      value: block_0\n    }, \"type\", {\n      enumerable: !1,\n      get() {\n        return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n      }\n    });\n    renderedBlockFromProps = renderBlock(_props);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...attributes, className, children: [\n    dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n    children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockRef, contentEditable: !1, draggable: !readOnly, children: renderedBlockFromProps || /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultBlockObject, { value }) }),\n    dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n  ] }, element._key);\n};\nElement$1.displayName = \"Element\";\nconst debug$2 = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"components:Leaf\"), EMPTY_MARKS = [], Leaf = (props) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation\n  } = props, spanRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), portableTextEditor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor)(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_14__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), block = children.props.parent, path = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => block ? [{\n    _key: block?._key\n  }, \"children\", {\n    _key: leaf._key\n  }] : [], [block, leaf._key]), decoratorValues = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => schemaTypes.decorators.map((dec) => dec.value), [schemaTypes.decorators]), marks = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => lodash_uniq_js__WEBPACK_IMPORTED_MODULE_5__((leaf.marks || EMPTY_MARKS).filter((mark) => decoratorValues.includes(mark))), [decoratorValues, leaf.marks]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => annotationMarks.map((mark_0) => !decoratorValues.includes(mark_0) && block?.markDefs?.find((def) => def._key === mark_0)).filter(Boolean), [annotationMarks, block, decoratorValues]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(sel.focus.path, path) && _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    debug$2(\"Setting selection and focus from range\");\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blurred\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focused\", () => {\n      const sel_0 = _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(sel_0.focus.path, path) && _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(event.selection.focus.path, path) && _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  const content = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    let returnedChildren = children;\n    if (slate__WEBPACK_IMPORTED_MODULE_11__.Text.isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1) => {\n      const schemaType = schemaTypes.decorators.find((dec_0) => dec_0.value === mark_1);\n      if (schemaType && renderDecorator) {\n        const _props = Object.defineProperty({\n          children: returnedChildren,\n          editorElementRef: spanRef,\n          focused,\n          path,\n          selected,\n          schemaType,\n          value: mark_1\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType;\n          }\n        });\n        returnedChildren = renderDecorator(_props);\n      }\n    }), block && annotations.length > 0 && annotations.forEach((annotation) => {\n      const schemaType_0 = schemaTypes.annotations.find((t) => t.name === annotation._type);\n      if (schemaType_0)\n        if (renderAnnotation) {\n          const _props_0 = Object.defineProperty({\n            block,\n            children: returnedChildren,\n            editorElementRef: spanRef,\n            focused,\n            path,\n            selected,\n            schemaType: schemaType_0,\n            value: annotation\n          }, \"type\", {\n            enumerable: !1,\n            get() {\n              return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaType_0;\n            }\n          });\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children: renderAnnotation(_props_0) });\n        } else\n          returnedChildren = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children: returnedChildren });\n    }), block && renderChild)) {\n      const child = block.children.find((_child) => _child._key === leaf._key);\n      if (child) {\n        const _props_1 = Object.defineProperty({\n          annotations,\n          children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: returnedChildren }),\n          editorElementRef: spanRef,\n          focused,\n          path,\n          schemaType: schemaTypes.span,\n          selected,\n          value: child\n        }, \"type\", {\n          enumerable: !1,\n          get() {\n            return console.warn(\"Property 'type' is deprecated, use 'schemaType' instead.\"), schemaTypes.span;\n          }\n        });\n        returnedChildren = renderChild(_props_1);\n      }\n    }\n    return returnedChildren;\n  }, [annotations, block, children, focused, leaf, marks, path, renderAnnotation, renderChild, renderDecorator, schemaTypes.annotations, schemaTypes.decorators, schemaTypes.span, selected]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...attributes, ref: spanRef, children: content }, leaf._key), [leaf, attributes, content]);\n};\nLeaf.displayName = \"Leaf\";\nconst debug$1 = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__.isHotkey)(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$1(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if ((0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_15__.isHotkey)(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nconst slateOperationCallback = ({\n  input,\n  sendBack\n}) => {\n  const originalApply = input.slateEditor.apply;\n  return input.slateEditor.apply = (op) => {\n    op.type !== \"set_selection\" && sendBack({\n      type: \"slate operation\",\n      operation: op\n    }), originalApply(op);\n  }, () => {\n    input.slateEditor.apply = originalApply;\n  };\n}, rangeDecorationsMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_17__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actions: {\n    \"update pending range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      pendingRangeDecorations: ({\n        context,\n        event\n      }) => event.type !== \"range decorations updated\" ? context.pendingRangeDecorations : event.rangeDecorations\n    }),\n    \"set up initial range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      decoratedRanges: ({\n        context\n      }) => {\n        const rangeDecorationState = [];\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(rangeDecoration.selection, context.slateEditor);\n          if (!slate__WEBPACK_IMPORTED_MODULE_11__.Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: \"local\"\n            });\n            continue;\n          }\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange\n          });\n        }\n        return rangeDecorationState;\n      }\n    }),\n    \"update range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      decoratedRanges: ({\n        context,\n        event\n      }) => {\n        if (event.type !== \"range decorations updated\")\n          return context.decoratedRanges;\n        const rangeDecorationState = [];\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(rangeDecoration.selection, context.slateEditor);\n          if (!slate__WEBPACK_IMPORTED_MODULE_11__.Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: \"local\"\n            });\n            continue;\n          }\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange\n          });\n        }\n        return rangeDecorationState;\n      }\n    }),\n    \"move range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      decoratedRanges: ({\n        context,\n        event\n      }) => {\n        if (event.type !== \"slate operation\")\n          return context.decoratedRanges;\n        const rangeDecorationState = [];\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(decoratedRange.rangeDecoration.selection, context.slateEditor);\n          if (!slate__WEBPACK_IMPORTED_MODULE_11__.Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: \"local\"\n            });\n            continue;\n          }\n          let newRange;\n          if (newRange = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.moveRangeByOperation)(slateRange, event.operation), newRange && newRange !== slateRange || newRange === null && slateRange) {\n            const newRangeSelection = newRange ? (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.slateRangeToSelection)({\n              schema: context.schema,\n              editor: context.slateEditor,\n              range: newRange\n            }) : null;\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: \"local\"\n            });\n          }\n          newRange !== null && rangeDecorationState.push({\n            ...newRange || slateRange,\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.slateRangeToSelection)({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange\n              })\n            }\n          });\n        }\n        return rangeDecorationState;\n      }\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type !== \"update read only\" ? context.readOnly : event.readOnly\n    }),\n    \"increment update count\": (0,xstate__WEBPACK_IMPORTED_MODULE_18__.a)({\n      updateCount: ({\n        context\n      }) => context.updateCount + 1\n    })\n  },\n  actors: {\n    \"slate operation listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_19__.fromCallback)(slateOperationCallback)\n  },\n  guards: {\n    \"has pending range decorations\": ({\n      context\n    }) => context.pendingRangeDecorations.length > 0,\n    \"has range decorations\": ({\n      context\n    }) => context.decoratedRanges.length > 0,\n    \"has different decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return !1;\n      const existingRangeDecorations = context.decoratedRanges.map((decoratedRange) => ({\n        anchor: decoratedRange.rangeDecoration.selection?.anchor,\n        focus: decoratedRange.rangeDecoration.selection?.focus\n      })), newRangeDecorations = event.rangeDecorations.map((rangeDecoration) => ({\n        anchor: rangeDecoration.selection?.anchor,\n        focus: rangeDecoration.selection?.focus\n      }));\n      return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_4__(existingRangeDecorations, newRangeDecorations);\n    },\n    \"not read only\": ({\n      context\n    }) => !context.readOnly,\n    \"should skip setup\": ({\n      context\n    }) => context.skipSetup\n  }\n}).createMachine({\n  id: \"range decorations\",\n  context: ({\n    input\n  }) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0\n  }),\n  invoke: {\n    src: \"slate operation listener\",\n    input: ({\n      context\n    }) => ({\n      slateEditor: context.slateEditor\n    })\n  },\n  on: {\n    \"update read only\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"setting up\",\n  states: {\n    \"setting up\": {\n      always: [{\n        guard: (0,xstate__WEBPACK_IMPORTED_MODULE_20__.D)([\"should skip setup\", \"has pending range decorations\"]),\n        target: \"ready\",\n        actions: [\"set up initial range decorations\", \"increment update count\"]\n      }, {\n        guard: \"should skip setup\",\n        target: \"ready\"\n      }],\n      on: {\n        \"range decorations updated\": {\n          actions: [\"update pending range decorations\"]\n        },\n        ready: [{\n          target: \"ready\",\n          guard: \"has pending range decorations\",\n          actions: [\"set up initial range decorations\", \"increment update count\"]\n        }, {\n          target: \"ready\"\n        }]\n      }\n    },\n    ready: {\n      initial: \"idle\",\n      on: {\n        \"range decorations updated\": {\n          target: \".idle\",\n          guard: \"has different decorations\",\n          actions: [\"update range decorations\", \"increment update count\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"slate operation\": {\n              target: \"moving range decorations\",\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_20__.D)([\"has range decorations\", \"not read only\"])\n            }\n          }\n        },\n        \"moving range decorations\": {\n          entry: [\"move range decorations\"],\n          always: {\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }\n});\nfunction createDecorate(rangeDecorationActor) {\n  return function([node, path]) {\n    if ((0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.isEqualToEmptyEditor)(rangeDecorationActor.getSnapshot().context.slateEditor.children, rangeDecorationActor.getSnapshot().context.schema))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path.length === 0)\n      return [];\n    if (!slate__WEBPACK_IMPORTED_MODULE_11__.Element.isElement(node) || node.children.length === 0)\n      return [];\n    const blockIndex = path.at(0);\n    return blockIndex === void 0 ? [] : rangeDecorationActor.getSnapshot().context.decoratedRanges.filter((decoratedRange) => slate__WEBPACK_IMPORTED_MODULE_11__.Range.isCollapsed(decoratedRange) ? node.children.some((_, childIndex) => slate__WEBPACK_IMPORTED_MODULE_11__.Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) && slate__WEBPACK_IMPORTED_MODULE_11__.Path.equals(decoratedRange.focus.path, [blockIndex, childIndex])) : slate__WEBPACK_IMPORTED_MODULE_11__.Range.intersection(decoratedRange, {\n      anchor: {\n        path,\n        offset: 0\n      },\n      focus: {\n        path,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_11__.Range.includes(decoratedRange, path));\n  };\n}\nconst debug = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.debugWithName)(\"component:Editable\"), PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n}, PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.usePortableTextEditor)(), ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.EditorActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_14__.useSlate)(), rangeDecorationsActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useActorRef)(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      })\n    }\n  });\n  (0,_xstate_react__WEBPACK_IMPORTED_MODULE_21__.useSelector)(rangeDecorationsActor, (s_0) => s_0.context.updateCount);\n  const decorate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => createDecorate(rangeDecorationsActor), [rangeDecorationsActor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"update read only\",\n      readOnly\n    });\n  }, [rangeDecorationsActor, readOnly]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"range decorations updated\",\n      rangeDecorations: rangeDecorations ?? []\n    });\n  }, [rangeDecorationsActor, rangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (readOnly)\n      return debug(\"Editable is in read only mode\"), slateEditor;\n    const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);\n    return debug(\"Editable is in edit mode\"), withHotKeys(slateEditor);\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Element$1, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, schemaTypes: portableTextEditor.schemaTypes, spellCheck }), [portableTextEditor, spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((lProps) => {\n    if (lProps.leaf._type === \"span\") {\n      let rendered = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Leaf, { ...lProps, editorActor, schemaTypes: portableTextEditor.schemaTypes, renderAnnotation, renderChild, renderDecorator, readOnly });\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === \"\")\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: renderPlaceholder() }),\n          rendered\n        ] });\n      const decoration = lProps.leaf.rangeDecoration;\n      return decoration && (rendered = decoration.component({\n        children: rendered\n      })), rendered;\n    }\n    return lProps.children;\n  }, [editorActor, portableTextEditor, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder]), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)(slateEditor.children, editorActor.getSnapshot().context.schema.block.name));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.toSlateRange)(normalizedSelection, slateEditor);\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_11__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"notify.selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      rangeDecorationsActor.send({\n        type: \"ready\"\n      }), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event) => {\n    if (onCopy)\n      onCopy(event) !== void 0 && event.preventDefault();\n    else if (event.nativeEvent.clipboardData) {\n      event.stopPropagation(), event.preventDefault();\n      const selection = slateEditor.selection ? (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.slateRangeToSelection)({\n        schema: editorActor.getSnapshot().context.schema,\n        editor: slateEditor,\n        range: slateEditor.selection\n      }) : void 0, position = selection ? {\n        selection\n      } : void 0;\n      if (!position) {\n        console.warn(\"Could not find position for copy event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.copy\",\n          originEvent: {\n            dataTransfer: event.nativeEvent.clipboardData\n          },\n          position\n        },\n        editor: slateEditor,\n        nativeEvent: event\n      });\n    }\n  }, [onCopy, editorActor, slateEditor]), handleCut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_0) => {\n    if (onCut)\n      onCut(event_0) !== void 0 && event_0.preventDefault();\n    else if (event_0.nativeEvent.clipboardData) {\n      event_0.stopPropagation(), event_0.preventDefault();\n      const selection_0 = editorActor.getSnapshot().context.selection, position_0 = selection_0 ? {\n        selection: selection_0\n      } : void 0;\n      if (!position_0) {\n        console.warn(\"Could not find position for cut event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.cut\",\n          originEvent: {\n            dataTransfer: event_0.nativeEvent.clipboardData\n          },\n          position: position_0\n        },\n        editor: slateEditor,\n        nativeEvent: event_0\n      });\n    }\n  }, [onCut, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_1) => {\n    const value = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.fromSlateValue)(slateEditor.children, editorActor.getSnapshot().context.schema.block.name, _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.KEY_TO_VALUE_ELEMENT.get(slateEditor)), path = (slateEditor.selection ? (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.slateRangeToSelection)({\n      schema: editorActor.getSnapshot().context.schema,\n      editor: slateEditor,\n      range: slateEditor.selection\n    }) : null)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_1,\n      value,\n      path,\n      schemaTypes: portableTextEditor.schemaTypes\n    });\n    if (onPasteResult || !slateEditor.selection)\n      event_1.preventDefault(), editorActor.send({\n        type: \"notify.loading\"\n      }), Promise.resolve(onPasteResult).then((result_1) => {\n        if (debug(\"Custom paste function from client resolved\", result_1), !result_1 || !result_1.insert) {\n          debug(\"No result from custom paste handler, pasting normally\");\n          const selection_1 = editorActor.getSnapshot().context.selection, position_1 = selection_1 ? {\n            selection: selection_1\n          } : void 0;\n          if (!position_1) {\n            console.warn(\"Could not find position for paste event\");\n            return;\n          }\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"clipboard.paste\",\n              originEvent: {\n                dataTransfer: event_1.clipboardData\n              },\n              position: position_1\n            },\n            editor: slateEditor,\n            nativeEvent: event_1\n          });\n        } else result_1.insert ? editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.blocks\",\n            blocks: (0,_chunks_es_parse_blocks_js__WEBPACK_IMPORTED_MODULE_22__.parseBlocks)({\n              context: {\n                keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n                schema: editorActor.getSnapshot().context.schema\n              },\n              blocks: result_1.insert,\n              options: {\n                refreshKeys: !0\n              }\n            }),\n            placement: \"auto\"\n          },\n          editor: slateEditor\n        }) : console.warn(\"Your onPaste function returned something unexpected:\", result_1);\n      }).catch((error) => (console.warn(error), error)).finally(() => {\n        editorActor.send({\n          type: \"notify.done loading\"\n        });\n      });\n    else if (event_1.nativeEvent.clipboardData) {\n      event_1.preventDefault(), event_1.stopPropagation();\n      const selection_2 = editorActor.getSnapshot().context.selection, position_2 = selection_2 ? {\n        selection: selection_2\n      } : void 0;\n      if (!position_2) {\n        console.warn(\"Could not find position for paste event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.paste\",\n          originEvent: {\n            dataTransfer: event_1.nativeEvent.clipboardData\n          },\n          position: position_2\n        },\n        editor: slateEditor,\n        nativeEvent: event_1\n      });\n    }\n    debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_2) => {\n    if (onFocus && onFocus(event_2), !event_2.isDefaultPrevented()) {\n      const selection_3 = _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      selection_3 === null && (slate__WEBPACK_IMPORTED_MODULE_11__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_11__.Editor.start(slateEditor, [])), slateEditor.onChange()), editorActor.send({\n        type: \"notify.focused\",\n        event: event_2\n      });\n      const newSelection = _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.PortableTextEditor.getSelection(portableTextEditor);\n      selection_3 === newSelection && editorActor.send({\n        type: \"notify.selection\",\n        selection: selection_3\n      });\n    }\n  }, [editorActor, onFocus, slateEditor, portableTextEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_3) => {\n    if (onClick && onClick(event_3), event_3.isDefaultPrevented() || event_3.isPropagationStopped())\n      return;\n    const position_3 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_3.nativeEvent\n    });\n    position_3 && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"mouse.click\",\n        position: position_3\n      },\n      editor: slateEditor,\n      nativeEvent: event_3\n    });\n  }, [onClick, editorActor, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_4) => {\n    onBlur && onBlur(event_4), event_4.isPropagationStopped() || editorActor.send({\n      type: \"notify.blurred\",\n      event: event_4\n    });\n  }, [editorActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_5) => {\n    onBeforeInput && onBeforeInput(event_5);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_11__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_11__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_6) => {\n    props.onKeyDown && props.onKeyDown(event_6), event_6.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keydown\",\n        originEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_7) => {\n    props.onKeyUp && props.onKeyUp(event_7), event_7.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keyup\",\n        originEvent: {\n          key: event_7.key,\n          code: event_7.code,\n          altKey: event_7.altKey,\n          ctrlKey: event_7.ctrlKey,\n          metaKey: event_7.metaKey,\n          shiftKey: event_7.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_7\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const window_0 = slate_react__WEBPACK_IMPORTED_MODULE_14__.ReactEditor.getWindow(slateEditor), onDragEnd_0 = () => {\n      editorActor.send({\n        type: \"dragend\"\n      });\n    }, onDrop_0 = () => {\n      editorActor.send({\n        type: \"drop\"\n      });\n    };\n    return window_0.document.addEventListener(\"dragend\", onDragEnd_0), window_0.document.addEventListener(\"drop\", onDrop_0), () => {\n      window_0.document.removeEventListener(\"dragend\", onDragEnd_0), window_0.document.removeEventListener(\"drop\", onDrop_0);\n    };\n  }, [slateEditor, editorActor]);\n  const handleDragStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_8) => {\n    if (onDragStart?.(event_8), event_8.isDefaultPrevented() || event_8.isPropagationStopped())\n      return;\n    const position_4 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_8.nativeEvent\n    });\n    if (!position_4) {\n      console.warn(\"Could not find position for dragstart event\");\n      return;\n    }\n    const snapshot = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_6__.getEditorSnapshot)({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor\n    }), dragSelection = getDragSelection({\n      eventSelection: position_4.selection,\n      snapshot\n    }), selectingEntireBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_16__.isSelectingEntireBlocks)({\n      context: {\n        ...snapshot.context,\n        selection: dragSelection\n      }\n    }), dragGhost = document.createElement(\"div\"), draggedDomNodes = getSelectionDomNodes({\n      snapshot: {\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      },\n      slateEditor\n    });\n    if (selectingEntireBlocks) {\n      const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) => node.cloneNode(!0));\n      for (const block of clonedBlockNodes)\n        block instanceof HTMLElement && (block.style.position = \"relative\"), dragGhost.appendChild(block);\n      const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n      if (customGhost && dragGhost.replaceChildren(customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost), customGhost) {\n        const customGhostRect = customGhost.getBoundingClientRect(), x = event_8.clientX - customGhostRect.left, y = event_8.clientY - customGhostRect.top;\n        dragGhost.style.width = `${customGhostRect.width}px`, dragGhost.style.height = `${customGhostRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x, y);\n      } else {\n        const blocksDomRect = getCompoundClientRect(draggedDomNodes.blockNodes), x_0 = event_8.clientX - blocksDomRect.left, y_0 = event_8.clientY - blocksDomRect.top;\n        dragGhost.style.width = `${blocksDomRect.width}px`, dragGhost.style.height = `${blocksDomRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x_0, y_0);\n      }\n    } else {\n      const clonedChildNodes = draggedDomNodes.childNodes.map((node_0) => node_0.cloneNode(!0));\n      for (const child of clonedChildNodes)\n        dragGhost.appendChild(child);\n      dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n      const childrenDomRect = getCompoundClientRect(draggedDomNodes.childNodes), x_1 = event_8.clientX - childrenDomRect.left, y_1 = event_8.clientY - childrenDomRect.top;\n      dragGhost.style.width = `${childrenDomRect.width}px`, dragGhost.style.height = `${childrenDomRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x_1, y_1);\n    }\n    return editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"select\",\n        at: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_12__.isSelectionCollapsed)(dragSelection) ? dragSelection : {\n          anchor: (0,_chunks_es_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_23__.getSelectionEndPoint)(dragSelection),\n          focus: (0,_chunks_es_util_get_selection_start_point_js__WEBPACK_IMPORTED_MODULE_23__.getSelectionEndPoint)(dragSelection),\n          backward: !1\n        }\n      },\n      editor: slateEditor\n    }), editorActor.send({\n      type: \"dragstart\",\n      origin: {\n        selection: dragSelection\n      },\n      ghost: dragGhost\n    }), editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.dragstart\",\n        originEvent: {\n          dataTransfer: event_8.dataTransfer\n        },\n        position: {\n          selection: dragSelection\n        }\n      },\n      editor: slateEditor\n    }), !0;\n  }, [onDragStart, editorActor, slateEditor]), handleDrag = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_9) => {\n    if (onDrag?.(event_9), !(event_9.isDefaultPrevented() || event_9.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_9.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.drag\",\n          originEvent: {\n            dataTransfer: event_9.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDrag, editorActor, slateEditor]), handleDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_10) => {\n    if (onDragEnd?.(event_10), !(event_10.isDefaultPrevented() || event_10.isPropagationStopped()))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragend\",\n          originEvent: {\n            dataTransfer: event_10.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnd, editorActor, slateEditor]), handleDragEnter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_11) => {\n    if (onDragEnter?.(event_11), event_11.isDefaultPrevented() || event_11.isPropagationStopped())\n      return;\n    const position_6 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_11.nativeEvent\n    });\n    if (position_6)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragenter\",\n          originEvent: {\n            dataTransfer: event_11.dataTransfer\n          },\n          position: position_6\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnter, editorActor, slateEditor]), handleDragOver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_12) => {\n    if (onDragOver?.(event_12), event_12.isDefaultPrevented() || event_12.isPropagationStopped())\n      return;\n    const position_7 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_12.nativeEvent\n    });\n    if (position_7)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragover\",\n          originEvent: {\n            dataTransfer: event_12.dataTransfer\n          },\n          position: position_7\n        },\n        editor: slateEditor,\n        nativeEvent: event_12\n      }), !0;\n  }, [onDragOver, editorActor, slateEditor]), handleDrop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_13) => {\n    if (onDrop?.(event_13), event_13.isDefaultPrevented() || event_13.isPropagationStopped())\n      return;\n    const position_8 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_13.nativeEvent\n    });\n    if (!position_8) {\n      console.warn(\"Could not find position for drop event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.drop\",\n        originEvent: {\n          dataTransfer: event_13.dataTransfer\n        },\n        position: position_8\n      },\n      editor: slateEditor,\n      nativeEvent: event_13\n    }), !0;\n  }, [onDrop, editorActor, slateEditor]), handleDragLeave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_14) => {\n    if (onDragLeave?.(event_14), !(event_14.isDefaultPrevented() || event_14.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_14.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragleave\",\n          originEvent: {\n            dataTransfer: event_14.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragLeave, editorActor, slateEditor]);\n  return portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_14__.Editable,\n    {\n      ...restProps,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onCut: handleCut,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onDragStart: handleDragStart,\n      onDrag: handleDrag,\n      onDragEnd: handleDragEnd,\n      onDragEnter: handleDragEnter,\n      onDragOver: handleDragOver,\n      onDrop: handleDrop,\n      onDragLeave: handleDragLeave,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/editor/lib/plugins/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/editor/lib/plugins/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorPlugin: () => (/* binding */ BehaviorPlugin),\n/* harmony export */   CoreBehaviorsPlugin: () => (/* binding */ CoreBehaviorsPlugin),\n/* harmony export */   DecoratorShortcutPlugin: () => (/* binding */ DecoratorShortcutPlugin),\n/* harmony export */   EditorRefPlugin: () => (/* binding */ EditorRefPlugin),\n/* harmony export */   EventListenerPlugin: () => (/* binding */ EventListenerPlugin),\n/* harmony export */   MarkdownPlugin: () => (/* binding */ MarkdownPlugin),\n/* harmony export */   OneLinePlugin: () => (/* binding */ OneLinePlugin)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/./node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_chunks-es/editor-provider.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_chunks-es/behavior.core.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/./node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/./node_modules/lodash/isEqual.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! xstate */ \"(ssr)/./node_modules/xstate/dist/log-0acd9069.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/selector.is-overlapping-selection.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_chunks-es/util.slice-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_chunks-es/util.selection-point-to-block-offset.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/./node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var _chunks_es_behavior_markdown_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../_chunks-es/behavior.markdown.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js\");\n/* harmony import */ var _chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../_chunks-es/util.merge-text-blocks.js */ \"(ssr)/./node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction BehaviorPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {\n    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      unregisterBehaviors.forEach(_temp);\n    };\n  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction _temp(unregister) {\n  return unregister();\n}\nfunction CoreBehaviorsPlugin() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BehaviorPlugin, { behaviors: _chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.coreBehaviors }), $[0] = t0) : t0 = $[0], t0;\n}\nfunction createPairRegex(char, amount) {\n  const prePrefix = `(?<!\\\\${char})`, prefix = `\\\\${char}`.repeat(Math.max(amount, 1)), postPrefix = \"(?!\\\\s)\", content = `([^${char}\\\\n]+?)`, preSuffix = \"(?<!\\\\s)\", suffix = `\\\\${char}`.repeat(Math.max(amount, 1)), postSuffix = `(?!\\\\${char})`;\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`;\n}\nfunction createDecoratorPairBehavior(config) {\n  config.pair.amount < 1 && console.warn(\"The amount of characters in the pair should be greater than 0\");\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount), regEx = new RegExp(`(${pairRegex})$`);\n  return (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (config.pair.amount < 1)\n        return !1;\n      const decorator = config.decorator({\n        schema: snapshot.context.schema\n      });\n      if (decorator === void 0)\n        return !1;\n      const focusTextBlock = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: selectionStartPoint\n      }) : void 0;\n      if (!focusTextBlock || !selectionStartOffset)\n        return !1;\n      const newText = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot)}${event.text}`, textToDecorate = newText.match(regEx)?.at(0);\n      if (textToDecorate === void 0)\n        return !1;\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset: newText.length - textToDecorate.length + config.pair.char.length * config.pair.amount\n        }\n      }, suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset: selectionStartOffset.offset + event.text.length - config.pair.char.length * config.pair.amount\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length\n        }\n      };\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = (0,_chunks_es_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.blockOffsetsToSelection)({\n          value: snapshot.context.value,\n          offsets: prefixOffsets\n        }), inlineObjectBeforePrefixFocus = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)({\n          context: {\n            ...snapshot.context,\n            selection: prefixSelection ? {\n              anchor: prefixSelection.focus,\n              focus: prefixSelection.focus\n            } : null\n          }\n        }), inlineObjectBeforePrefixFocusOffset = inlineObjectBeforePrefixFocus ? (0,_chunks_es_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          value: snapshot.context.value,\n          selectionPoint: {\n            path: inlineObjectBeforePrefixFocus.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (inlineObjectBeforePrefixFocusOffset && inlineObjectBeforePrefixFocusOffset.offset > prefixOffsets.anchor.offset && inlineObjectBeforePrefixFocusOffset.offset < prefixOffsets.focus.offset)\n          return !1;\n      }\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), previousInlineObjectOffset = previousInlineObject ? (0,_chunks_es_util_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          value: snapshot.context.value,\n          selectionPoint: {\n            path: previousInlineObject.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (previousInlineObjectOffset && previousInlineObjectOffset.offset > suffixOffsets.anchor.offset && previousInlineObjectOffset.offset < suffixOffsets.focus.offset)\n          return !1;\n      }\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      };\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({\n        event\n      }) => [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)],\n      (_, {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      }) => [\n        // Decorate the text between the prefix and suffix\n        (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.add\",\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor\n          }\n        }),\n        // Delete the suffix\n        (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: suffixOffsets\n        }),\n        // Delete the prefix\n        (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: prefixOffsets\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.remove\",\n          decorator\n        }),\n        (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)\n          });\n        })\n      ]\n    ]\n  });\n}\nfunction DecoratorShortcutPlugin(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0;\n  return $[0] !== config.decorator || $[1] !== config.pair || $[2] !== editor ? (t0 = {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair\n    }\n  }, $[0] = config.decorator, $[1] = config.pair, $[2] = editor, $[3] = t0) : t0 = $[3], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useActorRef)(decoratorPairMachine, t0), null;\n}\nconst emphasisListener = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: createDecoratorPairBehavior({\n    decorator: input.decorator,\n    pair: input.pair,\n    onDecorate: (offset) => {\n      sendBack({\n        type: \"emphasis.add\",\n        blockOffset: offset\n      });\n    }\n  })\n}), selectionListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"select\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (!event.at)\n        return {\n          blockOffsets: void 0\n        };\n      const anchor = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: event.at.anchor\n      }), focus = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        value: snapshot.context.value,\n        selectionPoint: event.at.focus\n      });\n      return !anchor || !focus ? {\n        blockOffsets: void 0\n      } : {\n        blockOffsets: {\n          anchor,\n          focus\n        }\n      };\n    },\n    actions: [({\n      event\n    }, {\n      blockOffsets\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        sendBack({\n          type: \"selection\",\n          blockOffsets\n        });\n      }\n    }, (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.forward)(event)]]\n  })\n}), deleteBackwardListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    actions: [() => [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"history.undo\"\n    }), (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n      sendBack({\n        type: \"delete.backward\"\n      });\n    })]]\n  })\n}), decoratorPairMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_11__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actors: {\n    \"emphasis listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(emphasisListener),\n    \"delete.backward listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(deleteBackwardListenerCallback),\n    \"selection listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(selectionListenerCallback)\n  }\n}).createMachine({\n  id: \"decorator pair\",\n  context: ({\n    input\n  }) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      invoke: [{\n        src: \"emphasis listener\",\n        input: ({\n          context\n        }) => ({\n          decorator: context.decorator,\n          editor: context.editor,\n          pair: context.pair\n        })\n      }],\n      on: {\n        \"emphasis.add\": {\n          target: \"emphasis added\",\n          actions: (0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n            offsetAfterEmphasis: ({\n              event\n            }) => event.blockOffset\n          })\n        }\n      }\n    },\n    \"emphasis added\": {\n      exit: [(0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n        offsetAfterEmphasis: void 0\n      })],\n      invoke: [{\n        src: \"selection listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }, {\n        src: \"delete.backward listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }],\n      on: {\n        selection: {\n          target: \"idle\",\n          guard: ({\n            context,\n            event\n          }) => !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_3__({\n            anchor: context.offsetAfterEmphasis,\n            focus: context.offsetAfterEmphasis\n          }, event.blockOffsets)\n        },\n        \"delete.backward\": {\n          target: \"idle\"\n        }\n      }\n    }\n  }\n}), EditorRefPlugin = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((_, ref) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(2), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), portableTextEditorRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(editor);\n  let t0, t1;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, t0, t1), null;\n});\nEditorRefPlugin.displayName = \"EditorRefPlugin\";\nfunction EventListenerPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_14__.useEffectEvent)(props.on);\n  let t0;\n  $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];\n  let t1;\n  return $[3] !== editor ? (t1 = [editor], $[3] = editor, $[4] = t1) : t1 = $[4], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction MarkdownPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(17), editor = (0,_chunks_es_editor_provider_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  $[0] !== editor || $[1] !== props.config ? (t0 = () => {\n    const unregisterBehaviors = (0,_chunks_es_behavior_markdown_js__WEBPACK_IMPORTED_MODULE_15__.createMarkdownBehaviors)(props.config).map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors)\n        unregisterBehavior();\n    };\n  }, t1 = [editor, props.config], $[0] = editor, $[1] = props.config, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  $[4] !== props.config.boldDecorator ? (t2 = props.config.boldDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"*\",\n      amount: 2\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"_\",\n      amount: 2\n    } })\n  ] }) : null, $[4] = props.config.boldDecorator, $[5] = t2) : t2 = $[5];\n  let t3;\n  $[6] !== props.config.codeDecorator ? (t3 = props.config.codeDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.codeDecorator, pair: {\n    char: \"`\",\n    amount: 1\n  } }) : null, $[6] = props.config.codeDecorator, $[7] = t3) : t3 = $[7];\n  let t4;\n  $[8] !== props.config.italicDecorator ? (t4 = props.config.italicDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"*\",\n      amount: 1\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"_\",\n      amount: 1\n    } })\n  ] }) : null, $[8] = props.config.italicDecorator, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== props.config.strikeThroughDecorator ? (t5 = props.config.strikeThroughDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.strikeThroughDecorator, pair: {\n    char: \"~\",\n    amount: 2\n  } }) : null, $[10] = props.config.strikeThroughDecorator, $[11] = t5) : t5 = $[11];\n  let t6;\n  return $[12] !== t2 || $[13] !== t3 || $[14] !== t4 || $[15] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n    t2,\n    t3,\n    t4,\n    t5\n  ] }), $[12] = t2, $[13] = t3, $[14] = t4, $[15] = t5, $[16] = t6) : t6 = $[16], t6;\n}\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [(_, {\n      selection\n    }) => [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    actions: []\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      event\n    }) => event.placement === \"before\" || event.placement === \"after\",\n    actions: []\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      snapshot,\n      event\n    }) => !(!(0,_chunks_es_selector_is_overlapping_selection_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot) || !(0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_16__.isTextBlock)(snapshot.context, event.block)),\n    actions: [({\n      event\n    }) => [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: event.block,\n      placement: \"auto\",\n      select: \"end\"\n    })]]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    actions: []\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const textBlocks = event.blocks.filter((block) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_16__.isTextBlock)(snapshot.context, block));\n      return textBlocks.length === 0 ? !1 : textBlocks.reduce((targetBlock, incomingBlock) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_16__.mergeTextBlocks)({\n        context: snapshot.context,\n        targetBlock,\n        incomingBlock\n      }));\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [(0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.raise)({\n        type: \"insert.block\",\n        block,\n        placement: \"auto\"\n      })]\n    ]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  (0,_chunks_es_behavior_core_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    actions: []\n  })\n];\nfunction OneLinePlugin() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/editor/lib/plugins/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/patches/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/patches/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAll: () => (/* binding */ applyAll),\n/* harmony export */   diffMatchPatch: () => (/* binding */ diffMatchPatch),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   prefixPath: () => (/* binding */ prefixPath),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIfMissing: () => (/* binding */ setIfMissing),\n/* harmony export */   unset: () => (/* binding */ unset)\n/* harmony export */ });\n/* harmony import */ var lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isObject.js */ \"(ssr)/./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString.js */ \"(ssr)/./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/findIndex.js */ \"(ssr)/./node_modules/lodash/findIndex.js\");\n/* harmony import */ var lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/clone.js */ \"(ssr)/./node_modules/lodash/clone.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/./node_modules/lodash/omit.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/./node_modules/@sanity/diff-match-patch/dist/index.js\");\n\n\n\n\n\n\nconst BEFORE = \"before\", AFTER = \"after\";\nfunction insert$1(array, position, index, ...args) {\n  if (position !== BEFORE && position !== AFTER)\n    throw new Error(\n      `Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`\n    );\n  const items = flatten(...args);\n  if (array.length === 0)\n    return items;\n  const len = array.length, idx = Math.abs((len + index) % len) % len, normalizedIdx = position === \"after\" ? idx + 1 : idx, copy = array.slice();\n  return copy.splice(normalizedIdx, 0, ...flatten(items)), copy;\n}\nfunction flatten(...values) {\n  return values.reduce((prev, item) => prev.concat(item), []);\n}\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(\n  Object.prototype.hasOwnProperty\n);\nfunction move(arr, from, to) {\n  const nextValue = arr.slice(), val = nextValue[from];\n  return nextValue.splice(from, 1), nextValue.splice(to, 0, val), nextValue;\n}\nfunction findTargetIndex(array, pathSegment) {\n  if (typeof pathSegment == \"number\")\n    return pathSegment;\n  const index = lodash_findIndex_js__WEBPACK_IMPORTED_MODULE_2__(array, pathSegment);\n  return index === -1 ? !1 : index;\n}\nfunction apply$3(value, patch) {\n  const nextValue = value.slice();\n  if (patch.path.length === 0) {\n    if (patch.type === \"setIfMissing\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return value === void 0 ? patch.value : value;\n    } else if (patch.type === \"set\") {\n      if (!Array.isArray(patch.value))\n        throw new Error(\"Cannot set value of an array to a non-array\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"move\") {\n        if (!patch.value || !hasOwn(patch.value, \"from\") || !hasOwn(patch.value, \"to\"))\n          throw new Error(\n            `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n              patch.value\n            )}`\n          );\n        return move(nextValue, patch.value.from, patch.value.to);\n      }\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path, index = findTargetIndex(value, head);\n  if (index === !1)\n    return nextValue;\n  if (tail.length === 0) {\n    if (patch.type === \"insert\") {\n      const { position, items } = patch;\n      return insert$1(value, position, index, items);\n    } else if (patch.type === \"unset\") {\n      if (typeof index != \"number\")\n        throw new Error(\n          `Expected array index to be a number, instead got \"${index}\"`\n        );\n      return nextValue.splice(index, 1), nextValue;\n    }\n  }\n  return nextValue[index] = _apply(nextValue[index], {\n    ...patch,\n    path: tail\n  }), nextValue;\n}\nfunction apply$2(value, patch) {\n  const nextValue = lodash_clone_js__WEBPACK_IMPORTED_MODULE_3__(value);\n  if (patch.path.length === 0) {\n    if (patch.type === \"set\") {\n      if (!lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(patch.value))\n        throw new Error(\"Cannot set value of an object to a non-object\");\n      return patch.value;\n    } else {\n      if (patch.type === \"unset\")\n        return;\n      if (patch.type === \"setIfMissing\")\n        return value === void 0 ? patch.value : value;\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`);\n  }\n  const [head, ...tail] = patch.path;\n  if (typeof head != \"string\")\n    throw new Error(`Expected field name to be a string, instad got: ${head}`);\n  return tail.length === 0 && patch.type === \"unset\" ? lodash_omit_js__WEBPACK_IMPORTED_MODULE_4__(nextValue, head) : (nextValue[head] = _apply(nextValue[head], {\n    ...patch,\n    path: tail\n  }), nextValue);\n}\nconst OPERATIONS$1 = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  inc(currentValue, nextValue) {\n    return currentValue + nextValue;\n  },\n  dec(currentValue, nextValue) {\n    return currentValue - nextValue;\n  }\n}, SUPPORTED_PATCH_TYPES$1 = Object.keys(OPERATIONS$1);\nfunction apply$1(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES$1.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${patch.type}\" and path \"${patch.path.map((path) => JSON.stringify(path)).join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  return OPERATIONS$1[patch.type](value, patch.value);\n}\nconst OPERATIONS = {\n  replace(_currentValue, nextValue) {\n    return nextValue;\n  },\n  set(_currentValue, nextValue) {\n    return nextValue;\n  },\n  setIfMissing(currentValue, nextValue) {\n    return currentValue === void 0 ? nextValue : currentValue;\n  },\n  unset(_currentValue, _nextValue) {\n  },\n  diffMatchPatch(currentValue, nextValue) {\n    const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.applyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.parsePatch)(nextValue), currentValue, {\n      allowExceedingIndices: !0\n    });\n    return result;\n  }\n}, SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS);\nfunction apply(value, patch) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type))\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    );\n  if (patch.path.length > 0)\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${patch.type}\" and path \"${patch.path.join(\".\")} that targeted the value \"${JSON.stringify(value)}\"`\n    );\n  const func = OPERATIONS[patch.type];\n  if (func)\n    return func(value, patch.value);\n  throw new Error(\"Unknown patch type\");\n}\nfunction applyAll(value, patches) {\n  return patches.reduce(_apply, value);\n}\nfunction applyPatch(value, patch) {\n  return Array.isArray(value) ? apply$3(value, patch) : lodash_isString_js__WEBPACK_IMPORTED_MODULE_1__(value) ? apply(value, patch) : lodash_isObject_js__WEBPACK_IMPORTED_MODULE_0__(value) ? apply$2(value, patch) : apply$1(value, patch);\n}\nfunction _apply(value, patch) {\n  return applyPatch(value, patch);\n}\nfunction setIfMissing(value, path = []) {\n  return {\n    type: \"setIfMissing\",\n    path,\n    value\n  };\n}\nfunction diffMatchPatch(currentValue, nextValue, path = []) {\n  const patches = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.makePatches)(currentValue, nextValue), patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_5__.stringifyPatches)(patches);\n  return { type: \"diffMatchPatch\", path, value: patch };\n}\nfunction insert(items, position, path = []) {\n  return {\n    type: \"insert\",\n    path,\n    position,\n    items\n  };\n}\nfunction set(value, path = []) {\n  return { type: \"set\", path, value };\n}\nfunction unset(path = []) {\n  return { type: \"unset\", path };\n}\nfunction prefixPath(patch, segment) {\n  return {\n    ...patch,\n    path: [segment, ...patch.path]\n  };\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/patches/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/react/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@portabletext/react/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PortableText: () => (/* binding */ PortableText),\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toPlainText: () => (/* reexport safe */ _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.toPlainText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n\n\n\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ol\", {\n      children\n    }),\n    bullet: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n      children\n    })\n  },\n  DefaultListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  link = ({\n    children,\n    value\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"a\", {\n    href: value?.href,\n    children\n  }),\n  underlineStyle = {\n    textDecoration: \"underline\"\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"em\", {\n      children\n    }),\n    strong: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"strong\", {\n      children\n    }),\n    code: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"code\", {\n      children\n    }),\n    underline: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: underlineStyle,\n      children\n    }),\n    \"strike-through\": ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"del\", {\n      children\n    }),\n    link\n  },\n  getTemplate = (type, prop) => `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst hidden = {\n    display: \"none\"\n  },\n  DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n      style: hidden,\n      children: warning\n    }) : /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", {\n      style: hidden,\n      children: warning\n    });\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n    className: `unknown__pt__mark__${markType}`,\n    children\n  }),\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n    children\n  }),\n  DefaultUnknownList = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"ul\", {\n    children\n  }),\n  DefaultUnknownListItem = ({\n    children\n  }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"li\", {\n    children\n  }),\n  DefaultHardBreak = () => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n  defaultBlockStyles = {\n    normal: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"p\", {\n      children\n    }),\n    blockquote: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"blockquote\", {\n      children\n    }),\n    h1: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h1\", {\n      children\n    }),\n    h2: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h2\", {\n      children\n    }),\n    h3: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h3\", {\n      children\n    }),\n    h4: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h4\", {\n      children\n    }),\n    h5: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h5\", {\n      children\n    }),\n    h6: ({\n      children\n    }) => /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"h6\", {\n      children\n    })\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction PortableText({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning\n}) {\n  const handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(input) ? input : [input],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.nestLists)(blocks, listNestingMode || _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.LIST_NEST_MODE_HTML),\n    components = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, [componentOverrides]),\n    renderNode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getNodeRenderer(components, handleMissingComponent), [components, handleMissingComponent]),\n    rendered = nested.map((node, index) => renderNode({\n      node,\n      index,\n      isInline: !1,\n      renderNode\n    }));\n  return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: rendered\n  });\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n        node,\n        index,\n        isInline\n      } = options,\n      key = node._key || `node-${index}`;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitList)(node) ? renderList(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextListItemBlock)(node) ? renderListItem(node, index, key) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitSpan)(node) ? renderSpan(node, index, key) : hasCustomComponentForNode(node) ? renderCustomBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextBlock)(node) ? renderBlock(node, index, key, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.isPortableTextToolkitTextNode)(node) ? renderText(node, key) : renderUnknownType(node, index, key, isInline);\n  }\n  function hasCustomComponentForNode(node) {\n    return node._type in components.types;\n  }\n  function renderListItem(node, index, key) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      Li = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Li, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderList(node, index, key) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index: childIndex,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      List = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (List === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(List, {\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderSpan(node, _index, key) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      Span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return Span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Span, {\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children\n    }, key);\n  }\n  function renderBlock(node, index, key, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      Block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return Block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Block, _objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }), key);\n  }\n  function renderText(node, key) {\n    if (node.text === `\n`) {\n      const HardBreak = components.hardBreak;\n      return HardBreak ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(HardBreak, {}, key) : `\n`;\n    }\n    return node.text;\n  }\n  function renderUnknownType(node, index, key, isInline) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode\n    };\n    handleMissingComponent(unknownTypeWarning(node._type), {\n      nodeType: \"block\",\n      type: node._type\n    });\n    const UnknownType = components.unknownType;\n    return /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(UnknownType, _objectSpread({}, nodeOptions), key);\n  }\n  function renderCustomBlock(node, index, key, isInline) {\n    const nodeOptions = {\n        value: node,\n        isInline,\n        index,\n        renderNode\n      },\n      Node = components.types[node._type];\n    return Node ? /* @__PURE__ */(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Node, _objectSpread({}, nodeOptions), key) : null;\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_2__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@portabletext/to-html/dist/pt-to-html.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents),\n/* harmony export */   escapeHTML: () => (/* binding */ escapeHTML),\n/* harmony export */   mergeComponents: () => (/* binding */ mergeComponents),\n/* harmony export */   toHTML: () => (/* binding */ toHTML),\n/* harmony export */   uriLooksSafe: () => (/* binding */ uriLooksSafe)\n/* harmony export */ });\n/* harmony import */ var _portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @portabletext/toolkit */ \"(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\");\nconst _excluded = [\"block\", \"list\", \"listItem\", \"marks\", \"types\"],\n  _excluded2 = [\"listItem\"],\n  _excluded3 = [\"_key\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n\nconst defaultLists = {\n    number: ({\n      children\n    }) => `<ol>${children}</ol>`,\n    bullet: ({\n      children\n    }) => `<ul>${children}</ul>`\n  },\n  DefaultListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  allowedProtocols = [\"http\", \"https\", \"mailto\", \"tel\"],\n  charMap = {\n    \"&\": \"amp\",\n    \"<\": \"lt\",\n    \">\": \"gt\",\n    '\"': \"quot\",\n    \"'\": \"#x27\"\n  };\nfunction escapeHTML(str) {\n  return str.replace(/[&<>\"']/g, s => `&${charMap[s]};`);\n}\nfunction uriLooksSafe(uri) {\n  const url = (uri || \"\").trim(),\n    first = url.charAt(0);\n  if (first === \"#\" || first === \"/\") return !0;\n  const colonIndex = url.indexOf(\":\");\n  if (colonIndex === -1) return !0;\n  const proto = url.slice(0, colonIndex).toLowerCase();\n  if (allowedProtocols.indexOf(proto) !== -1) return !0;\n  const queryIndex = url.indexOf(\"?\");\n  if (queryIndex !== -1 && colonIndex > queryIndex) return !0;\n  const hashIndex = url.indexOf(\"#\");\n  return hashIndex !== -1 && colonIndex > hashIndex;\n}\nconst link = ({\n    children,\n    value\n  }) => {\n    const href = (value == null ? void 0 : value.href) || \"\";\n    return uriLooksSafe(href) ? `<a href=\"${escapeHTML(href)}\">${children}</a>` : children;\n  },\n  defaultMarks = {\n    em: ({\n      children\n    }) => `<em>${children}</em>`,\n    strong: ({\n      children\n    }) => `<strong>${children}</strong>`,\n    code: ({\n      children\n    }) => `<code>${children}</code>`,\n    underline: ({\n      children\n    }) => `<span style=\"text-decoration:underline\">${children}</span>`,\n    \"strike-through\": ({\n      children\n    }) => `<del>${children}</del>`,\n    link\n  },\n  getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components.${prop}\\` option`,\n  unknownTypeWarning = typeName => getTemplate(`block type \"${typeName}\"`, \"types\"),\n  unknownMarkWarning = markType => getTemplate(`mark type \"${markType}\"`, \"marks\"),\n  unknownBlockStyleWarning = blockStyle => getTemplate(`block style \"${blockStyle}\"`, \"block\"),\n  unknownListStyleWarning = listStyle => getTemplate(`list style \"${listStyle}\"`, \"list\"),\n  unknownListItemStyleWarning = listStyle => getTemplate(`list item style \"${listStyle}\"`, \"listItem\");\nfunction printWarning(message) {\n  console.warn(message);\n}\nconst DefaultUnknownType = ({\n    value,\n    isInline\n  }) => {\n    const warning = unknownTypeWarning(value._type);\n    return isInline ? `<span style=\"display:none\">${warning}</span>` : `<div style=\"display:none\">${warning}</div>`;\n  },\n  DefaultUnknownMark = ({\n    markType,\n    children\n  }) => `<span class=\"unknown__pt__mark__${markType}\">${children}</span>`,\n  DefaultUnknownBlockStyle = ({\n    children\n  }) => `<p>${children}</p>`,\n  DefaultUnknownList = ({\n    children\n  }) => `<ul>${children}</ul>`,\n  DefaultUnknownListItem = ({\n    children\n  }) => `<li>${children}</li>`,\n  DefaultHardBreak = () => \"<br/>\",\n  defaultPortableTextBlockStyles = {\n    normal: ({\n      children\n    }) => `<p>${children}</p>`,\n    blockquote: ({\n      children\n    }) => `<blockquote>${children}</blockquote>`,\n    h1: ({\n      children\n    }) => `<h1>${children}</h1>`,\n    h2: ({\n      children\n    }) => `<h2>${children}</h2>`,\n    h3: ({\n      children\n    }) => `<h3>${children}</h3>`,\n    h4: ({\n      children\n    }) => `<h4>${children}</h4>`,\n    h5: ({\n      children\n    }) => `<h5>${children}</h5>`,\n    h6: ({\n      children\n    }) => `<h6>${children}</h6>`\n  },\n  defaultComponents = {\n    types: {},\n    block: defaultPortableTextBlockStyles,\n    marks: defaultMarks,\n    list: defaultLists,\n    listItem: DefaultListItem,\n    hardBreak: DefaultHardBreak,\n    unknownType: DefaultUnknownType,\n    unknownMark: DefaultUnknownMark,\n    unknownList: DefaultUnknownList,\n    unknownListItem: DefaultUnknownListItem,\n    unknownBlockStyle: DefaultUnknownBlockStyle\n  };\nfunction mergeComponents(parent, overrides) {\n  const {\n      block,\n      list,\n      listItem,\n      marks,\n      types\n    } = overrides,\n    rest = _objectWithoutProperties(overrides, _excluded);\n  return _objectSpread(_objectSpread({}, parent), {}, {\n    block: mergeDeeply(parent, overrides, \"block\"),\n    list: mergeDeeply(parent, overrides, \"list\"),\n    listItem: mergeDeeply(parent, overrides, \"listItem\"),\n    marks: mergeDeeply(parent, overrides, \"marks\"),\n    types: mergeDeeply(parent, overrides, \"types\")\n  }, rest);\n}\nfunction mergeDeeply(parent, overrides, key) {\n  const override = overrides[key],\n    parentVal = parent[key];\n  return typeof override == \"function\" || override && typeof parentVal == \"function\" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;\n}\nfunction toHTML(value, options = {}) {\n  const {\n      components: componentOverrides,\n      onMissingComponent: missingComponentHandler = printWarning\n    } = options,\n    handleMissingComponent = missingComponentHandler || noop,\n    blocks = Array.isArray(value) ? value : [value],\n    nested = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.nestLists)(blocks, \"html\"),\n    components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents,\n    renderNode = getNodeRenderer(components, handleMissingComponent);\n  return nested.map((node, index) => renderNode({\n    node,\n    index,\n    isInline: !1,\n    renderNode\n  })).join(\"\");\n}\nconst getNodeRenderer = (components, handleMissingComponent) => {\n  function renderNode(options) {\n    const {\n      node,\n      index,\n      isInline\n    } = options;\n    return (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitList)(node) ? renderList(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextListItemBlock)(node) ? renderListItem(node, index) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitSpan)(node) ? renderSpan(node) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextBlock)(node) ? renderBlock(node, index, isInline) : (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.isPortableTextToolkitTextNode)(node) ? renderText(node) : renderCustomBlock(node, index, isInline);\n  }\n  function renderListItem(node, index) {\n    const tree = serializeBlock({\n        node,\n        index,\n        isInline: !1,\n        renderNode\n      }),\n      renderer = components.listItem,\n      itemHandler = (typeof renderer == \"function\" ? renderer : renderer[node.listItem]) || components.unknownListItem;\n    if (itemHandler === components.unknownListItem) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: \"listItemStyle\"\n      });\n    }\n    let children = tree.children;\n    if (node.style && node.style !== \"normal\") {\n      const {\n          listItem\n        } = node,\n        blockNode = _objectWithoutProperties(node, _excluded2);\n      children = renderNode({\n        node: blockNode,\n        index,\n        isInline: !1,\n        renderNode\n      });\n    }\n    return itemHandler({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children\n    });\n  }\n  function renderList(node, index) {\n    const children = node.children.map((child, childIndex) => renderNode({\n        node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {\n          _key: `li-${index}-${childIndex}`\n        }),\n        index,\n        isInline: !1,\n        renderNode\n      })),\n      component = components.list,\n      list = (typeof component == \"function\" ? component : component[node.listItem]) || components.unknownList;\n    if (list === components.unknownList) {\n      const style = node.listItem || \"bullet\";\n      handleMissingComponent(unknownListStyleWarning(style), {\n        nodeType: \"listStyle\",\n        type: style\n      });\n    }\n    return list({\n      value: node,\n      index,\n      isInline: !1,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderSpan(node) {\n    const {\n        markDef,\n        markType,\n        markKey\n      } = node,\n      span = components.marks[markType] || components.unknownMark,\n      children = node.children.map((child, childIndex) => renderNode({\n        node: child,\n        index: childIndex,\n        isInline: !0,\n        renderNode\n      }));\n    return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {\n      nodeType: \"mark\",\n      type: markType\n    }), span({\n      text: (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.spanToPlainText)(node),\n      value: markDef,\n      markType,\n      markKey,\n      renderNode,\n      children: children.join(\"\")\n    });\n  }\n  function renderBlock(node, index, isInline) {\n    const _serializeBlock = serializeBlock({\n        node,\n        index,\n        isInline,\n        renderNode\n      }),\n      {\n        _key\n      } = _serializeBlock,\n      props = _objectWithoutProperties(_serializeBlock, _excluded3),\n      style = props.node.style || \"normal\",\n      block = (typeof components.block == \"function\" ? components.block : components.block[style]) || components.unknownBlockStyle;\n    return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {\n      nodeType: \"blockStyle\",\n      type: style\n    }), block(_objectSpread(_objectSpread({}, props), {}, {\n      value: props.node,\n      renderNode\n    }));\n  }\n  function renderText(node) {\n    if (node.text === `\n`) {\n      const hardBreak = components.hardBreak;\n      return hardBreak ? hardBreak() : `\n`;\n    }\n    return escapeHTML(node.text);\n  }\n  function renderCustomBlock(value, index, isInline) {\n    const node = components.types[value._type];\n    return node || handleMissingComponent(unknownTypeWarning(value._type), {\n      nodeType: \"block\",\n      type: value._type\n    }), (node || components.unknownType)({\n      value,\n      isInline,\n      index,\n      renderNode\n    });\n  }\n  return renderNode;\n};\nfunction serializeBlock(options) {\n  const {\n      node,\n      index,\n      isInline,\n      renderNode\n    } = options,\n    children = (0,_portabletext_toolkit__WEBPACK_IMPORTED_MODULE_0__.buildMarksTree)(node).map((child, i) => renderNode({\n      node: child,\n      isInline: !0,\n      index: i,\n      renderNode\n    }));\n  return {\n    _key: node._key || `block-${index}`,\n    children: children.join(\"\"),\n    index,\n    isInline,\n    node\n  };\n}\nfunction noop() {}\n\n//# sourceMappingURL=pt-to-html.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/to-html/dist/pt-to-html.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@portabletext/toolkit/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@portabletext/toolkit/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LIST_NEST_MODE_DIRECT: () => (/* binding */ LIST_NEST_MODE_DIRECT),\n/* harmony export */   LIST_NEST_MODE_HTML: () => (/* binding */ LIST_NEST_MODE_HTML),\n/* harmony export */   buildMarksTree: () => (/* binding */ buildMarksTree),\n/* harmony export */   isPortableTextBlock: () => (/* binding */ isPortableTextBlock),\n/* harmony export */   isPortableTextListItemBlock: () => (/* binding */ isPortableTextListItemBlock),\n/* harmony export */   isPortableTextSpan: () => (/* binding */ isPortableTextSpan),\n/* harmony export */   isPortableTextToolkitList: () => (/* binding */ isPortableTextToolkitList),\n/* harmony export */   isPortableTextToolkitSpan: () => (/* binding */ isPortableTextToolkitSpan),\n/* harmony export */   isPortableTextToolkitTextNode: () => (/* binding */ isPortableTextToolkitTextNode),\n/* harmony export */   nestLists: () => (/* binding */ nestLists),\n/* harmony export */   sortMarksByOccurences: () => (/* binding */ sortMarksByOccurences),\n/* harmony export */   spanToPlainText: () => (/* binding */ spanToPlainText),\n/* harmony export */   toPlainText: () => (/* binding */ toPlainText)\n/* harmony export */ });\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@portabletext/toolkit/dist/index.js\n");

/***/ })

};
;